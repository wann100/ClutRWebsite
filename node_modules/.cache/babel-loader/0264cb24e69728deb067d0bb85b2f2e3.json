{"remainingRequest":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/thread-loader/dist/cjs.js!/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/babel-loader/lib/index.js!/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kognos/Documents/GitHub/ClutRWebsite/src/admin/pages/content/content-type/ContentType.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/src/admin/pages/content/content-type/ContentType.vue","mtime":1565240946486},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/thread-loader/dist/cjs.js","mtime":1565232945419},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/babel-loader/lib/index.js","mtime":1558705227210},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/vue-loader/lib/index.js","mtime":1565232945777}],"contextDependencies":[],"result":["import _objectSpread from \"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.string.trim\";\nimport \"core-js/modules/es6.array.map\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es6.array.filter\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport checkbox from '@/admin/components/shared/Checkbox';\nimport dropdown from '@/admin/components/shared/Dropdown';\nimport { contentsRef, fieldsRef } from '@/admin/firebase_config';\nimport notifier from '@/admin/mixins/notifier';\nimport modal from '@/admin/components/shared/Modal';\nimport { switchCase } from '@babel/types';\nexport default {\n  name: 'content-type',\n  mixins: [notifier],\n  firebase: {\n    contents: {\n      source: contentsRef,\n      readyCallback: function readyCallback() {\n        // Load content types in select after content data loaded from firebase\n        this.loadContentTypes();\n      }\n    },\n    fields: fieldsRef\n  },\n  data: function data() {\n    return {\n      name: '',\n      fieldTypes: [{\n        id: 'textarea',\n        label: 'Textarea'\n      }, {\n        id: 'textbox',\n        label: 'Textbox'\n      }, {\n        id: 'integer',\n        label: 'Integer'\n      }, {\n        id: 'boolean',\n        label: 'Boolean'\n      }, {\n        id: 'url',\n        label: 'Url'\n      }, {\n        id: 'richtextbox',\n        label: 'Richtextbox'\n      }, {\n        id: 'tags',\n        label: 'Tags'\n      }, {\n        id: 'select',\n        label: 'Select'\n      }, {\n        id: 'image',\n        label: 'Image'\n      }],\n      contentFields: {\n        /* this obj will contain all new fields for Content\n        * every array contains its area objects (with names and etc.) */\n      },\n      slug: '',\n      showDesc: false,\n      createdContentTypes: null,\n      selectedContentType: {\n        id: '',\n        label: 'Select content type'\n      },\n      dropdownActive: false,\n      selectedContent: null,\n      contentsLoaded: false,\n      selectedContntFields: null,\n      showModal: {\n        add: false,\n        del: false\n      }\n    };\n  },\n  created: function created() {\n    this.clearChecked();\n    this.loadContentTypes();\n  },\n  computed: {\n    checkedFields: function checkedFields() {\n      var _this = this;\n\n      var fieldInContntType = false;\n\n      if (!this.selectedContent) {\n        return this.fields.filter(function (field) {\n          return field.checked;\n        });\n      } else {\n        this.fields.filter(function (field) {\n          //going through every checked field and adding them into fields array of the selected content type if not allready present\n          if (field.checked) {\n            _this.selectedContntFields.forEach(function (element) {\n              if (field.name.toLowerCase() == element.name.toLowerCase()) {\n                fieldInContntType = true;\n              }\n            });\n\n            if (!fieldInContntType) {\n              _this.selectedContntFields.push(field);\n\n              fieldInContntType = false;\n            }\n\n            fieldInContntType = false;\n          } //going through every unchecked field and removing them from fields array of the selected content type if they are present \n          else if (!field.checked) {\n              var removedIndex = undefined;\n\n              _this.selectedContntFields.forEach(function (element, index) {\n                if (field.name.toLowerCase() == element.name.toLowerCase()) {\n                  fieldInContntType = true;\n\n                  if (removedIndex) {} else {\n                    removedIndex = index;\n                  }\n                }\n              });\n\n              if (fieldInContntType) {\n                _this.selectedContntFields.splice(removedIndex, 1);\n\n                fieldInContntType = false;\n              }\n\n              fieldInContntType = false;\n            }\n        });\n        return this.selectedContntFields;\n      }\n    }\n  },\n  methods: {\n    callModal: function callModal(type) {\n      switch (type) {\n        case 'add':\n          this.showModal.add = true;\n          break;\n\n        case 'del':\n          this.showModal.del = true;\n          break;\n\n        default:\n          break;\n      }\n    },\n    addNewContentField: function addNewContentField(contentFieldArrParams) {\n      // contentFieldArrParams is arr that contains two elements 0 - name of Field 1 - type of Field\n      var fieldName = contentFieldArrParams[0];\n      var fieldType = contentFieldArrParams[1];\n      if (fieldName === '' || fieldType === '') return; // create arr for Field\n\n      this.contentFields[fieldType] = [];\n      this.contentFields[fieldType].push({\n        name: fieldName\n      });\n      this.showModal.add = false;\n    },\n    deleteContentField: function deleteContentField(fieldType, index) {\n      this.contentFields[fieldType].splice(index, 1);\n    },\n    loadContentTypes: function loadContentTypes() {\n      this.contentsLoaded = false;\n      this.selectedContentType = {\n        id: '',\n        label: 'Select content type'\n      };\n      this.createdContentTypes = this.contents.map(function (content) {\n        return {\n          id: content['.key'],\n          label: content.name\n        };\n      });\n      this.createdContentTypes.push({\n        id: '',\n        label: 'Select content type'\n      });\n      this.contentsLoaded = true;\n    },\n    createMenuItem: function createMenuItem(edit) {\n      var _this2 = this;\n\n      var path;\n\n      if (edit) {\n        path = this.selectedContent.name.toLowerCase();\n      } else {\n        path = this.name.toLowerCase();\n      }\n\n      path = path.replace(/^[, ]+|[, ]+$|[, ]+/g, '').trim();\n      var selectedFields = this.checkedFields.map(function (field) {\n        return Object.assign({\n          name: field.name,\n          type: field.type,\n          multiValue: field.multiValue\n        }, field.listable ? {\n          listable: true\n        } : null);\n      });\n      var item = {\n        name: this.name,\n        contentFields: this.contentFields,\n        slug: this.slug,\n        path: \"/admin/content/\".concat(path),\n        icon: 'fa-file-text',\n        fields: selectedFields\n      };\n\n      if (edit) {\n        this.selectedContent.path = \"/admin/content/\".concat(path);\n        this.selectedContent.fields = selectedFields;\n        this.selectedContent.slug = this.slug;\n\n        var _item = _objectSpread({}, this.selectedContent);\n\n        delete _item['.key'];\n        this.$firebaseRefs.contents.child(this.selectedContent['.key']).set(_item).then(function () {\n          _this2.resetForm();\n\n          _this2.loadContentTypes();\n\n          _this2.showNotification('success', 'Content edited successfully');\n        });\n      } else {\n        this.$firebaseRefs.contents.push(item).then(function () {\n          _this2.loadContentTypes();\n\n          _this2.showNotification('success', 'Content type added successfully');\n\n          _this2.resetForm();\n        });\n      }\n    },\n    deleteMenuItem: function deleteMenuItem() {\n      var _this3 = this;\n\n      this.$firebaseRefs.contents.child(this.selectedContent['.key']).remove().then(function () {\n        _this3.loadContentTypes();\n\n        _this3.showNotification('success', 'Content type removed successfully');\n      });\n    },\n    resetForm: function resetForm() {\n      this.name = '';\n      this.contentFields = {\n        textArea: []\n      };\n      this.slug = '';\n      this.selectedContent = null;\n\n      for (var fieldKey in this.fields) {\n        this.fields[fieldKey].checked = false;\n      }\n\n      for (var key in this.supports) {\n        this.supports[key] = false;\n      }\n    },\n    addField: function addField(field) {\n      var _this4 = this;\n\n      this.$firebaseRefs.fields.push(field).then(function () {\n        _this4.showNotification('success', 'Field added successfully');\n      });\n    },\n    editField: function editField(field, f) {\n      var _this5 = this;\n\n      this.$firebaseRefs.fields.child(field['.key']).set(f).then(function () {\n        _this5.showNotification('success', 'Field edited successfully');\n      });\n    },\n    removeField: function removeField(field) {\n      var _this6 = this;\n\n      this.$firebaseRefs.fields.child(field['.key']).remove().then(function () {\n        _this6.showNotification('success', 'Field removed successfully');\n      });\n      this.showModal.del = false;\n    },\n    moveFieldUp: function moveFieldUp(field, previousField) {\n      var itemCopy = Object.assign({}, field);\n      var previousItemCopy = Object.assign({}, previousField);\n      var itemCopyIndex = 0;\n      var previousItemCopyIndex = 0;\n      var selectedContntKey = this.selectedContent['.key'];\n      this.selectedContntFields.forEach(function (elem, index) {\n        if (itemCopy.name.toLowerCase() === elem.name.toLowerCase()) {\n          itemCopyIndex = index;\n        } else if (previousItemCopy.name.toLowerCase() === elem.name.toLowerCase()) {\n          previousItemCopyIndex = index;\n        }\n      });\n      this.selectedContntFields[itemCopyIndex] = previousItemCopy;\n      this.selectedContntFields[previousItemCopyIndex] = itemCopy;\n      this.$forceUpdate();\n    },\n    moveFieldDown: function moveFieldDown(field, nextField) {\n      var itemCopy = Object.assign({}, field);\n      var nextItemCopy = Object.assign({}, nextField);\n      var itemCopyIndex = 0;\n      var nextItemCopyIndex = 0;\n      var selectedContntKey = this.selectedContent['.key'];\n      this.selectedContntFields.forEach(function (elem, index) {\n        if (itemCopy.name.toLowerCase() === elem.name.toLowerCase()) {\n          itemCopyIndex = index;\n        } else if (nextItemCopy.name.toLowerCase() === elem.name.toLowerCase()) {\n          nextItemCopyIndex = index;\n        }\n      });\n      this.selectedContntFields[itemCopyIndex] = nextItemCopy;\n      this.selectedContntFields[nextItemCopyIndex] = itemCopy;\n      this.$forceUpdate();\n    },\n    clearChecked: function clearChecked() {\n      for (var key in this.fields) {\n        delete this.fields[key]['checked'];\n      }\n    },\n    selectContentType: function selectContentType(option) {\n      if (option.id === '') return;\n      this.selectedContentType = option;\n      this.selectedContent = this.contents.filter(function (content) {\n        if (content.name === option.label) {\n          return content;\n        }\n      })[0];\n      this.selectedContntFields = this.selectedContent.fields;\n      this.slug = this.selectedContent.slug;\n      this.clearChecked();\n\n      if (option.id) {\n        this.mapFields();\n      }\n    },\n    toggleDropdown: function toggleDropdown() {\n      this.dropdownActive = !this.dropdownActive;\n    },\n    mapFields: function mapFields() {\n      for (var j = 0; j < this.fields.length; j++) {\n        for (var i = 0; i < this.selectedContent.fields.length; i++) {\n          if (this.selectedContent.fields[i].name === this.fields[j].name) {\n            this.selectedContent.fields[i].checked = true;\n            this.$set(this.fields[j], 'checked', true);\n          }\n        }\n      }\n    },\n    setAsSlug: function setAsSlug(column) {\n      this.slug = this.slug === column ? null : column;\n    }\n  },\n  components: {\n    checkbox: checkbox,\n    dropdown: dropdown,\n    modal: modal\n  }\n};",{"version":3,"sources":["ContentType.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"contentType\">\n    <div class=\"container is-widescreen\">\n\n      <!-- View for edit/add new field -->\n      <router-view :edit-field=\"editField\" :add-field=\"addField\"></router-view>\n\n      <!-- notification -->\n      <transition mode=\"out-in\" name=\"fade\">\n        <div v-if=\"notification.message\" :class=\"'notification is-' + notification.type\">\n          <button class=\"delete\" @click=\"hideNotifications\"></button>{{notification.message}}\n        </div>\n      </transition>\n      <div class=\"columns\">\n        <div class=\"column is-two-thirds\">\n          <h2>Create content type</h2>\n          <div class=\"box\">\n            <div class=\"columns\">\n              <div class=\"column\">\n                <div class=\"field\">\n                  <label class=\"label\">Content type name</label>\n                  <div class=\"control\">\n                    <input v-if=\"!selectedContent\" class=\"input\" type=\"text\" placeholder=\"e.g. Movies\" v-model=\"name\">\n                    <input v-else class=\"input\" type=\"text\" placeholder=\"e.g. Movies\" v-model=\"selectedContent.name\">\n                  </div>\n                </div>\n                <!-- area to add new field (variables) to the Content -->\n                <div class=\"field\">\n                  <button type=\"submit\" class=\"button is-info\"  @click=\"callModal('add')\">Add new field</button>\n                  <!-- Modal -->\n                  <modal class=\"modal\" @close=\"showModal.add = false\"  @addContentField='addNewContentField($event)' v-if=\"showModal.add\" :kind=\"'addContentField'\" :header=\"'Add content field'\">\n                    <!-- Modal Slot - made for adding content type fields -->\n                    <option v-for=\"field in fieldTypes\" :key=\"field.id\">{{ field.label }}</option>\n                  </modal>\n                </div>\n\n                <!-- Custom Fields -->\n                <label class=\"label\">Fields</label>\n                <label class=\"has-text-danger is-size-7\" v-if=\"fields.length\">Select the fields you want to be shown in content lists</label>\n                <div class=\"field is-grouped is-grouped-multiline\">\n                  <ul class=\"nav-preview\">\n                    <li v-for=\"(field, fieldKey) in checkedFields\" :key=\"fieldKey\" v-if=\"field.checked\">\n                      {{ field.name }}\n                      <span>\n                        <span v-if=\"fieldKey !== 0\" class=\"has-text-success fa fa-arrow-up\" @click=\"moveFieldUp(field, checkedFields[fieldKey - 1])\"></span>\n                        <span v-if=\"fieldKey !== checkedFields.length - 1\" class=\"fa fa-arrow-down\" @click=\"moveFieldDown(field, checkedFields[fieldKey + 1])\"></span>\n                        <!-- <span @mouseover=\"showDesc = !showDesc\">\n                          <checkbox v-if=\"field.type === 'textbox'\" v-model=\"field.sortable\" /> </span>\n                        <span v-if=\"showDesc && field.type === 'textbox'\" class=\"has-text-danger is-size-7\">Check if you want this field to be shown in the table</span> -->\n                        <span><checkbox v-if=\"(field.type  !== 'textarea') && field.listable\" v-model=\"field.listable\" /></span>\n                      </span>\n                    </li>\n                  </ul>\n                </div>\n                <br /><br />\n\n                <div>\n                  <label class=\"label\">Slug - <strong v-text=\"slug\"></strong></label>\n\n                  <div class=\"select\">\n                    <select v-model=\"slug\" placeholder=\"Select Column For Slug\">\n                      <option value=\"\" selected>Select Column For Slug</option>\n                      <option v-for=\"(field, fieldKey) in checkedFields\" :key=\"fieldKey\" v-if=\"field.checked && field.type === 'textbox'\">\n                        {{ field.name }}\n                      </option>\n                    </select>\n                  </div>\n\n                  <br /><br />\n                  <p>This will be used with :key to identify record.</p>\n                </div>\n              </div>\n              <div class=\"column\">\n                <label class=\"label\">Available fields</label>\n                <label class=\"label has-text-danger is-size-7\" v-if=\"fields.length\">Select the fields you want to include in your content type</label>\n                <div class=\"field is-grouped is-grouped-multiline\">\n                  <ul class=\"nav-preview\">\n                    <li class=\"control\" v-for=\"(field, fieldKey) in fields\" :key=\"fieldKey\">\n                      <span class=\"field\">\n                        <checkbox :label=\"field.name\" v-model=\"field.checked\" />\n                        <span class=\"link-actions\">\n                          <span class=\"has-text-danger fa fa-trash\" @click=\"callModal('del')\"></span>\n                          <modal class=\"modal\" @close=\"showModal.del = false\"  @confirmDeleteField='removeField(field)' v-if=\"showModal.del\" :kind=\"'deleteField'\" :header=\"'Are you sure you want do delete this content type?'\">\n                          <!-- Modal Slot - made for adding content type fields -->\n                          </modal>\n                          <router-link :to=\"'/admin/content/fieldEdit/' + field['.key']\"><span class=\"has-text-info fa fa-edit\"></span></router-link>\n                        </span>\n                      </span>\n                    </li>\n                  </ul>\n                </div>\n                <br>\n                <router-link to=\"/admin/content/fieldNew\" class=\"button is-info is-small\">Add new field</router-link>\n              </div>\n            </div>\n            <div class=\"buttons\">\n              <button v-if=\"selectedContent\" type=\"submit\" class=\"button is-success\" :disabled=\"!selectedContent.name || !checkedFields.length\" @click=\"createMenuItem(true)\">Edit</button>\n              <button v-else type=\"submit\" class=\"button is-success\" :disabled=\"!name || !checkedFields.length\" @click=\"createMenuItem(false)\">Create new</button>\n            </div>\n          </div>\n        </div>\n        <div class=\"column\">\n          <h2>Edit content type</h2>\n          <div class=\"box\" v-if=\"contentsLoaded\">\n            <div class=\"dropdown\" :class=\"{'is-active': dropdownActive}\" @click=\"toggleDropdown\">\n              <div class=\"dropdown-trigger\">\n                <button class=\"button\" aria-haspopup=\"true\" aria-controls=\"dropdown-menu\" style=\"min-width: 200px !important;\">\n                  <span>{{selectedContentType.label}}</span>\n                  <span class=\"icon is-small\">\n                    <i class=\"fa fa-angle-down\" aria-hidden=\"true\"></i>\n                  </span>\n                </button>\n              </div>\n              <div class=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n                <div class=\"dropdown-content\">\n                  <a class=\"dropdown-item\" v-if=\"option\" v-for=\"(option, optionKey) in createdContentTypes\" :key=\"optionKey\" @click=\"selectContentType(option)\">\n                    {{option.label ? option.label : null }}\n                  </a>\n                </div>\n              </div>\n            </div>\n            <button v-if=\"selectedContent\" type=\"submit\" class=\"button is-danger\" @click=\"deleteMenuItem()\">Delete</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport checkbox from '@/admin/components/shared/Checkbox'\nimport dropdown from '@/admin/components/shared/Dropdown'\nimport { contentsRef, fieldsRef } from '@/admin/firebase_config'\nimport notifier from '@/admin/mixins/notifier'\nimport modal from '@/admin/components/shared/Modal'\nimport { switchCase } from '@babel/types'\n\nexport default {\n  name: 'content-type',\n  mixins: [notifier],\n  firebase: {\n    contents: {\n      source: contentsRef,\n      readyCallback: function () {\n        // Load content types in select after content data loaded from firebase\n        this.loadContentTypes()\n      }\n    },\n    fields: fieldsRef\n  },\n  data () {\n    return {\n      name: '',\n      fieldTypes: [\n        {\n          id: 'textarea',\n          label: 'Textarea'\n        },\n        {\n          id: 'textbox',\n          label: 'Textbox'\n        },\n        {\n          id: 'integer',\n          label: 'Integer'\n        },\n        {\n          id: 'boolean',\n          label: 'Boolean'\n        },\n        {\n          id: 'url',\n          label: 'Url'\n        },\n        {\n          id: 'richtextbox',\n          label: 'Richtextbox'\n        },\n        {\n          id: 'tags',\n          label: 'Tags'\n        },\n        {\n          id: 'select',\n          label: 'Select'\n        },\n        {\n          id: 'image',\n          label: 'Image'\n        }\n      ],\n      contentFields: {\n        /* this obj will contain all new fields for Content\n        * every array contains its area objects (with names and etc.) */\n      },\n      slug: '',\n      showDesc: false,\n      createdContentTypes: null,\n      selectedContentType: {\n        id: '',\n        label: 'Select content type'\n      },\n      dropdownActive: false,\n      selectedContent: null,\n      contentsLoaded: false,\n      selectedContntFields: null,\n      showModal: { add: false, del: false }\n    }\n  },\n  created () {\n    this.clearChecked()\n    this.loadContentTypes()\n  },\n  computed: {\n    checkedFields () {\n      let fieldInContntType = false\n      if(!this.selectedContent){\n        return this.fields.filter(field => {\n          return field.checked\n        })\n      } else { \n        this.fields.filter(field => {\n          //going through every checked field and adding them into fields array of the selected content type if not allready present\n          if (field.checked){\n            this.selectedContntFields.forEach(element => {\n              if (field.name.toLowerCase() == element.name.toLowerCase()){\n                fieldInContntType = true\n              }\n            })\n            if(!fieldInContntType){\n              this.selectedContntFields.push(field)\n              fieldInContntType = false\n            }\n            fieldInContntType = false\n          }//going through every unchecked field and removing them from fields array of the selected content type if they are present \n          else if(!field.checked){\n            let removedIndex = undefined\n            this.selectedContntFields.forEach((element, index) => {\n              if (field.name.toLowerCase() == element.name.toLowerCase()){\n                fieldInContntType = true\n                if(removedIndex) {}\n                else {\n                  removedIndex = index\n                }\n              }\n            })\n            if(fieldInContntType){\n              this.selectedContntFields.splice(removedIndex,1)\n              fieldInContntType = false\n            }\n            fieldInContntType = false\n          }\n        })\n        return this.selectedContntFields\n      }\n    }\n  },\n  methods: {\n    callModal (type) {\n      switch (type) {\n        case 'add':\n          this.showModal.add = true\n          break\n        case 'del':\n          this.showModal.del = true\n          break\n        default:\n          break\n      }\n    },\n    addNewContentField (contentFieldArrParams) {\n      // contentFieldArrParams is arr that contains two elements 0 - name of Field 1 - type of Field\n      const fieldName = contentFieldArrParams[0]\n      const fieldType = contentFieldArrParams[1]\n      if (fieldName === '' || fieldType === '') return\n      // create arr for Field\n      this.contentFields[fieldType] = []\n      this.contentFields[fieldType].push({ name: fieldName })\n      this.showModal.add = false\n    },\n    deleteContentField (fieldType, index) {\n      this.contentFields[fieldType].splice(index, 1)\n    },\n    loadContentTypes () {\n      this.contentsLoaded = false\n      this.selectedContentType = {\n        id: '',\n        label: 'Select content type'\n      }\n      this.createdContentTypes = this.contents.map(content => {\n        return {\n          id: content['.key'],\n          label: content.name\n        }\n      })\n      this.createdContentTypes.push({ id: '', label: 'Select content type' })\n      this.contentsLoaded = true\n    },\n    createMenuItem (edit) {\n      let path\n      if (edit) {\n        path = this.selectedContent.name.toLowerCase()\n      } else {\n        path = this.name.toLowerCase()\n      }\n      path = path.replace(/^[, ]+|[, ]+$|[, ]+/g, '').trim()\n\n      let selectedFields = this.checkedFields.map(field => {\n        return Object.assign({\n          name: field.name,\n          type: field.type,\n          multiValue: field.multiValue\n        }, field.listable ? { listable: true } : null)\n      })\n\n      let item = {\n        name: this.name,\n        contentFields: this.contentFields,\n        slug: this.slug,\n        path: `/admin/content/${path}`,\n        icon: 'fa-file-text',\n        fields: selectedFields\n      }\n      if (edit) {\n        this.selectedContent.path = `/admin/content/${path}`\n        this.selectedContent.fields = selectedFields\n        this.selectedContent.slug = this.slug\n        let item = { ...this.selectedContent }\n        delete item['.key']\n        this.$firebaseRefs.contents.child(this.selectedContent['.key']).set(item).then(() => {\n          this.resetForm()\n          this.loadContentTypes()\n          this.showNotification('success', 'Content edited successfully')\n        })\n      } else {\n        this.$firebaseRefs.contents.push(item).then(() => {\n          this.loadContentTypes()\n          this.showNotification('success', 'Content type added successfully')\n          this.resetForm()\n        })\n      }\n    },\n    deleteMenuItem () {\n      this.$firebaseRefs.contents.child(this.selectedContent['.key']).remove()\n        .then(() => {\n          this.loadContentTypes()\n          this.showNotification('success', 'Content type removed successfully')\n        })\n    },\n    resetForm () {\n      this.name = ''\n      this.contentFields = {\n        textArea: []\n      }\n      this.slug = ''\n      this.selectedContent = null\n      for (var fieldKey in this.fields) {\n        this.fields[fieldKey].checked = false\n      }\n      for (var key in this.supports) {\n        this.supports[key] = false\n      }\n    },\n    addField (field) {\n      this.$firebaseRefs.fields.push(field).then(() => {\n        this.showNotification('success', 'Field added successfully')\n      })\n    },\n    editField (field, f) {\n      this.$firebaseRefs.fields.child(field['.key']).set(f).then(() => {\n        this.showNotification('success', 'Field edited successfully')\n      })\n    },\n    removeField (field) {\n      this.$firebaseRefs.fields.child(field['.key']).remove()\n        .then(() => {\n          this.showNotification('success', 'Field removed successfully')\n        })\n      this.showModal.del = false\n    },\n    moveFieldUp (field, previousField) {\n      let itemCopy = Object.assign({}, field)\n      let previousItemCopy = Object.assign({}, previousField)\n      let itemCopyIndex = 0\n      let previousItemCopyIndex = 0\n      let selectedContntKey = this.selectedContent['.key']\n      this.selectedContntFields.forEach((elem,index) => {\n        if(itemCopy.name.toLowerCase() === elem.name.toLowerCase()) {\n          itemCopyIndex = index\n        } \n        else if(previousItemCopy.name.toLowerCase() === elem.name.toLowerCase()) {\n          previousItemCopyIndex = index\n        } \n      })\n      this.selectedContntFields[itemCopyIndex] = previousItemCopy\n      this.selectedContntFields[previousItemCopyIndex] = itemCopy\n      this.$forceUpdate()\n    },\n    moveFieldDown (field, nextField) {\n      let itemCopy = Object.assign({}, field)\n      let nextItemCopy = Object.assign({}, nextField)\n      let itemCopyIndex = 0\n      let nextItemCopyIndex = 0\n      let selectedContntKey = this.selectedContent['.key']\n      this.selectedContntFields.forEach((elem,index) => {\n        if(itemCopy.name.toLowerCase() === elem.name.toLowerCase()) {\n          itemCopyIndex = index\n        } \n        else if(nextItemCopy.name.toLowerCase() === elem.name.toLowerCase()) {\n          nextItemCopyIndex = index\n        } \n      })\n      this.selectedContntFields[itemCopyIndex] = nextItemCopy\n      this.selectedContntFields[nextItemCopyIndex] = itemCopy\n      this.$forceUpdate()\n    },\n    clearChecked () {\n      for (var key in this.fields) {\n        delete this.fields[key]['checked']\n      }\n    },\n    selectContentType (option) {\n      if (option.id === '') return\n\n      this.selectedContentType = option\n      this.selectedContent = this.contents.filter(content => {\n        if (content.name === option.label) {\n          return content\n        }\n      })[0]\n      this.selectedContntFields = this.selectedContent.fields\n      this.slug = this.selectedContent.slug\n      this.clearChecked()\n      if (option.id) {\n        this.mapFields()\n      }\n    },\n    toggleDropdown () {\n      this.dropdownActive = !this.dropdownActive\n    },\n    mapFields () {\n      for (var j = 0; j < this.fields.length; j++) {\n        for (var i = 0; i < this.selectedContent.fields.length; i++) {\n          if (this.selectedContent.fields[i].name === this.fields[j].name) {\n            this.selectedContent.fields[i].checked = true\n            this.$set(this.fields[j], 'checked', true)\n          }\n        }\n      }\n    },\n    setAsSlug (column) {\n      this.slug = this.slug === column ? null : column\n    }\n  },\n  components: {\n    checkbox,\n    dropdown,\n    modal\n  }\n}\n\n</script>\n\n<style lang=\"scss\" scoped>\n.contentType {\n  .nav-preview {\n    padding-left: 15px;\n  }\n\n  .link-actions {\n    display: none;\n    span {\n      cursor: pointer;\n    }\n  }\n  .cursor-pointer {\n    cursor: pointer;\n  }\n\n  .nav-preview > li:hover .link-actions {\n    display: inline;\n  }\n\n  .modal {\n    z-index: 1024;\n  }\n}\n</style>\n"],"sourceRoot":"src/admin/pages/content/content-type"}]}