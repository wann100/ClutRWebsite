{"remainingRequest":"/Users/kognos/Documents/GitHub/tamiat/node_modules/babel-loader/lib/index.js!/Users/kognos/Documents/GitHub/tamiat/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/kognos/Documents/GitHub/tamiat/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kognos/Documents/GitHub/tamiat/src/admin/pages/content/contents/ContentsNew.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/kognos/Documents/GitHub/tamiat/src/admin/pages/content/contents/ContentsNew.vue","mtime":1565240946487},{"path":"/Users/kognos/Documents/GitHub/tamiat/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/tamiat/node_modules/babel-loader/lib/index.js","mtime":1558705227210},{"path":"/Users/kognos/Documents/GitHub/tamiat/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/tamiat/node_modules/vue-loader/lib/index.js","mtime":1565232945777}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.string.link\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.object.values\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport firebase from \"firebase/app\";\nimport \"firebase/storage\";\nimport { mediaRef } from \"@/admin/firebase_config\";\nimport editorOptions from \"@/admin/utils/editor-options\";\nimport imageLoader from \"@/admin/mixins/image-loader\";\nimport notifier from \"@/admin/mixins/notifier\"; // Import component\n\nimport Loading from \"vue-loading-overlay\"; // Import stylesheet\n\nimport \"vue-loading-overlay/dist/vue-loading.css\";\nexport default {\n  name: \"content-new\",\n  components: {\n    Loading: Loading\n  },\n  firebase: {\n    media: mediaRef\n  },\n  props: [\"add-content\", \"fields\"],\n  mixins: [imageLoader, notifier],\n  data: function data() {\n    return {\n      imagePreview: null,\n      newContent: {\n        tags: []\n      },\n      inputData: '',\n      booleanName: '',\n      editorOptions: editorOptions,\n      select: {\n        selected: '',\n        options: []\n      },\n      selectOptionsRow: '',\n      urlContentData: {\n        name: '',\n        link: ''\n      },\n      isLoading: false,\n      fullPage: true\n    };\n  },\n  methods: {\n    add: function add(state) {\n      this.newContent.created = Date.now();\n      this.newContent.selected = false;\n      this.newContent.state = state;\n      this.addContent(this.newContent);\n      this.$router.push({\n        path: \"/admin/content/\" + this.$route.params.key\n      });\n    },\n    uploadFeaturedImage: function uploadFeaturedImage(e, fieldName) {\n      var _this = this;\n\n      this.isLoading = true;\n      var file = e.target.files[0];\n      var storageRef = firebase.storage().ref(\"images/\" + file.name);\n      storageRef.put(file).then(function (snapshot) {\n        snapshot.ref.getDownloadURL().then(function (downloadURL) {\n          _this.$set(_this, \"imagePreview\", URL.createObjectURL(file));\n\n          _this.newContent[fieldName] = \"\";\n          _this.newContent[fieldName] = downloadURL;\n          if (Object.values(_this.media).find(function (e) {\n            return e.path === snapshot.ref.fullPath;\n          })) return; // this prevents duplicate entries in the media object\n\n          _this.$firebaseRefs.media.push({\n            src: downloadURL,\n            path: snapshot.ref.fullPath,\n            name: snapshot.metadata.name\n          });\n        }).then(function () {\n          _this.isLoading = false;\n        });\n      });\n    },\n    createUrlnewContent: function createUrlnewContent(fieldName) {\n      if (this.urlContentData.name !== \"\") {\n        if (!this.newContent[fieldName]) {\n          this.newContent[fieldName] = {\n            name: \"\",\n            link: \"\"\n          };\n        }\n\n        this.newContent[fieldName].name = this.urlContentData.name;\n        this.newContent[fieldName].link = this.urlContentData.link;\n      }\n    },\n    createNewBoolContent: function createNewBoolContent(fieldName) {\n      if (this.booleanName !== \"\") {\n        if (!this.newContent[fieldName]) {\n          this.newContent[fieldName] = '';\n        }\n\n        this.newContent[fieldName] = this.booleanName;\n      }\n    },\n    styleTags: function styleTags(fieldName) {\n      var _this2 = this;\n\n      if (this.inputData !== '') {\n        if (!this.newContent[fieldName]) {\n          this.newContent[fieldName] = [];\n        }\n\n        this.inputData.split(',').forEach(function (tag) {\n          _this2.newContent[fieldName].push(\"\".concat(tag.trim()));\n        });\n        this.inputData = '';\n      }\n    },\n    removeTag: function removeTag(index, fieldName, isSelect) {\n      // function to remove tags and options\n      // cloning object (to make Vue reactive)\n      var currentContent = Object.assign({}, this.newContent);\n\n      if (isSelect) {\n        // delete element from select options\n        currentContent[fieldName].options.splice(index, 1);\n      } else {\n        // delete element from arr\n        currentContent[fieldName].splice(index, 1);\n      } // return cloned object Back\n\n\n      this.newContent = Object.assign({}, currentContent);\n    },\n    // function to create Select Options from input area\n    styleOptions: function styleOptions(fieldName) {\n      var _this3 = this;\n\n      if (this.selectOptionsRow !== '') {\n        if (!this.newContent[fieldName]) {\n          this.newContent[fieldName] = this.select;\n        }\n\n        this.selectOptionsRow.split(',').forEach(function (tag) {\n          _this3.select.options.push(\"\".concat(tag.trim()));\n        });\n        this.newContent[fieldName] = this.select;\n        this.selectOptionsRow = '';\n      }\n    }\n  }\n};",{"version":3,"sources":["ContentsNew.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"box\">\n    <loading color=\"#3b9169\" :active.sync=\"isLoading\" :can-cancel=\"false\" :is-full-page=\"fullPage\"></loading>\n\n    <div class=\"columns\">\n      <div class=\"column is-two-thirds\">\n        <!-- Textbox fields -->\n        <div\n          class=\"field\"\n          v-for=\"(field, index) in fields\"\n          :key=\"index\"\n          v-if=\"field.type === 'textbox'\"\n        >\n          <label class=\"label\">{{ field.name }}</label>\n          <div class=\"control\">\n            <input\n              type=\"text\"\n              class=\"input\"\n              maxlength=\"25\"\n              required\n              :placeholder=\"field.name\"\n              v-model=\"newContent[field.name]\"\n            >\n          </div>\n        </div>\n\n        <!-- Textarea fields -->\n        <div\n          class=\"field\"\n          v-for=\"(field, index) in fields\"\n          :key=\"index\"\n          v-if=\"field.type === 'textarea'\"\n        >\n          <label class=\"label\">{{ field.name }}</label>\n          <div class=\"control\">\n            <textarea\n              class=\"input\"\n              v-model=\"newContent[field.name]\"\n              :placeholder=\"field.name\"\n              v-text=\"newContent[field.name]\"\n            ></textarea>\n          </div>\n        </div>\n\n        <!-- Rich text fields - vue-quill-editor plugin -->\n        <div v-for=\"(field, index) in fields\" :key=\"index\" v-if=\"field.type === 'richtextbox'\">\n          <quill-editor v-model=\"newContent[field.name]\" :options=\"editorOptions\"></quill-editor>\n          <input type=\"file\" id=\"getImage\" style=\"display: none;\" @change=\"uploadImage\">\n        </div>\n\n        <!-- Category (select) fields -->\n        <br>\n        <div\n          class=\"field\"\n          v-for=\"(field, index) in fields\"\n          :key=\"index\"\n          v-if=\"field.type === 'select'\"\n        >\n          <label class=\"label\">{{ field.name }}</label>\n          <div class=\"columns\">\n            <div class=\"column\">\n              <div class=\"select margin-select\">\n                <select v-model=\"select.selected\">\n                  <option\n                    v-for=\"(selectOption, selectIndex) in select.options\"\n                    :key=\"selectIndex\"\n                  >{{ selectOption }}</option>\n                </select>\n              </div>\n            </div>\n            <div class=\"column\">\n              <!--area to delete options-->\n              <div v-for=\"(option, optionKey) in select.options\" :key=\"optionKey\">\n                <span @click=\"removeTag(optionKey, field.name, true)\" class=\"tag is-info pointer\">\n                  {{option}}\n                  <button class=\"delete is-small\"></button>\n                </span>\n              </div>\n            </div>\n          </div>\n          <!--area to enter options-->\n          <div class=\"control\">\n            <input\n              type=\"text\"\n              class=\"input\"\n              :placeholder=\"field.name\"\n              @blur=\"styleOptions(field.name)\"\n              @keyup.enter=\"styleOptions(field.name)\"\n              v-model=\"selectOptionsRow\"\n              maxlength=\"25\"\n            >\n          </div>\n          <p>Separate options with commas</p>\n        </div>\n\n        <!-- Integer fields -->\n        <br>\n        <div\n          class=\"field\"\n          v-for=\"(field, index) in fields\"\n          :key=\"index\"\n          v-if=\"field.type === 'integer'\"\n        >\n          <label class=\"label\">{{ field.name }}</label>\n          <div class=\"columns\">\n            <div class=\"column is-one-third\">\n              <input \n                type=\"number\" \n                :placeholder=\"field.name\" \n                class=\"input\"\n                v-model=\"newContent[field.name]\"\n              >\n            </div>\n          </div>\n        </div>\n\n        <!-- Boolean fields -->\n        <br>\n        <div\n          class=\"field\"\n          v-for=\"(field, index) in fields\"\n          :key=\"index\"\n          v-if=\"field.type === 'boolean'\"\n        >\n          <label class=\"label\">{{ field.name }}</label>\n          <div class=\"columns\">\n            <div class=\"column is-one-third\">\n              <span>Name</span>\n              <input\n                :placeholder=\"field.name + ' name'\"\n                class=\"input\"\n                v-model=\"booleanName\"\n                @blur=\"createNewBoolContent(field.name)\"\n                @keyup.enter=\"createNewBoolContent(field.name)\"\n              >\n            </div>\n          </div>\n          <div class=\"columns\">\n            <div class=\"column\">\n              <label class=\"checkbox\">\n                <input type=\"checkbox\">\n                {{ booleanName }}\n              </label>\n            </div>\n          </div>\n        </div>\n\n        <!-- Url fields -->\n        <br>\n        <div\n          class=\"field\"\n          v-for=\"(field, index) in fields\"\n          :key=\"index\"\n          v-if=\"field.type === 'url'\"\n        >\n          <label class=\"label\">{{ field.name }}</label>\n          <div class=\"columns\">\n            <div class=\"column is-two-fifths\">\n              <span>Name</span>\n              <input\n                :placeholder=\"field.name + ' name'\"\n                class=\"input\"\n                v-model=\"urlContentData.name\"\n                @blur=\"createUrlnewContent(field.name)\"\n                @keyup.enter=\"createUrlnewContent(field.name)\"\n              >\n            </div>\n            <div class=\"column is-two-fifths\">\n              <span>Link</span>\n              <input\n                :placeholder=\"field.name + ' link'\"\n                class=\"input\"\n                v-model=\"urlContentData.link\"\n                @blur=\"createUrlnewContent(field.name)\"\n                @keyup.enter=\"createUrlnewContent(field.name)\"\n              >\n            </div>\n          </div>\n          <div class=\"columns\">\n            <div class=\"column\">\n              <span>Preview:</span>\n              <a :href=\"urlContentData.link\">{{ urlContentData.name }}</a>\n            </div>\n          </div>\n        </div>\n        <!---->\n      </div>\n\n      <!-- Right sidebar -->\n      <div class=\"column is-one-third\">\n        <!-- Tag fields -->\n        <div\n          class=\"field\"\n          v-for=\"(field, index) in fields\"\n          :key=\"index\"\n          v-if=\"field.type === 'tags'\"\n        >\n          <label class=\"label\">{{ field.name }}</label>\n          <div class=\"control\">\n            <div class=\"tags tagscontainer\">\n              <span\n                @click=\"removeTag(tagKey, field.name)\"\n                v-for=\"(tag, tagKey) in newContent[field.name]\"\n                :key=\"tagKey\"\n                class=\"tag is-info pointer\"\n              >\n                {{tag}}\n                <button class=\"delete is-small\"></button>\n              </span>\n              <input\n                :placeholder=\"field.name\"\n                @blur=\"styleTags(field.name)\"\n                @keyup.enter=\"styleTags(field.name)\"\n                type=\"text\"\n                class=\"input\"\n                maxlength=\"25\"\n                v-model=\"inputData\"\n              >\n            </div>\n            <p>Separate tags with commas</p>\n          </div>\n        </div>\n\n        <!-- Image fields -->\n        <div\n          class=\"field\"\n          v-for=\"(field, index) in fields\"\n          :key=\"index\"\n          v-if=\"field.type === 'image'\"\n        >\n          <label class=\"label\">{{ field.name }}</label>\n          <div class=\"control\">\n            <img v-if=\"imagePreview\" :src=\"imagePreview\">\n            <div class=\"file\">\n              <label class=\"file-label\">\n                <input\n                  @change=\"uploadFeaturedImage($event, field.name)\"\n                  class=\"file-input\"\n                  type=\"file\"\n                  name=\"resume\"\n                >\n                <span class=\"file-cta\">\n                  <span class=\"file-icon\">\n                    <i class=\"fa fa-upload\"></i>\n                  </span>\n                  <span class=\"file-label\">Choose a file…</span>\n                </span>\n              </label>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- notification -->\n    <div v-if=\"notification.message\" :class=\"'notification is-' + notification.type\">\n      <button class=\"delete\" @click=\"hideNotifications\"></button>\n      {{notification.message}}\n    </div>\n\n    <!-- the form buttons -->\n    <button type=\"submit\" class=\"button is-success\" @click=\"add('published')\">Publish</button>\n    <button type=\"submit\" class=\"button is-info\" @click=\"add('saved')\">Save Draft</button>\n    <router-link :to=\"'/admin/content/' + $route.params.key\" class=\"button is-danger\">Cancel</router-link>\n  </div>\n</template>\n\n<script>\nimport firebase from \"firebase/app\"\nimport \"firebase/storage\"\nimport { mediaRef } from \"@/admin/firebase_config\"\nimport editorOptions from \"@/admin/utils/editor-options\"\nimport imageLoader from \"@/admin/mixins/image-loader\"\nimport notifier from \"@/admin/mixins/notifier\"\n// Import component\nimport Loading from \"vue-loading-overlay\"\n// Import stylesheet\nimport \"vue-loading-overlay/dist/vue-loading.css\"\n\nexport default {\n  name: \"content-new\",\n  components: {\n    Loading\n  },\n  firebase: {\n    media: mediaRef\n  },\n  props: [\"add-content\", \"fields\"],\n  mixins: [imageLoader, notifier],\n  data() {\n    return {\n      imagePreview: null,\n      newContent: {\n        tags: []\n      },\n      inputData: '',\n      booleanName: '',\n      editorOptions,\n      select: {\n        selected:'',\n        options:[]\n      },\n      selectOptionsRow: '',\n      urlContentData: {\n        name: '',\n        link: ''\n      },\n      isLoading: false,\n      fullPage: true\n    };\n  },\n  methods: {\n    add(state) {\n      this.newContent.created = Date.now()\n      this.newContent.selected = false\n      this.newContent.state = state\n\n      this.addContent(this.newContent)\n      this.$router.push({ path: \"/admin/content/\" + this.$route.params.key })\n    },\n    uploadFeaturedImage(e, fieldName) {\n      this.isLoading = true;\n      let file = e.target.files[0];\n      let storageRef = firebase.storage().ref(\"images/\" + file.name)\n\n      storageRef.put(file).then(snapshot => {\n        snapshot.ref\n          .getDownloadURL()\n          .then(downloadURL => {\n            this.$set(this, \"imagePreview\", URL.createObjectURL(file))\n            this.newContent[fieldName] = \"\"\n            this.newContent[fieldName] = downloadURL\n            if (\n              Object.values(this.media).find(\n                e => e.path === snapshot.ref.fullPath\n              )\n            )\n              return; // this prevents duplicate entries in the media object\n            this.$firebaseRefs.media.push({\n              src: downloadURL,\n              path: snapshot.ref.fullPath,\n              name: snapshot.metadata.name\n            });\n          })\n          .then(() => {\n            this.isLoading = false\n          });\n      });\n    },\n    createUrlnewContent(fieldName) {\n      if (this.urlContentData.name !== \"\") {\n        if (!this.newContent[fieldName]) {\n          this.newContent[fieldName] = { name: \"\", link: \"\" }\n        }\n        this.newContent[fieldName].name = this.urlContentData.name;\n        this.newContent[fieldName].link = this.urlContentData.link;\n      }\n    },\n    createNewBoolContent(fieldName) {\n      if (this.booleanName !== \"\") {\n        if (!this.newContent[fieldName]) {\n          this.newContent[fieldName] = ''\n        }\n        this.newContent[fieldName] = this.booleanName\n      }\n    },\n    styleTags(fieldName) {\n      if (this.inputData !== '') {\n        if (!this.newContent[fieldName]) {\n          this.newContent[fieldName] = []\n        }\n        this.inputData.split(',').forEach(tag => {\n          this.newContent[fieldName].push(`${tag.trim()}`)\n        });\n        this.inputData = ''\n      }\n    },\n    removeTag(index, fieldName,isSelect) {\n      // function to remove tags and options\n      // cloning object (to make Vue reactive)\n      let currentContent = Object.assign({}, this.newContent)\n      if(isSelect) {\n        // delete element from select options\n        currentContent[fieldName].options.splice(index, 1)\n      } else {\n        // delete element from arr\n        currentContent[fieldName].splice(index, 1)\n      }\n      // return cloned object Back\n      this.newContent = Object.assign({}, currentContent)\n    },\n    // function to create Select Options from input area\n    styleOptions (fieldName) {\n      if (this.selectOptionsRow !== '') {\n        if (!this.newContent[fieldName]) {\n          this.newContent[fieldName] = this.select\n        }\n        this.selectOptionsRow.split(',').forEach(tag => {\n          this.select.options.push(`${tag.trim()}`)\n        })\n        this.newContent[fieldName] = this.select\n\n        this.selectOptionsRow = ''\n      }\n    }\n  }\n}\n</script>\n\n<style>\n.tagscontainer {\n  border: 2px solid #f2f2f2;\n  border-radius: 5px;\n  padding: 5px;\n}\n.pointer {\n  cursor: pointer;\n}\n.ql-container {\n  min-height: 200px;\n}\n.margin-select {\n  margin-bottom: 25px;\n}\n</style>\n"],"sourceRoot":"src/admin/pages/content/contents"}]}