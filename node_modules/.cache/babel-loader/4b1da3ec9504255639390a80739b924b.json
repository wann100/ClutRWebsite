{"remainingRequest":"/Users/kognos/Documents/GitHub/tamiat/node_modules/babel-loader/lib/index.js!/Users/kognos/Documents/GitHub/tamiat/node_modules/eslint-loader/index.js??ref--13-0!/Users/kognos/Documents/GitHub/tamiat/src/app/templates/LoadContent.js","dependencies":[{"path":"/Users/kognos/Documents/GitHub/tamiat/src/app/templates/LoadContent.js","mtime":1565240946503},{"path":"/Users/kognos/Documents/GitHub/tamiat/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/tamiat/node_modules/babel-loader/lib/index.js","mtime":1558705227210},{"path":"/Users/kognos/Documents/GitHub/tamiat/node_modules/eslint-loader/index.js","mtime":1565232944998}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport { contentsRef, routesRef } from '@/admin/firebase_config/index';\nimport contentFetch from '@/admin/mixins/contentFetch';\nimport _ from 'lodash';\nexport default {\n  mixins: [contentFetch],\n  firebase: {\n    routes: routesRef,\n    contents: contentsRef\n  },\n  computed: {\n    content: function content() {\n      var params = this.$route.params;\n      var path = this.$route.path;\n\n      if (params) {\n        _.forIn(params, function (value, key) {\n          path = path.replace(value, ':' + key);\n        });\n      }\n\n      var currentRoute = this.routes.filter(function (route) {\n        return route.path === path;\n      })[0];\n      var contentType = currentRoute.contentType;\n      var contentId = currentRoute.content !== 'none' && currentRoute.content !== undefined ? currentRoute.content : _.has(params, 'id') ? params.id : 'none'; // Only fetch published contents\n\n      return this.selectContentByTypeAndId(contentType, contentId, true);\n    }\n  }\n};",{"version":3,"sources":["/Users/kognos/Documents/GitHub/tamiat/src/app/templates/LoadContent.js"],"names":["contentsRef","routesRef","contentFetch","_","mixins","firebase","routes","contents","computed","content","params","$route","path","forIn","value","key","replace","currentRoute","filter","route","contentType","contentId","undefined","has","id","selectContentByTypeAndId"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,SAAtB,QAAuC,+BAAvC;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,eAAe;AACbC,EAAAA,MAAM,EAAE,CAACF,YAAD,CADK;AAEbG,EAAAA,QAAQ,EAAE;AACRC,IAAAA,MAAM,EAAEL,SADA;AAERM,IAAAA,QAAQ,EAAEP;AAFF,GAFG;AAMbQ,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OADQ,qBACG;AACT,UAAMC,MAAM,GAAG,KAAKC,MAAL,CAAYD,MAA3B;AACA,UAAIE,IAAI,GAAG,KAAKD,MAAL,CAAYC,IAAvB;;AACA,UAAIF,MAAJ,EAAY;AACVP,QAAAA,CAAC,CAACU,KAAF,CAAQH,MAAR,EAAgB,UAACI,KAAD,EAAQC,GAAR,EAAgB;AAC9BH,UAAAA,IAAI,GAAGA,IAAI,CAACI,OAAL,CAAaF,KAAb,EAAoB,MAAMC,GAA1B,CAAP;AACD,SAFD;AAGD;;AACD,UAAIE,YAAY,GAAG,KAAKX,MAAL,CAAYY,MAAZ,CAAmB,UAAAC,KAAK,EAAI;AAC7C,eAAOA,KAAK,CAACP,IAAN,KAAeA,IAAtB;AACD,OAFkB,EAEhB,CAFgB,CAAnB;AAIA,UAAIQ,WAAW,GAAGH,YAAY,CAACG,WAA/B;AACA,UAAIC,SAAS,GACXJ,YAAY,CAACR,OAAb,KAAyB,MAAzB,IAAmCQ,YAAY,CAACR,OAAb,KAAyBa,SAA5D,GACIL,YAAY,CAACR,OADjB,GAEIN,CAAC,CAACoB,GAAF,CAAMb,MAAN,EAAc,IAAd,IACEA,MAAM,CAACc,EADT,GAEE,MALR,CAbS,CAoBT;;AACA,aAAO,KAAKC,wBAAL,CAA8BL,WAA9B,EAA2CC,SAA3C,EAAsD,IAAtD,CAAP;AACD;AAvBO;AANG,CAAf","sourcesContent":["import { contentsRef, routesRef } from '@/admin/firebase_config/index'\nimport contentFetch from '@/admin/mixins/contentFetch'\nimport _ from 'lodash'\n\nexport default {\n  mixins: [contentFetch],\n  firebase: {\n    routes: routesRef,\n    contents: contentsRef\n  },\n  computed: {\n    content () {\n      const params = this.$route.params\n      let path = this.$route.path\n      if (params) {\n        _.forIn(params, (value, key) => {\n          path = path.replace(value, ':' + key)\n        })\n      }\n      let currentRoute = this.routes.filter(route => {\n        return route.path === path\n      })[0]\n\n      let contentType = currentRoute.contentType\n      let contentId =\n        currentRoute.content !== 'none' && currentRoute.content !== undefined\n          ? currentRoute.content\n          : _.has(params, 'id')\n            ? params.id\n            : 'none'\n\n      // Only fetch published contents\n      return this.selectContentByTypeAndId(contentType, contentId, true)\n    }\n  }\n}\n"]}]}