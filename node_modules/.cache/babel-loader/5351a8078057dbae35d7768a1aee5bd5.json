{"remainingRequest":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/babel-loader/lib/index.js!/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kognos/Documents/GitHub/ClutRWebsite/src/admin/pages/content/contents/Contents.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/src/admin/pages/content/contents/Contents.vue","mtime":1565240946487},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/babel-loader/lib/index.js","mtime":1558705227210},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/vue-loader/lib/index.js","mtime":1565232945777}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport _objectSpread from \"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport moment from 'moment';\nimport { contentsRef, db } from '@/admin/firebase_config';\nimport notifier from '@/admin/mixins/notifier';\nimport modal from '@/admin/components/shared/Modal';\nimport dropdown from '@/admin/components/shared/Dropdown';\nimport checkbox from '@/admin/components/shared/Checkbox';\nimport contentFilters from '@/admin/mixins/contentFilters';\nimport _ from 'lodash';\nexport default {\n  name: 'contents',\n  data: function data() {\n    return {\n      content: null,\n      // contentData: [],\n      selContent: null,\n      showModal: false,\n      header: '',\n      kind: '',\n      sortKey: 'tittle',\n      loaded: false\n    };\n  },\n  firebase: {\n    contents: contentsRef\n  },\n  mixins: [notifier, contentFilters],\n  created: function created() {\n    var _this = this;\n\n    contentsRef.once('value', function (snapshot) {\n      _this.content = Object.assign({}, _this.contents.filter(function (content) {\n        return content['.key'] === _this.$route.params.key;\n      })[0]);\n    });\n    this.$bindAsArray('contentData', db.ref('contents/' + this.$route.params.key + '/data'));\n    this.loaded = true;\n  },\n  computed: {\n    allContents: function allContents() {\n      return this.contentData.length;\n    },\n    savedContent: function savedContent() {\n      return this.contentData.filter(function (content) {\n        if (content.state === 'saved') {\n          return true;\n        }\n      });\n    },\n    publishedContent: function publishedContent() {\n      return this.contentData.filter(function (content) {\n        if (content.state === 'published') {\n          return true;\n        }\n      });\n    },\n    contentFields: function contentFields() {\n      //must order by content.fields since data in each instance of content.data is ordered by alphabet and not by field order set for that content type\n      return this.content.fields;\n    }\n  },\n  methods: {\n    findField: function findField(field) {\n      for (var key in this.content.fields) {\n        if (this.content.fields[key].name.toLowerCase() === field.toLowerCase()) {\n          if (this.content.fields[key].listable) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    },\n    findFieldType: function findFieldType(field) {\n      var fieldtype = '';\n      this.content.fields.forEach(function (e) {\n        fieldtype = e.name === field ? e.type : fieldtype;\n      });\n      return fieldtype;\n    },\n    formatDate: function formatDate(epoch) {\n      if (!epoch) return; // if no time return nothing            \n\n      return moment(epoch).format('MM/DD/YY | hh:mm');\n    },\n    addContent: function addContent(content) {\n      var _this2 = this;\n\n      if (this.content.slug) {\n        content.slug = this.slugify(content[this.content.slug]);\n      }\n\n      this.$firebaseRefs.contents.child(this.$route.params.key + '/data').push(content).then(function () {\n        _this2.showNotification('success', 'Content added successfully');\n      });\n    },\n    deleteContent: function deleteContent(content) {\n      // delete content form firebase\n      this.header = 'Are you sure you want to delete this content?';\n      this.kind = 'deleteContent';\n      this.showModal = true;\n      this.selContent = content;\n    },\n    bulkDelete: function bulkDelete() {\n      if (this.selectedContent.length) {\n        this.header = 'Are you sure you want to delete selected contents?';\n        this.kind = 'bulkDeleteSelected';\n        this.showModal = true;\n      }\n    },\n    confirmDeleteContent: function confirmDeleteContent() {\n      var _this3 = this;\n\n      this.$firebaseRefs.contents.child(this.$route.params.key + '/data').child(this.selContent['.key']).remove().then(function () {\n        _this3.showNotification('success', 'Content deleted successfully');\n\n        _this3.showModal = false;\n        _this3.selContent = '';\n      });\n    },\n    updateContent: function updateContent(content) {\n      var _this4 = this;\n\n      // create a copy of the item\n      var tempCon = _objectSpread({}, content);\n\n      if (this.content.slug) {\n        tempCon.slug = this.slugify(tempCon[this.content.slug]);\n      } // remove the .key attribute\n\n\n      delete tempCon['.key'];\n      this.$firebaseRefs.contents.child(this.$route.params.key + '/data').child(content['.key']).set(tempCon).then(function () {\n        if (content.state === 'saved') {\n          _this4.showNotification('success', 'Content updated successfully');\n        }\n\n        if (content.state === 'published') {\n          _this4.showNotification('success', 'Content updated and published successfully');\n        }\n      });\n    },\n    slugify: function slugify(str) {\n      if (!_.isString(str)) return '';\n      str = str.toLowerCase();\n      str = str.split(/ /).join('-');\n      str = str.split(/\\t/).join('--');\n      str = str.split(/[|$&`~=\\\\/@+*!?({[\\]})<>=.,;:'\"^]/).join('');\n      return str;\n    }\n  },\n  components: {\n    modal: modal,\n    dropdown: dropdown,\n    checkbox: checkbox\n  }\n};",{"version":3,"sources":["Contents.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"container posts\" id=\"posts\" v-if=\"loaded\">\n\n    <!-- Page title -->\n    <div class=\"content-heading is-flex\">\n      <h3 class=\"is-size-3\">{{ content.name }}</h3>\n      <router-link :to=\"'/admin/content/' + $route.params.key + '/new'\" class=\"button is-info\">Add New</router-link>\n    </div>\n\n    <!-- notification -->\n    <transition mode=\"out-in\" name=\"fade\">\n      <div v-if=\"notification.message\" :class=\"'notification is-' + notification.type\">\n        <button class=\"delete\" @click=\"hideNotifications\"></button>{{notification.message}}\n      </div>\n    </transition>\n\n    <!-- modal for post delete -->\n    <transition mode=\"out-in\" name=\"fade\">\n      <modal @close=\"showModal = false\" :kind=\"kind\" @confirmDeleteContent='confirmDeleteContent()' @selectBulkActions='selectBulkActions()' v-if=\"showModal\" :header=\"header\" />\n    </transition>\n\n    <!-- New content form loaded via router -->\n    <router-view :add-content=\"addContent\" :fields=\"content.fields\" :update-content=\"updateContent\" :contents=\"contentData\" :key=\"$route.name + ($route.params.key || '')\"></router-view>\n\n    <!-- Search contents -->\n    <div class=\"field is-grouped\">\n      <p class=\"control is-expanded\">\n        <input class=\"input\" type=\"text\" :placeholder=\"'Find ' + content.name + '...'\"> <!--  v-model=\"searchPost\" -->\n      </p>\n      <p class=\"control\">\n        <a class=\"button is-info\">\n          Search\n        </a>\n      </p>\n    </div>\n\n    <!-- States -->\n    <div class=\"filters\">\n      <div class=\"states\">\n        <a class=\"state\" @click=\"selectedState = 'all'\" :class=\"{ 'activeState': selectedState === 'all' }\">\n          All<span class=\"stateCnt\">({{ allContents }})</span>\n        </a>|\n        <a class=\"state\" @click=\"selectedState = 'published'\" :class=\"{ 'activeState': selectedState === 'published' }\">\n          Published<span class=\"stateCnt\">({{ publishedContent.length}})</span>\n        </a>|\n        <a class=\"state\" @click=\"selectedState = 'saved'\" :class=\"{ 'activeState': selectedState === 'saved' }\">\n          Saved<span class=\"stateCnt\">({{ savedContent.length}})</span>\n        </a>\n      </div>\n      <!-- Dropdown filters -->\n      <div>\n        <!-- Categories\n        <dropdown :options=\"postsList\" :selectedElement=\"params.category\" />-->\n        <!-- Bulk actions -->\n        <dropdown :options=\"bulkActions\" :selectedElement=\"params.bulkAction\" @selectBulkActions=\"selectBulkActions()\" @bulkDelete=\"bulkDelete()\" />\n      </div>\n    </div>\n\n    <!-- Contents list -->\n    <div class=\"box\">\n      <table class=\"table is-fullwidth is-striped\">\n        <thead>\n          <tr>\n            <th>\n              Created\n              <span class=\"icon\">\n                <i :class=\"{ 'fa fa-sort-down': !sortOptions.created.reverse, 'fa fa-sort-up': sortOptions.created.reverse }\"></i>\n              </span>\n            </th>\n            <th v-for=\"(field, fieldKey) in content.fields\" :key=\"fieldKey\" v-if=\"findField(field.name)\">\n              {{ field.name }}\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"(contentInstance, index) in filteredContent\" :key=\"index\">\n            <td class=\"post-title-cell\">\n              <checkbox v-model=\"contentInstance.selected\" />\n              {{ formatDate(contentInstance.created) }}\n              <div class=\"actions\">\n                <router-link :to=\"'/admin/content/' + $route.params.key + '/edit/' + contentInstance['.key']\">\n                  <span class=\"has-text-info\">Edit</span>\n                </router-link>\n                <span @click=\"deleteContent(contentInstance)\" class=\"has-text-danger\">Delete</span>\n              </div>\n            </td>\n            <td class=\"post-title-cell\" v-for=\"(field, fieldKey) in contentFields\" :key=\"fieldKey\" v-if=\"findField(field.name)\">\n              <!-- formatting how each field type is displayed -->\n              <figure class=\"websiteLogo\" v-if=\"findFieldType(field.name) === 'image'\">\n                <img :src=\"filteredContent[index][field.name]\" alt=\"logo\" style=\"max-height: 80px;\">\n              </figure>\n              <span v-else-if=\"findFieldType(field.name) === 'textbox' \">{{ filteredContent[index][field.name] }}</span>\n              <span v-else-if=\"findFieldType(field.name) === 'boolean'\" class=\"tag is-info pointer\">{{ filteredContent[index][field.name] }}</span>\n              <a v-else-if=\"findFieldType(field.name) === 'url'\" :href=\"filteredContent[index][field.name].link\">{{ filteredContent[index][field.name].name }}</a>\n              <span v-else-if=\"findFieldType(field.name) === 'tags'\" v-for=\"tag in filteredContent[index][field.name]\" class=\"tag is-info pointer\">{{ tag }}</span>\n              <span v-else-if=\"findFieldType(field.name) === 'select' && field.name !== 'category'\" class=\"tag is-primary\" > {{ filteredContent[index][field.name].selected }}</span>\n              <span v-else-if=\"findFieldType(field.name) === 'select' && field.name === 'category'\" class=\"tags\" >\n                <span class=\"tag is-primary\" v-for=\"(option, index) in filteredContent[index][field.name].options\" :key=\"index\"> {{option}}</span>\n              </span>\n              <input v-else-if=\"findFieldType(field.name) === 'integer'\" type=\"number\" :value=\"filteredContent[index][field.name]\" class=\"input\" readonly/>\n              <p v-else>{{ field }}</p>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</template>\n\n<script>\nimport moment from 'moment'\nimport { contentsRef, db } from '@/admin/firebase_config'\nimport notifier from '@/admin/mixins/notifier'\nimport modal from '@/admin/components/shared/Modal'\nimport dropdown from '@/admin/components/shared/Dropdown'\nimport checkbox from '@/admin/components/shared/Checkbox'\nimport contentFilters from '@/admin/mixins/contentFilters'\nimport _ from 'lodash'\n\nexport default {\n  name: 'contents',\n  data () {\n    return {\n      content: null,\n      // contentData: [],\n      selContent: null,\n      showModal: false,\n      header: '',\n      kind: '',\n      sortKey: 'tittle',\n      loaded: false,\n    }\n  },\n  firebase: {\n    contents: contentsRef\n  },\n  mixins: [notifier, contentFilters],\n  created () {\n    contentsRef.once('value',snapshot => {\n      this.content = Object.assign(\n        {},\n        (this.contents.filter((content) => {\n          return (content['.key'] === this.$route.params.key)\n        }))[0]\n      )\n    })\n    \n    this.$bindAsArray('contentData', db.ref('contents/' + this.$route.params.key + '/data'))\n\n    this.loaded = true\n  },\n  computed: {\n    allContents () {\n      return this.contentData.length\n    },\n    savedContent () {\n      return this.contentData\n        .filter(content => {\n          if (content.state === 'saved') {\n            return true\n          }\n        })\n    },\n    publishedContent () {\n      return this.contentData\n        .filter(content => {\n          if (content.state === 'published') {\n            return true\n          }\n        })\n    },\n    contentFields () {  //must order by content.fields since data in each instance of content.data is ordered by alphabet and not by field order set for that content type\n      return this.content.fields\n    }\n  },\n  methods: {\n    findField (field) {\n      for (var key in this.content.fields) {\n        if (this.content.fields[key].name.toLowerCase() === field.toLowerCase()) {\n          if (this.content.fields[key].listable) {\n            return true\n          }\n        }\n      }\n      return false\n    },\n    findFieldType (field) {\n      let fieldtype = ''\n      this.content.fields.forEach(e => {\n        fieldtype = e.name === field ? e.type : fieldtype\n      })\n      return fieldtype\n    },\n    formatDate (epoch) {  \n      if (!epoch) return // if no time return nothing            \n      return moment(epoch).format('MM/DD/YY | hh:mm')\n    },\n    addContent (content) {\n      if (this.content.slug) {\n        content.slug = this.slugify(content[this.content.slug])\n      }\n\n      this.$firebaseRefs.contents.child(this.$route.params.key + '/data')\n        .push(content)\n        .then(() => {\n          this.showNotification('success', 'Content added successfully')\n        })\n    },\n    deleteContent (content) {\n      // delete content form firebase\n      this.header = 'Are you sure you want to delete this content?'\n      this.kind = 'deleteContent'\n      this.showModal = true\n      this.selContent = content\n    },\n    bulkDelete () {\n      if (this.selectedContent.length) {\n        this.header = 'Are you sure you want to delete selected contents?'\n        this.kind = 'bulkDeleteSelected'\n        this.showModal = true\n      }\n    },\n    confirmDeleteContent () {\n      this.$firebaseRefs.contents.child(this.$route.params.key + '/data').child(this.selContent['.key']).remove()\n        .then(() => {\n          this.showNotification('success', 'Content deleted successfully')\n          this.showModal = false\n          this.selContent = ''\n        })\n    },\n    updateContent (content) {\n      // create a copy of the item\n      let tempCon = { ...content }\n      if (this.content.slug) {\n        tempCon.slug = this.slugify(tempCon[this.content.slug])\n      }\n      // remove the .key attribute\n      delete tempCon['.key']\n      this.$firebaseRefs.contents.child(this.$route.params.key + '/data').child(content['.key']).set(tempCon)\n        .then(() => {\n          if (content.state === 'saved') {\n            this.showNotification('success', 'Content updated successfully')\n          }\n          if (content.state === 'published') {\n            this.showNotification('success', 'Content updated and published successfully')\n          }\n        })\n    },\n    slugify (str) {\n      if (!_.isString(str)) return ''\n      str = str.toLowerCase()\n      str = str.split(/ /).join('-')\n      str = str.split(/\\t/).join('--')\n      str = str.split(/[|$&`~=\\\\/@+*!?({[\\]})<>=.,;:'\"^]/).join('')\n      return str\n    }\n  },\n  components: {\n    modal,\n    dropdown,\n    checkbox\n  }\n}\n\n</script>\n\n<style lang=\"scss\">\n#posts {\n  .post-title-cell {\n    width: 30%;\n  }\n  .post-category-cell {\n    width: 20%;\n  }\n  .post-author-cell {\n    width: 20%;\n  }\n  .post-tags-cell {\n    width: 20%;\n  }\n}\nth {\n  cursor: pointer;\n}\n.icon-centered {\n  display: block !important;\n  width: 100% !important;\n  text-align: center !important;\n}\n.filters {\n  padding-bottom: 5px;\n  padding-top: 15px;\n}\n.states {\n  padding-bottom: 5px;\n  padding-left: 5px;\n}\n.stateCnt {\n  color: rgb(122, 121, 121);\n  font-size: 14px;\n  padding-left: 3px;\n}\n.state {\n  padding-left: 4px;\n  padding-right: 5px;\n}\n.activeState {\n  color: rgb(0, 0, 0) !important;\n}\n</style>\n"],"sourceRoot":"src/admin/pages/content/contents"}]}