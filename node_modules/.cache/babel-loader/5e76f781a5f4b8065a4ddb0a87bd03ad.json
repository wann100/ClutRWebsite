{"remainingRequest":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/babel-loader/lib/index.js!/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kognos/Documents/GitHub/ClutRWebsite/src/admin/pages/settings/Settings.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/src/admin/pages/settings/Settings.vue","mtime":1565751160000},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/babel-loader/lib/index.js","mtime":1558705227210},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/vue-loader/lib/index.js","mtime":1565232945777}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.object.values\";\nimport \"core-js/modules/es6.array.find\";\nimport _defineProperty from \"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.map\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport firebase from 'firebase/app';\nimport 'firebase/storage';\nimport { mediaRef, settingsRef } from '@/admin/firebase_config';\nimport notifier from '@/admin/mixins/notifier';\nimport modal from '@/admin/components/shared/Modal';\nimport NavBuilder from \"./NavBuilder\";\nimport imageLoader from '@/admin/mixins/image-loader';\nexport default {\n  name: 'settings',\n  data: function data() {\n    return {\n      updatesCounter: 0,\n      // this array contains settings form fields\n      fields: [{\n        label: 'Site Title',\n        name: 'title',\n        value: ''\n      }, {\n        label: 'Site Description',\n        name: 'description',\n        value: ''\n      }],\n      showModal: false,\n      header: '',\n      kind: '',\n      deleteKey: '',\n      websiteLogo: ''\n    };\n  },\n  firebase: {\n    // load settings as an object instead of array (default)\n    settings: {\n      source: settingsRef,\n      asObject: true\n    },\n    media: mediaRef\n  },\n  mixins: [notifier, imageLoader],\n  methods: {\n    saveSettings: function saveSettings() {\n      var _this = this;\n\n      delete this.settings['.key']; // This is a bit weird but no problem\n\n      this.$firebaseRefs.settings.update(this.settings).then(function () {\n        _this.showNotification('success', 'Settings Successfully saved');\n      });\n    },\n    // display the loaded settings\n    displaySettings: function displaySettings() {\n      var _this2 = this;\n\n      var _loop = function _loop(key) {\n        _this2.fields.map(function (field) {\n          if (field.name === key) {\n            field.value = _this2.settings[key];\n            return _this2.settings[key];\n          }\n        });\n      };\n\n      for (var key in this.settings) {\n        _loop(key);\n      }\n    },\n    addSettingField: function addSettingField() {\n      this.header = 'Name for a new setting: ';\n      this.kind = 'addSetting';\n      this.showModal = true;\n    },\n    confirmAddSetting: function confirmAddSetting(value) {\n      var _this3 = this;\n\n      if (value === '') {\n        this.showNotification('danger', 'Please input the name of the setting first');\n        return;\n      }\n\n      if (this.settings.hasOwnProperty(value)) {\n        this.showNotification('danger', 'This setting already exist');\n        return;\n      }\n\n      this.$firebaseRefs.settings.update(_defineProperty({}, value, '')).then(function () {\n        _this3.showNotification('success', 'Setting Successfully added');\n\n        _this3.showModal = false;\n      }).catch(function () {\n        _this3.showNotification('error', 'Setting not added');\n      });\n    },\n    deleteSettingsField: function deleteSettingsField(key) {\n      this.header = 'Are you sure you want to delete this setting?';\n      this.kind = 'deleteSetting';\n      this.showModal = true;\n      this.deleteKey = key;\n    },\n    confirmDeleteSetting: function confirmDeleteSetting() {\n      var _this4 = this;\n\n      this.$firebaseRefs.settings.child(this.deleteKey).remove().then(function () {\n        _this4.showNotification('success', 'Setting successfully removed');\n\n        _this4.showModal = false;\n        _this4.deleteKey = '';\n        _this4.kind = '';\n      }).catch(function (e) {\n        _this4.showNotification('error', 'Setting not removed');\n      });\n    },\n    uploadWebsiteLogo: function uploadWebsiteLogo(e) {\n      var _this5 = this;\n\n      var file = e.target.files[0];\n      var storageRef = firebase.storage().ref('images/' + file.name);\n      var i = this.media.length;\n      var currentLogo = null;\n\n      while (i--) {\n        if (this.media[i].name === 'WebsiteLogo') {\n          currentLogo = this.media[i];\n          break;\n        }\n      }\n\n      storageRef.put(file).then(function (snapshot) {\n        snapshot.ref.getDownloadURL().then(function (downloadURL) {\n          _this5.websiteLogo = downloadURL;\n          var logo = {\n            src: downloadURL,\n            path: snapshot.ref.fullPath,\n            name: 'WebsiteLogo' // let tempLogo = {...currentLogo}\n            // making sure that the image is uploaded into the media object and is registered  regerdless if it remains a logo or not so it can be used nonetheless\n\n          };\n\n          if (Object.values(_this5.media).find(function (e) {\n            return e.path === snapshot.ref.fullPath;\n          })) {} else {\n            _this5.$firebaseRefs.media.push({\n              src: downloadURL,\n              path: snapshot.ref.fullPath,\n              name: snapshot.metadata.name\n            });\n          } // the uploaded image either overrides the current logo or is set in a new media object as such\n\n\n          if (currentLogo) {\n            // delete tempLogo[key]\n            _this5.$firebaseRefs.media.child(currentLogo['.key']).set(logo).then(function () {\n              _this5.showNotification('success', 'Logo uploaded successfully');\n            });\n          } else {\n            _this5.$firebaseRefs.media.push({\n              src: downloadURL,\n              path: snapshot.ref.fullPath,\n              name: 'WebsiteLogo'\n            }).then(function () {\n              _this5.showNotification('success', 'Logo uploaded successfully');\n            });\n          }\n        });\n      });\n    }\n  },\n  updated: function updated() {\n    // run the loaded settings once\n    if (this.updatesCounter === 0) {\n      this.displaySettings();\n    }\n\n    this.updatesCounter++;\n  },\n  components: {\n    modal: modal,\n    NavBuilder: NavBuilder\n  }\n};",{"version":3,"sources":["Settings.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"container settings\" id=\"settings\">\n\n    <!-- notification -->\n    <transition mode=\"out-in\" name=\"fade\">\n      <div v-if=\"notification.message\" :class=\"'notification is-' + notification.type\">\n        <button class=\"delete\" @click=\"hideNotifications\"></button>{{notification.message}}\n      </div>\n    </transition>\n    <!-- modal for add setting -->\n    <transition mode=\"out-in\" name=\"fade\">\n      <modal @close=\"showModal = false\" :kind=\"kind\" @addSetting='confirmAddSetting' @confirmDeleteSetting=\"confirmDeleteSetting()\" v-if=\"showModal\" :header=\"header\" />\n    </transition>\n\n    <h2>General settings</h2>\n    <div class=\"box\">\n      <div class=\"columns\">\n\n        <div class=\"column is-one-third\">\n          <div class=\"field columns\">\n            <div class=\"control column is-two-thirds\">\n              <div class=\"field\">\n                <label class=\"label\">Website logo</label>\n                <div class=\"control\">\n                  <img :src=\"websiteLogo\">\n                  <div class=\"file\">\n                    <label class=\"file-label\">\n                      <input @change=\"uploadWebsiteLogo\" class=\"file-input\" type=\"file\" name=\"resume\">\n                      <span class=\"file-cta\">\n                        <span class=\"file-icon\">\n                          <i class=\"fa fa-upload\"></i>\n                        </span>\n                        <span class=\"file-label\">\n                          Choose a file…\n                        </span>\n                      </span>\n                    </label>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"column is-multiline\">\n          <div v-for=\"(field, key) in settings\" class=\"field columns\" :key=\"key\" v-if=\"key !== '.key'\">\n            <div class=\"column is-one-third\">\n              <span class=\"tag\">\n                {{key}}\n                <button class=\"delete is-small\" @click=\"deleteSettingsField(key)\"></button>\n              </span>\n            </div>\n\n            <div class=\"control column is-two-thirds\">\n              <input type=\"text\" class=\"input\" :name=\"field\" :placeholder=\"field\" v-model=\"settings[key]\">\n            </div>\n          </div>\n          <!-- Main container -->\n          <nav class=\"level\">\n            <!-- Left side -->\n            <div class=\"level-left\">\n              <!--<div class=\"level-item\"></div>-->\n            </div>\n            <!-- Right side -->\n            <div class=\"level-right\">\n              <div class=\"level-item\">\n                <button type=\"button\" class=\"button is-pulled-right\" @click=\"addSettingField\">\n                  Add Settings field\n                </button>\n              </div>\n              <div class=\"level-item\">\n                <button type=\"button\" class=\"button is-info is-pulled-right\" @click=\"saveSettings\">\n                  Save Settings\n                </button>\n              </div>\n            </div>\n          </nav>\n        </div>\n      </div>\n    </div>\n\n    <!-- nav builder -->\n    <nav-builder></nav-builder>\n  </div>\n</template>\n\n<script>\nimport firebase from 'firebase/app'\nimport 'firebase/storage'\nimport { mediaRef, settingsRef } from '@/admin/firebase_config'\nimport notifier from '@/admin/mixins/notifier'\nimport modal from '@/admin/components/shared/Modal'\nimport NavBuilder from './NavBuilder'\nimport imageLoader from '@/admin/mixins/image-loader'\nexport default {\n  name: 'settings',\n  data () {\n    return {\n      updatesCounter: 0,\n      // this array contains settings form fields\n      fields: [\n        {\n          label: 'Site Title',\n          name: 'title',\n          value: ''\n        },\n        {\n          label: 'Site Description',\n          name: 'description',\n          value: ''\n        }\n      ],\n      showModal: false,\n      header: '',\n      kind: '',\n      deleteKey: '',\n      websiteLogo: ''\n    }\n  },\n  firebase: {\n    // load settings as an object instead of array (default)\n    settings: {\n      source: settingsRef,\n      asObject: true\n    },\n    media: mediaRef\n  },\n  mixins: [notifier, imageLoader],\n  methods: {\n    saveSettings () {\n      delete this.settings['.key'] // This is a bit weird but no problem\n      this.$firebaseRefs.settings.update(this.settings).then(() => {\n        this.showNotification('success', 'Settings Successfully saved')\n      })\n    },\n    // display the loaded settings\n    displaySettings () {\n      for (let key in this.settings) {\n        this.fields.map((field) => {\n          if (field.name === key) {\n            field.value = this.settings[key]\n            return this.settings[key]\n          }\n        })\n      }\n    },\n    addSettingField () {\n      this.header = 'Name for a new setting: '\n      this.kind = 'addSetting'\n      this.showModal = true\n    },\n    confirmAddSetting (value) {\n      if (value === '') {\n        this.showNotification('danger', 'Please input the name of the setting first')\n        return\n      }\n      if (this.settings.hasOwnProperty(value)) {\n        this.showNotification('danger', 'This setting already exist')\n        return\n      }\n\n      this.$firebaseRefs.settings.update({\n        [value]: ''\n      }).then(() => {\n        this.showNotification('success', 'Setting Successfully added')\n        this.showModal = false\n      }).catch(() => {\n        this.showNotification('error', 'Setting not added')\n      })\n    },\n    deleteSettingsField (key) {\n      this.header = 'Are you sure you want to delete this setting?'\n      this.kind = 'deleteSetting'\n      this.showModal = true\n      this.deleteKey = key\n    },\n    confirmDeleteSetting () {\n      this.$firebaseRefs.settings\n        .child(this.deleteKey)\n        .remove()\n        .then(() => {\n          this.showNotification('success', 'Setting successfully removed')\n          this.showModal = false\n          this.deleteKey = ''\n          this.kind = ''\n        })\n        .catch((e) => {\n          this.showNotification('error', 'Setting not removed')\n        })\n    },\n    uploadWebsiteLogo (e) {\n      let file = e.target.files[0]\n      let storageRef = firebase.storage().ref('images/' + file.name)\n\n      var i = this.media.length\n      var currentLogo = null\n      while (i--) {\n        if (this.media[i].name === 'WebsiteLogo') {\n          currentLogo = this.media[i]\n          break\n        }\n      }\n      storageRef.put(file).then((snapshot) => {\n        snapshot.ref.getDownloadURL().then(downloadURL => {\n          this.websiteLogo = downloadURL\n\n          var logo = {\n            src: downloadURL,\n            path: snapshot.ref.fullPath,\n            name: 'WebsiteLogo'\n          }\n          // let tempLogo = {...currentLogo}\n          // making sure that the image is uploaded into the media object and is registered  regerdless if it remains a logo or not so it can be used nonetheless\n          if (Object.values(this.media).find(e => e.path === snapshot.ref.fullPath)) {\n          } else {\n            this.$firebaseRefs.media.push({\n              src: downloadURL,\n              path: snapshot.ref.fullPath,\n              name: snapshot.metadata.name\n            })\n          }\n          // the uploaded image either overrides the current logo or is set in a new media object as such\n          if (currentLogo) {\n          // delete tempLogo[key]\n            this.$firebaseRefs.media.child(currentLogo['.key']).set(logo)\n              .then(() => {\n                this.showNotification('success', 'Logo uploaded successfully')\n              })\n          } else {\n            this.$firebaseRefs.media.push({\n              src: downloadURL,\n              path: snapshot.ref.fullPath,\n              name: 'WebsiteLogo'\n            }).then(() => {\n              this.showNotification('success', 'Logo uploaded successfully')\n            })\n          }\n        })\n      })\n    }\n  },\n  updated () {\n    // run the loaded settings once\n    if (this.updatesCounter === 0) {\n      this.displaySettings()\n    }\n    this.updatesCounter++\n  },\n  components: {\n    modal,\n    NavBuilder\n  }\n}\n\n</script>\n"],"sourceRoot":"src/admin/pages/settings"}]}