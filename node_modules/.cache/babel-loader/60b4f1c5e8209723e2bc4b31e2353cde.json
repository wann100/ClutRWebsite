{"remainingRequest":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/babel-loader/lib/index.js!/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kognos/Documents/GitHub/ClutRWebsite/src/admin/pages/Routing.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/src/admin/pages/Routing.vue","mtime":1565240946488},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/babel-loader/lib/index.js","mtime":1558705227210},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/vue-loader/lib/index.js","mtime":1565232945777}],"contextDependencies":[],"result":["import _objectSpread from \"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.string.trim\";\nimport \"core-js/modules/es6.array.filter\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.map\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { contentsRef, routesRef } from '@/admin/firebase_config';\nimport notifier from '@/admin/mixins/notifier';\nimport templates from '@/app/templates/templates.json';\nexport default {\n  data: function data() {\n    return {\n      form: {\n        path: '/',\n        template: templates[0].filename,\n        contentType: 'none',\n        content: 'none',\n        action: 'add',\n        key: ''\n      },\n      defaultRoutes: ['/', '/admin', '/login'],\n      templates: templates\n    };\n  },\n  firebase: {\n    contents: contentsRef,\n    routes: routesRef\n  },\n  computed: {\n    contentTypes: function contentTypes() {\n      return this.contents.map(function (content) {\n        return content.name;\n      });\n    },\n    selectedContents: function selectedContents() {\n      return this.getContentsByType(this.form.contentType);\n    }\n  },\n  mixins: [notifier],\n  methods: {\n    selectContentByTypeAndId: function selectContentByTypeAndId(type, id) {\n      var contentsByType = this.getContentsByType(type);\n      return contentsByType.filter(function (content) {\n        return content['.key'] === id;\n      })[0] || {};\n    },\n    addRoute: function addRoute() {\n      var _this = this;\n\n      if (this.isPathAvailable(this.form.path)) {\n        this.$firebaseRefs.routes.push({\n          path: this.form.path.trim(),\n          template: this.form.template,\n          contentType: this.form.contentType,\n          content: this.form.content\n        }).then(function (res) {\n          var template = _this.form.template;\n\n          _this.showNotification('success', 'Route added successfully');\n\n          _this.$router.addRoutes([{\n            path: _this.form.path,\n            component: function component() {\n              return import(\"@/app/templates/\".concat(template, \".vue\"));\n            }\n          }]);\n\n          _this.clear();\n        }).catch(function (err) {\n          console.log(err);\n        });\n      } else {\n        this.showNotification('danger', 'A route with the same path already exists');\n      }\n    },\n    editRoute: function editRoute(route) {\n      this.form.content = route.content;\n      this.form.template = route.template;\n      this.form.contentType = route.contentType;\n      this.form.path = route.path;\n      this.form.action = 'update';\n      this.form.key = route['.key'];\n    },\n    updateRoute: function updateRoute() {\n      var _this2 = this;\n\n      this.$firebaseRefs.routes.child(this.form.key).set({\n        content: this.form.content,\n        path: this.form.path.trim(),\n        template: this.form.template,\n        contentType: this.form.contentType\n      }).then(function () {\n        var template = _this2.form.template;\n\n        _this2.showNotification('success', 'Route Updated successfully');\n\n        _this2.$router.addRoutes([{\n          path: _this2.form.path,\n          component: function component() {\n            return import(\"@/app/templates/\".concat(template, \".vue\"));\n          }\n        }]);\n\n        _this2.clear();\n      });\n    },\n    deleteRoute: function deleteRoute(key) {\n      var _this3 = this;\n\n      this.$firebaseRefs.routes.child(key).remove().then(function () {\n        _this3.showNotification('success', 'Route deleted successfully');\n      });\n    },\n    clear: function clear() {\n      this.form.key = '';\n      this.form.path = '/';\n      this.form.content = '';\n      this.form.template = templates[0].filename;\n      this.form.action = 'add';\n    },\n    isPathAvailable: function isPathAvailable(path) {\n      var existingPaths = this.routes.map(function (route) {\n        return route.path;\n      });\n      existingPaths = existingPaths.concat(this.defaultRoutes);\n      return !existingPaths.includes(this.form.path.trim());\n    },\n    getTemplateDisplayName: function getTemplateDisplayName(filename) {\n      var displayName = '';\n      templates.forEach(function (template) {\n        displayName = template.filename === filename ? template.displayName : displayName;\n      });\n      return displayName;\n    },\n    getContentsByType: function getContentsByType(contentType) {\n      var _this4 = this;\n\n      var selectedContentsData = [];\n      var selectedContents = this.contents.filter(function (content) {\n        return content.name === contentType;\n      });\n      selectedContents.forEach(function (content) {\n        var contentDataArray = _this4.convertContentDataToArray(content.data, content.slug);\n\n        selectedContentsData = selectedContentsData.concat(contentDataArray || []);\n      });\n      return selectedContentsData;\n    },\n    convertContentDataToArray: function convertContentDataToArray(contentData, slug) {\n      var contentDataArray = [];\n\n      for (var key in contentData) {\n        contentDataArray.push(_objectSpread({}, contentData[key], {\n          slugValue: slug ? contentData[key][slug] : '',\n          '.key': key\n        }));\n      }\n\n      return contentDataArray;\n    }\n  },\n  watch: {\n    form: {\n      deep: true,\n      handler: function handler() {\n        if (this.form.contentType === 'none') {\n          this.form.content = 'none';\n        }\n      }\n    }\n  }\n};",{"version":3,"sources":["Routing.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"container\">\n\n    <!-- notification -->\n    <transition mode=\"out-in\" name=\"fade\">\n      <div v-if=\"notification.message\" :class=\"'notification is-' + notification.type\">\n        <button class=\"delete\" @click=\"hideNotifications\"></button>{{notification.message}}\n      </div>\n    </transition>\n\n    <!-- routes builder -->\n    <h2>Routes Builder</h2>\n    <div class=\"box\">\n      <div class=\"columns\">\n\n        <!-- link form -->\n        <div class=\"column\">\n\n          <div class=\"field\">\n            <label class=\"label\">Path</label>\n            <div class=\"control\">\n              <input class=\"input\" type=\"text\" v-model=\"form.path\" placeholder=\"Ex: /path\">\n            </div>\n          </div>\n\n          <div class=\"field\">\n            <label class=\"label\">Template</label>\n            <div class=\"select is-fullwidth\">\n              <select v-model=\"form.template\">\n                <option v-for=\"(template, i) in templates\" :key=\"i\" :value=\"template.filename\">\n                  {{template.displayName}}\n                </option>\n              </select>\n            </div>\n          </div>\n\n          <div class=\"field\">\n            <label class=\"label\">Content type</label>\n            <div class=\"select is-fullwidth\">\n              <select v-model=\"form.contentType\">\n                <option v-for=\"(type, i) in contentTypes\" :key=\"i\" :value=\"type\">\n                  {{type}}\n                </option>\n                <option value=\"none\">No Content Type</option>\n              </select>\n            </div>\n          </div>\n\n          <div class=\"field\">\n            <label class=\"label\">Content</label>\n            <div class=\"select is-fullwidth\">\n              <select v-model=\"form.content\">\n                <option v-for=\"(content, i) in selectedContents\" :key=\"i\" :value=\"content['.key']\">\n                  {{ content['.key'] + (content['slugValue'] ? ` (${content['slugValue']})` : '')}}\n                </option>\n                <option value=\"none\">No Content</option>\n              </select>\n            </div>\n          </div>\n\n          <!-- buttons -->\n          <div class=\"field is-grouped\">\n            <div class=\"control\">\n              <button v-if=\"form.action === 'add'\" class=\"button is-info\" @click=\"addRoute\">\n                Add\n              </button>\n              <button v-if=\"form.action === 'update'\" class=\"button is-info\" @click=\"updateRoute\">\n                Update\n              </button>\n            </div>\n            <div class=\"control\">\n              <button class=\"button\" @click=\"clear\">Cancel</button>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"column\">\n          <!-- preserved routes list -->\n          <ul>\n            <h3 class=\"is-marginless\">Preserved routes:</h3>\n            <li v-for=\"(route, i) in defaultRoutes\" :key=\"i\">\n              <router-link :to=\"route\">{{route}}</router-link>\n            </li>\n          </ul>\n          <!-- dynamic routes list -->\n          <ul>\n            <h3>Dynamic routes:</h3>\n            <li v-for=\"(route, i) in routes\" :key=\"i\">\n              <b>Path: </b>\n              <a :href=\"route.path\" target=\"_blank\">{{route.path}}</a>\n\n              <span class=\"route-actions\">\n                <span class=\"has-text-danger fa fa-trash\" @click=\"deleteRoute(route['.key'])\"></span>\n                <span class=\"has-text-info fa fa-edit\" @click=\"editRoute(route)\"></span>\n              </span>\n\n              <div class=\"route-details\">\n                <span><b>Template:</b> {{getTemplateDisplayName(route.template)}} | </span>\n                <span><b>Content:</b> {{selectContentByTypeAndId(route.contentType, route.content)['.key'] || 'No Content'}}</span>\n              </div>\n            </li>\n          </ul>\n        </div>\n\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { contentsRef, routesRef } from '@/admin/firebase_config'\nimport notifier from '@/admin/mixins/notifier'\nimport templates from '@/app/templates/templates.json'\n\nexport default {\n  data () {\n    return {\n      form: {\n        path: '/',\n        template: templates[0].filename,\n        contentType: 'none',\n        content: 'none',\n        action: 'add',\n        key: ''\n      },\n      defaultRoutes: ['/', '/admin', '/login'],\n      templates\n    }\n  },\n  firebase: {\n    contents: contentsRef,\n    routes: routesRef\n  },\n  computed: {\n    contentTypes () {\n      return this.contents.map(content => {\n        return content.name\n      })\n    },\n    selectedContents () {\n      return this.getContentsByType(this.form.contentType)\n    }\n  },\n  mixins: [notifier],\n  methods: {\n    selectContentByTypeAndId (type, id) {\n      let contentsByType = this.getContentsByType(type)\n      return contentsByType.filter(content => content['.key'] === id)[0] || {}\n    },\n    addRoute () {\n      if (this.isPathAvailable(this.form.path)) {\n        this.$firebaseRefs.routes.push({\n          path: this.form.path.trim(),\n          template: this.form.template,\n          contentType: this.form.contentType,\n          content: this.form.content\n        })\n          .then((res) => {\n            let template = this.form.template\n            this.showNotification('success', 'Route added successfully')\n            this.$router.addRoutes([{\n              path: this.form.path,\n              component: () => import(`@/app/templates/${template}.vue`)\n            }])\n            this.clear()\n          })\n          .catch(err => {\n            console.log(err)\n          })\n      } else {\n        this.showNotification('danger', 'A route with the same path already exists')\n      }\n    },\n    editRoute (route) {\n      this.form.content = route.content\n      this.form.template = route.template\n      this.form.contentType = route.contentType\n      this.form.path = route.path\n      this.form.action = 'update'\n      this.form.key = route['.key']\n    },\n    updateRoute () {\n      this.$firebaseRefs.routes.child(this.form.key).set({\n        content: this.form.content,\n        path: this.form.path.trim(),\n        template: this.form.template,\n        contentType: this.form.contentType\n      })\n        .then(() => {\n          let template = this.form.template\n          this.showNotification('success', 'Route Updated successfully')\n          this.$router.addRoutes([{\n            path: this.form.path,\n            component: () => import(`@/app/templates/${template}.vue`)\n          }])\n          this.clear()\n        })\n    },\n    deleteRoute (key) {\n      this.$firebaseRefs.routes.child(key).remove()\n        .then(() => {\n          this.showNotification('success', 'Route deleted successfully')\n        })\n    },\n    clear () {\n      this.form.key = ''\n      this.form.path = '/'\n      this.form.content = ''\n      this.form.template = templates[0].filename\n      this.form.action = 'add'\n    },\n    isPathAvailable (path) {\n      let existingPaths = this.routes.map(route => {\n        return route.path\n      })\n      existingPaths = existingPaths.concat(this.defaultRoutes)\n      return !existingPaths.includes(this.form.path.trim())\n    },\n    getTemplateDisplayName (filename) {\n      let displayName = ''\n      templates.forEach(template => {\n        displayName = template.filename === filename ? template.displayName : displayName\n      })\n      return displayName\n    },\n    getContentsByType (contentType) {\n      let selectedContentsData = []\n      let selectedContents = this.contents.filter(content => {\n        return content.name === contentType\n      })\n      selectedContents.forEach(content => {\n        let contentDataArray = this.convertContentDataToArray(content.data, content.slug)\n        selectedContentsData = selectedContentsData.concat(contentDataArray || [])\n      })\n      return selectedContentsData\n    },\n    convertContentDataToArray (contentData, slug) {\n      let contentDataArray = []\n      for (let key in contentData) {\n        contentDataArray.push({\n          ...contentData[key],\n          slugValue: slug ? contentData[key][slug] : '',\n          '.key': key\n        })\n      }\n      return contentDataArray\n    }\n  },\n  watch: {\n    form: {\n      deep: true,\n      handler () {\n        if (this.form.contentType === 'none') {\n          this.form.content = 'none'\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.route-actions {\n  padding-left: 10px;\n  display: none;\n  span {\n    cursor: pointer;\n    padding-right: 5px;\n  }\n}\n\nli:hover .route-actions {\n  display: inline;\n}\n\n.route-details {\n  padding-left: 20px;\n  margin-bottom: 10px;\n}\n</style>\n"],"sourceRoot":"src/admin/pages"}]}