{"remainingRequest":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/babel-loader/lib/index.js!/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kognos/Documents/GitHub/ClutRWebsite/src/admin/pages/Users.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/src/admin/pages/Users.vue","mtime":1565359774898},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/babel-loader/lib/index.js","mtime":1558705227210},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/vue-loader/lib/index.js","mtime":1565232945777}],"contextDependencies":[],"result":["import \"core-js/modules/es6.date.now\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.map\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport firebase from \"firebase/app\";\nimport \"firebase/storage\";\nimport { demoData } from \"@/../tamiat.config.json\";\nimport { updateUserDetails, userDetailsFetch } from \"@/../actions\";\nimport notifier from \"@/admin/mixins/notifier\";\nimport { settingsRef, mediaRef, navRef, contentsRef, fieldsRef, routesRef, usersRef } from \"@/admin/firebase_config\";\nimport _ from \"lodash\";\nexport default {\n  data: function data() {\n    return {\n      users: null,\n      currentUser: firebase.auth().currentUser\n    };\n  },\n  firebase: {\n    settings: settingsRef,\n    media: mediaRef,\n    nav: navRef,\n    fields: fieldsRef,\n    contents: contentsRef,\n    routes: routesRef\n  },\n  mixins: [notifier],\n  methods: {\n    getusers: function getusers() {\n      this.users = userDetailsFetch(); // console.log(this.users);\n\n      if (this.users != null) {\n        this.showNotification('success', 'Users Dowloaded');\n      }\n    },\n    updateUser: function updateUser() {},\n    addDemoContentsData: function addDemoContentsData() {\n      var _this = this;\n\n      var storageRef = firebase.storage().ref();\n      Object.keys(this.demoContentsData).map(function (key) {\n        var hashKey = _.find(_this.contents, {\n          name: key\n        })[\".key\"];\n\n        _this.demoContentsData[key].map(function (content) {\n          var imageName = content.title ? \"tamiat-\".concat(content.title, \".png\") : \"tamiat-\".concat(content.author, \".png\");\n          var ImageRef = storageRef.child(\"images/\" + imageName);\n          var imgDownloadURL = \"\"; //if condition prevents the function from uploading an empty file when demo content does not have img property(Post, News...) Othervise it will upload a text/html file instead of an image since the promise returned undefined and the browser will say that the image was blocked by CORB (since it is a text/html file)\n\n          if (!content.img) {\n            content.img = \"https://raw.githubusercontent.com/tamiat/tamiat/master/src/app/assets/img/coast.jpg\";\n          }\n\n          _this.fetchBlob(content.img).then(function (blob) {\n            return ImageRef.put(blob);\n          }).then(function (snapshot) {\n            return snapshot.ref.getDownloadURL();\n          }).then(function (downloadURL) {\n            imgDownloadURL = downloadURL;\n            content.created = Date.now();\n            content.img = imgDownloadURL;\n            return _this.$firebaseRefs.contents.child(hashKey + \"/data\").push(content);\n          }).then(function () {\n            return _this.$firebaseRefs.media.push({\n              name: imageName,\n              path: ImageRef.fullPath,\n              src: imgDownloadURL\n            });\n          });\n        });\n      });\n    }\n  },\n  beforeMount: function beforeMount() {\n    this.getusers();\n  }\n};",{"version":3,"sources":["Users.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"container\">\n    <!-- notification -->\n    <transition mode=\"out-in\" name=\"fade\">\n      <div v-if=\"notification.message\" :class=\"'notification is-' + notification.type\">\n        <button class=\"delete\" @click=\"hideNotifications\"></button>\n        {{notification.message}}\n      </div>\n    </transition>\n\n    <h2>Users</h2>\n    <div class=\"box\">\n      <div class=\"columns\">\n        <div class=\"column\">\n        <input class=\"searchbox\" type=\"text\" placeholder=\"Search..\">\n\n  {{ this.users }}\n    </div>\n    \n        </div>\n      </div>\n    </div>\n</template>\n\n<script>\nimport firebase from \"firebase/app\";\nimport \"firebase/storage\";\nimport { demoData } from \"@/../tamiat.config.json\";\nimport {updateUserDetails,userDetailsFetch} from \"@/../actions\"\nimport notifier from \"@/admin/mixins/notifier\";\nimport {\n  settingsRef,\n  mediaRef,\n  navRef,\n  contentsRef,\n  fieldsRef,\n  routesRef,\n  usersRef\n} from \"@/admin/firebase_config\";\nimport _ from \"lodash\";\n\nexport default {\n  data() {\n    return { \n        users:null,\n        currentUser: firebase.auth().currentUser,\n\n\n     };\n  },\n  firebase: {\n    settings: settingsRef,\n    media: mediaRef,\n    nav: navRef,\n    fields: fieldsRef,\n    contents: contentsRef,\n    routes: routesRef\n  },\n  mixins: [notifier],\n  methods: {\n\n    getusers(){\n\n        this.users = userDetailsFetch();\n       // console.log(this.users);\n        if(this.users!=null){\n            this.showNotification('success', 'Users Dowloaded')\n        }\n\n\n    },\n    updateUser(){\n\n    },\n    addDemoContentsData() {\n      let storageRef = firebase.storage().ref();\n      Object.keys(this.demoContentsData).map(key => {\n        let hashKey = _.find(this.contents, { name: key })[\".key\"];\n\n        this.demoContentsData[key].map(content => {\n          let imageName = content.title ? `tamiat-${content.title}.png` : `tamiat-${content.author}.png`;\n          let ImageRef = storageRef.child(\"images/\" + imageName);\n          let imgDownloadURL = \"\";\n          //if condition prevents the function from uploading an empty file when demo content does not have img property(Post, News...) Othervise it will upload a text/html file instead of an image since the promise returned undefined and the browser will say that the image was blocked by CORB (since it is a text/html file)\n          \n          if(!content.img){\n            content.img = \"https://raw.githubusercontent.com/tamiat/tamiat/master/src/app/assets/img/coast.jpg\"\n            }\n          this.fetchBlob(content.img)\n            .then(blob => {\n              return ImageRef.put(blob);\n            })\n            .then(snapshot => {\n              return snapshot.ref.getDownloadURL();\n            })\n            .then(downloadURL => {\n              imgDownloadURL = downloadURL;\n              content.created = Date.now();\n              content.img = imgDownloadURL;\n              return this.$firebaseRefs.contents\n                .child(hashKey + \"/data\")\n                .push(content);\n            })\n            .then(() => {\n              return this.$firebaseRefs.media.push({\n                name: imageName,\n                path: ImageRef.fullPath,\n                src: imgDownloadURL\n              });\n            });\n        });\n      });\n    },\n\n  },\n   beforeMount(){\n    this.getusers()\n },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.column > div {\n  margin-top: 15px;\n  &:first-child {\n    margin-top: 0px;\n  }\n}\n\nbutton {\n  vertical-align: middle !important;\n  margin-left: 30px;\n}\n\n.searchbox {\n    width:40%;\n    font-weight: bold;\n    border-radius: 5px\n}\n</style>\n"],"sourceRoot":"src/admin/pages"}]}