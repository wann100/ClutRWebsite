{"remainingRequest":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/thread-loader/dist/cjs.js!/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/babel-loader/lib/index.js!/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kognos/Documents/GitHub/ClutRWebsite/src/admin/pages/content/contents/ContentsEdit.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/src/admin/pages/content/contents/ContentsEdit.vue","mtime":1565240946487},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/thread-loader/dist/cjs.js","mtime":1565232945419},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/babel-loader/lib/index.js","mtime":1558705227210},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/vue-loader/lib/index.js","mtime":1565232945777}],"contextDependencies":[],"result":["import _toConsumableArray from \"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.string.trim\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.object.values\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.filter\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport firebase from 'firebase/app';\nimport 'firebase/storage';\nimport { mediaRef } from '@/admin/firebase_config';\nimport editorOptions from '@/admin/utils/editor-options';\nimport imageLoader from '@/admin/mixins/image-loader';\nimport notifier from '@/admin/mixins/notifier';\nexport default {\n  name: 'content-edit',\n  data: function data() {\n    var _this = this;\n\n    return {\n      /* Here we are filtering out the post containing the provided key in the router params\n       * we are using Object.assign to copy the post by value not by reference\n       * to prevent updating the post when typing */\n      inputData: '',\n      select: {\n        selected: '',\n        options: []\n      },\n      selectOptionsRow: '',\n      content: Object.assign({}, this.contents.filter(function (c) {\n        return c['.key'] === _this.$route.params.contentKey;\n      })[0]),\n      editorOptions: editorOptions\n    };\n  },\n  firebase: {\n    media: mediaRef\n  },\n  props: ['contents', 'update-content', 'fields'],\n  mixins: [imageLoader, notifier],\n  methods: {\n    update: function update(publish) {\n      if (publish) {\n        this.content.state = 'published';\n      }\n\n      this.updateContent(this.content);\n    },\n    uploadFeaturedImage: function uploadFeaturedImage(e) {\n      var _this2 = this;\n\n      var file = e.target.files[0];\n      var storageRef = firebase.storage().ref('images/' + file.name);\n      storageRef.put(file).then(function (snapshot) {\n        snapshot.ref.getDownloadURL().then(function (downloadURL) {\n          _this2.content.img = downloadURL;\n          if (Object.values(_this2.media).find(function (e) {\n            return e.path === snapshot.ref.fullPath;\n          })) return; // this prevents duplicate entries in the media object\n\n          _this2.$firebaseRefs.media.push({\n            src: downloadURL,\n            path: snapshot.ref.fullPath,\n            name: snapshot.metadata.name\n          });\n        });\n      });\n    },\n    styleTags: function styleTags(fieldName) {\n      var _this3 = this;\n\n      if (this.inputData !== '') {\n        if (!this.content[fieldName]) {\n          this.content[fieldName] = [];\n        }\n\n        this.inputData.split(',').forEach(function (tag) {\n          _this3.content[fieldName].push(\"\".concat(tag.trim()));\n        });\n        this.inputData = '';\n      }\n    },\n    removeTag: function removeTag(index, fieldName, isSelect) {\n      // function to remove tags and options\n      // cloning object (to make Vue reactive)\n      var currentContent = Object.assign({}, this.content);\n\n      if (isSelect) {\n        // delete element from select options\n        currentContent[fieldName].options.splice(index, 1);\n      } else {\n        // delete element from arr\n        currentContent[fieldName].splice(index, 1);\n      } // return cloned object Back\n\n\n      this.content = Object.assign({}, currentContent);\n    },\n    updateBoolContent: function updateBoolContent(fieldName) {\n      if (this.booleanName !== '') {\n        if (!this.content[fieldName]) {\n          this.content[fieldName] = '';\n        }\n\n        this.content[fieldName] = this.booleanName;\n      }\n    },\n    // function to create Select Options from input area\n    styleOptions: function styleOptions(fieldName) {\n      var _this4 = this;\n\n      if (this.selectOptionsRow !== '') {\n        if (!this.content[fieldName]) {\n          this.content[fieldName] = this.select;\n        }\n\n        this.selectOptionsRow.split(',').forEach(function (tag) {\n          _this4.select.options.push(\"\".concat(tag.trim()));\n        });\n        this.content[fieldName].options ? [].concat(_toConsumableArray(this.content[fieldName].options), _toConsumableArray(this.select.options)) : _toConsumableArray(this.select.options);\n        this.selectOptionsRow = '';\n      }\n    }\n  }\n};",{"version":3,"sources":["ContentsEdit.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"box\">\n    <div class=\"columns\">\n\n      <div class=\"column is-two-thirds\">\n\n        <!-- Textbox fields -->\n        <div class=\"field\" v-for=\"(field, index) in fields\" :key=\"index\" v-if=\"field.type === 'textbox'\">\n          <label class=\"label\">{{ field.name }}</label>\n          <div class=\"control\">\n            <input type=\"text\" class=\"input\" maxlength=\"25\" required :placeholder=\"field.name\" v-model=\"content[field.name]\">\n          </div>\n        </div>\n\n        <!-- Textarea fields -->\n        <div class=\"field\" v-for=\"(field, index) in fields\" :key=\"index\" v-if=\"field.type === 'textarea'\">\n          <label class=\"label\">{{ field.name }}</label>\n          <div class=\"control\">\n            <textarea class=\"input\" v-model=\"content[field.name]\" :placeholder=\"field.name\" v-text=\"content[field.name]\"></textarea>\n          </div>\n        </div>\n\n        <!-- Rich text fields - vue-quill-editor plugin -->\n        <div v-for=\"(field, index) in fields\" :key=\"index\" v-if=\"field.type === 'richtextbox'\">\n          <quill-editor v-model=\"content[field.name]\" :options=\"editorOptions\">\n          </quill-editor>\n          <input type=\"file\" id=\"getImage\" style=\"display: none;\" @change=\"uploadImage\">\n        </div>\n\n        <!-- Category (select) fields -->\n        <br>\n        <div class=\"field\" v-for=\"(field, index) in fields\" :key=\"index\" v-if=\"field.type === 'select'\">\n          <label class=\"label\">{{ field.name }}</label>\n          <div class=\"columns\">\n            <div class=\"column\">\n              <div class=\"select margin-select\">\n                <select v-model=\"content[field.name].selected\">\n                  <option v-for=\"(selectOption, selectIndex) in content[field.name].options\" :key=\"selectIndex\">{{ selectOption }}</option>\n                </select>\n              </div>\n            </div>\n            <div class=\"column\">\n              <!--area to delete options-->\n              <div v-for=\"(option, optionKey) in content[field.name].options\" :key=\"optionKey\" >\n                <span @click=\"removeTag(optionKey, field.name, true)\" class=\"tag is-info pointer\">{{option}}\n                <button class=\"delete is-small\"></button>\n              </span>\n              </div>\n            </div>\n          </div>\n          <!--area to enter options-->\n          <div class=\"control\">\n            <input type=\"text\" class=\"input\" :placeholder=\"field.name\" @blur=\"styleOptions(field.name)\" @keyup.enter=\"styleOptions(field.name)\" v-model=\"selectOptionsRow\" maxlength=\"25\">\n          </div>\n          <p>Separate options with commas</p>\n        </div>\n\n        <!-- Integer fields -->\n        <br>\n        <div class=\"field\" v-for=\"(field, index) in fields\" :key=\"index\" v-if=\"field.type === 'integer'\">\n          <label class=\"label\">{{ field.name }}</label>\n          <div class=\"columns\">\n            <div class=\"column is-one-third\">\n              <input type=\"number\" :placeholder=\"field.name\" class=\"input\" v-model=\"content[field.name]\">\n            </div>\n          </div>\n        </div>\n\n        <!-- Boolean fields -->\n        <br>\n        <div class=\"field\" v-for=\"(field, index) in fields\" :key=\"index\" v-if=\"field.type === 'boolean'\">\n          <label class=\"label\">{{ field.name }}</label>\n          <div class=\"columns\">\n            <div class=\"column is-one-third\">\n              <span>Name</span>\n              <input :placeholder=\"field.name + ' name'\" class=\"input\" v-model=\"content.bool\">\n            </div>\n          </div>\n          <div class=\"columns\">\n            <div class=\"column\">\n              <label class=\"checkbox\">\n                <input type=\"checkbox\">\n                {{ content.bool }}\n              </label>\n            </div>\n          </div>\n        </div>\n\n        <!-- Url fields -->\n        <br>\n        <div class=\"field\" v-for=\"(field, index) in fields\" :key=\"index\" v-if=\"field.type === 'url'\">\n          <label class=\"label\">{{ field.name }}</label>\n          <div class=\"columns\">\n            <div class=\"column is-two-fifths\">\n              <span>Name</span>\n              <input :placeholder=\"field.name + ' name'\" class=\"input\" v-model=\"content[field.name].name\">\n            </div>\n            <div class=\"column is-two-fifths\">\n              <span>Link</span>\n              <input :placeholder=\"field.name + ' link'\" class=\"input\" v-model=\"content[field.name].link\">\n            </div>\n          </div>\n          <div class=\"columns\">\n            <div class=\"column\">\n              <span>Preview: </span>\n              <a :href=\"content[field.name].link\">{{ content[field.name].name }}</a>\n            </div>\n          </div>\n        </div>\n        <!---->\n      </div>\n\n      <!-- Right sidebar -->\n      <div class=\"column is-one-third\">\n\n        <!-- Tag fields -->\n        <div class=\"field\" v-for=\"(field, index) in fields\" :key=\"index\" v-if=\"field.type === 'tags'\">\n          <label class=\"label\">{{ field.name }}</label>\n          <div class=\"control\">\n            <div class=\"tags tagscontainer\">\n              <span @click=\"removeTag(tagKey, field.name)\" v-for=\"(tag, tagKey) in content[field.name]\" :key=\"tagKey\" class=\"tag is-info pointer\">{{tag}}\n                <button class=\"delete is-small\"></button>\n              </span>\n              <input :placeholder=\"field.name\" @blur=\"styleTags(field.name)\" @keyup.enter=\"styleTags(field.name)\" type=\"text\" class=\"input\" maxlength=\"25\" v-model=\"inputData\">\n            </div>\n            <p>Separate tags with commas</p>\n          </div>\n        </div>\n\n        <!-- Image fields -->\n        <div class=\"field\" v-for=\"(field, index) in fields\" :key=\"index\" v-if=\"field.type === 'image'\">\n          <label class=\"label\">{{ field.name }}</label>\n          <div class=\"control\">\n            <img :src=\"content[field.name]\">\n            <div class=\"file\">\n              <label class=\"file-label\">\n                <input @change=\"uploadFeaturedImage($event, field.name)\" class=\"file-input\" type=\"file\" name=\"resume\">\n                <span class=\"file-cta\">\n                  <span class=\"file-icon\">\n                    <i class=\"fa fa-upload\"></i>\n                  </span>\n                  <span class=\"file-label\">\n                    Choose a file…\n                  </span>\n                </span>\n              </label>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- notification -->\n    <div v-if=\"notification.message\" :class=\"'notification is-' + notification.type\">\n      <button class=\"delete\" @click=\"hideNotifications\"></button>{{notification.message}}\n    </div>\n\n    <!-- the form buttons -->\n    <button v-if=\"content.state === 'saved'\" type=\"submit\" class=\"button is-success\" @click=\"update(true)\">Update and publish</button>\n    <button type=\"submit\" class=\"button is-info\" @click=\"update(false)\">Update</button>\n    <router-link :to=\"'/admin/content/' + $route.params.key\" class=\"button is-danger\">Cancel</router-link>\n  </div>\n</template>\n\n<script>\nimport firebase from 'firebase/app'\nimport 'firebase/storage'\n\nimport { mediaRef } from '@/admin/firebase_config'\nimport editorOptions from '@/admin/utils/editor-options'\nimport imageLoader from '@/admin/mixins/image-loader'\nimport notifier from '@/admin/mixins/notifier'\n\nexport default {\n  name: 'content-edit',\n  data () {\n    return {\n      /* Here we are filtering out the post containing the provided key in the router params\n       * we are using Object.assign to copy the post by value not by reference\n       * to prevent updating the post when typing */\n      inputData: '',\n      select: {\n        selected:'',\n        options:[]\n      },\n      selectOptionsRow: '',\n      content: Object.assign(\n        {},\n        (this.contents.filter((c) => {\n          return (c['.key'] === this.$route.params.contentKey)\n        }))[0]\n      ),\n      editorOptions\n    }\n  },\n  firebase: {\n    media: mediaRef\n  },\n  props: ['contents', 'update-content', 'fields'],\n  mixins: [imageLoader, notifier],\n  methods: {\n    update (publish) {\n      if (publish) {\n        this.content.state = 'published'\n      }\n      this.updateContent(this.content)\n    },\n    uploadFeaturedImage (e) {\n      let file = e.target.files[0]\n      let storageRef = firebase.storage().ref('images/' + file.name)\n\n      storageRef.put(file).then((snapshot) => {\n        snapshot.ref.getDownloadURL().then(downloadURL => {\n          this.content.img = downloadURL\n          if (Object.values(this.media).find(e => e.path === snapshot.ref.fullPath)) return // this prevents duplicate entries in the media object\n          this.$firebaseRefs.media.push({\n            src: downloadURL,\n            path: snapshot.ref.fullPath,\n            name: snapshot.metadata.name\n          })\n        })\n      })\n    },\n    styleTags (fieldName) {\n      if (this.inputData !== '') {\n        if (!this.content[fieldName]) {\n          this.content[fieldName] = []\n        }\n        this.inputData.split(',').forEach(tag => {\n          this.content[fieldName].push(`${tag.trim()}`)\n        })\n        this.inputData = ''\n      }\n    },\n    removeTag (index, fieldName, isSelect) {\n       // function to remove tags and options\n      // cloning object (to make Vue reactive)\n      let currentContent = Object.assign({}, this.content)\n      if(isSelect) {\n        // delete element from select options\n        currentContent[fieldName].options.splice(index, 1)\n      } else {\n        // delete element from arr\n        currentContent[fieldName].splice(index, 1)\n      }\n      // return cloned object Back\n      this.content = Object.assign({}, currentContent)\n    },\n    updateBoolContent (fieldName) {\n      if (this.booleanName !== '') {\n        if (!this.content[fieldName]) {\n          this.content[fieldName] = ''\n        }\n        this.content[fieldName] = this.booleanName\n      }\n    },\n    // function to create Select Options from input area\n    styleOptions (fieldName) {\n      if (this.selectOptionsRow !== '') {\n        if (!this.content[fieldName]) {\n          this.content[fieldName] = this.select\n        }\n        this.selectOptionsRow.split(',').forEach(tag => {\n          this.select.options.push(`${tag.trim()}`)\n        })\n        this.content[fieldName].options ? [...this.content[fieldName].options, ...this.select.options] : [...this.select.options]\n\n        this.selectOptionsRow = ''\n      }\n    }\n    \n  }\n}\n\n</script>\n<style>\n.tagscontainer {\n  border: 2px solid #f2f2f2;\n  border-radius: 5px;\n  padding: 5px;\n}\n.pointer {\n  cursor: pointer;\n}\n</style>\n"],"sourceRoot":"src/admin/pages/content/contents"}]}