{"remainingRequest":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/node_modules/babel-loader/lib/index.js!/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/src/admin/pages/Database.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/src/admin/pages/Database.vue","mtime":1565240946488},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/node_modules/babel-loader/lib/index.js","mtime":1558705227210},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/node_modules/vue-loader/lib/index.js","mtime":1565232945777}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _objectSpread from \"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport firebase from \"firebase/app\";\nimport \"firebase/storage\";\nimport { demoData } from \"@/../tamiat.config.json\";\nimport notifier from \"@/admin/mixins/notifier\";\nimport { settingsRef, mediaRef, navRef, contentsRef, fieldsRef, routesRef } from \"@/admin/firebase_config\";\nimport _ from \"lodash\";\nexport default {\n  data: function data() {\n    return _objectSpread({}, demoData, {\n      con: \"\"\n    });\n  },\n  firebase: {\n    settings: settingsRef,\n    media: mediaRef,\n    nav: navRef,\n    fields: fieldsRef,\n    contents: contentsRef,\n    routes: routesRef\n  },\n  mixins: [notifier],\n  methods: {\n    addDemoContentsData: function addDemoContentsData() {\n      var _this = this;\n\n      var storageRef = firebase.storage().ref();\n      Object.keys(this.demoContentsData).map(function (key) {\n        var hashKey = _.find(_this.contents, {\n          name: key\n        })[\".key\"];\n\n        _this.demoContentsData[key].map(function (content) {\n          var imageName = content.title ? \"tamiat-\".concat(content.title, \".png\") : \"tamiat-\".concat(content.author, \".png\");\n          var ImageRef = storageRef.child(\"images/\" + imageName);\n          var imgDownloadURL = \"\"; //if condition prevents the function from uploading an empty file when demo content does not have img property(Post, News...) Othervise it will upload a text/html file instead of an image since the promise returned undefined and the browser will say that the image was blocked by CORB (since it is a text/html file)\n\n          if (!content.img) {\n            content.img = \"https://raw.githubusercontent.com/tamiat/tamiat/master/src/app/assets/img/coast.jpg\";\n          }\n\n          _this.fetchBlob(content.img).then(function (blob) {\n            return ImageRef.put(blob);\n          }).then(function (snapshot) {\n            return snapshot.ref.getDownloadURL();\n          }).then(function (downloadURL) {\n            imgDownloadURL = downloadURL;\n            content.created = Date.now();\n            content.img = imgDownloadURL;\n            return _this.$firebaseRefs.contents.child(hashKey + \"/data\").push(content);\n          }).then(function () {\n            return _this.$firebaseRefs.media.push({\n              name: imageName,\n              path: ImageRef.fullPath,\n              src: imgDownloadURL\n            });\n          });\n        });\n      });\n    },\n    // this is the old code\n    // addDemoServices() {\n    //   let i = this.demoServices.length;\n    //   this.demoServices.forEach(service => {\n    //     const key = _.find(this.contents, { name: \"Services\" })[\".key\"];\n    //     service.created = Date.now();\n    //     this.$firebaseRefs.contents\n    //       .child(key + \"/data\")\n    //       .push(service)\n    //       .then(() => {\n    //         i--;\n    //         if (i === 0) {\n    //           this.showNotification(\n    //             \"success\",\n    //             \"Demo Services added successfully\"\n    //           );\n    //         }\n    //       });\n    //   });\n    // },\n    // addDemoWorks() {\n    //   let storageRef = firebase.storage().ref();\n    //   const key = _.find(this.contents, { name: \"Works\" })[\".key\"];\n    //   this.demoWorks.forEach(work => {\n    //     // let imageName = `work-${work.title}.jpg`\n    //     // let workImageRef = storageRef.child('images/' + imageName)\n    //     // let imgDownloadURL = ''\n    //     this.fetchBlob(work.img)\n    //       // .then(blob => {\n    //       //   return workImageRef.put(blob)\n    //       // })\n    //       // .then(snapshot => {\n    //       //   return snapshot.ref.getDownloadURL()\n    //       // })\n    //       .then(downloadURL => {\n    //         // imgDownloadURL = downloadURL\n    //         // work.created = Date.now()\n    //         // work.img = imgDownloadURL\n    //         return this.$firebaseRefs.contents.child(key + \"/data\").push(work);\n    //       })\n    //       .then(() => {\n    //         return this.$firebaseRefs.media.push({\n    //           name: imageName,\n    //           path: workImageRef.fullPath,\n    //           src: imgDownloadURL\n    //         });\n    //       });\n    //   });\n    // },\n    // addDemoReviews() {\n    //   let storageRef = firebase.storage().ref();\n    //   const key = _.find(this.contents, { name: \"Reviews\" })[\".key\"];\n    //   this.demoReviews.forEach(review => {\n    //     let imageName = `review-author-${review.author}.png`;\n    //     let reviewImageRef = storageRef.child(\"images/\" + imageName);\n    //     let imgDownloadURL = \"\";\n    //     this.fetchBlob(review.img)\n    //       .then(blob => {\n    //         return reviewImageRef.put(blob);\n    //       })\n    //       .then(snapshot => {\n    //         return snapshot.ref.getDownloadURL();\n    //       })\n    //       .then(downloadURL => {\n    //         imgDownloadURL = downloadURL;\n    //         review.created = Date.now();\n    //         review.img = imgDownloadURL;\n    //         return this.$firebaseRefs.contents\n    //           .child(key + \"/data\")\n    //           .push(review);\n    //       })\n    //       .then(() => {\n    //         return this.$firebaseRefs.media.push({\n    //           name: imageName,\n    //           path: reviewImageRef.fullPath,\n    //           src: imgDownloadURL\n    //         });\n    //       });\n    //   });\n    // },\n    // addDemoPost() {\n    //   let storageRef = firebase.storage().ref();\n    //   let postImageRef = storageRef.child(\"images/demo-post-img.png\");\n    //   let imgDownloadURL = \"\";\n    //   this.fetchLogoBlob()\n    //     .then(blob => {\n    //       return postImageRef.put(blob);\n    //     })\n    //     .then(snapshot => {\n    //       return snapshot.ref.getDownloadURL();\n    //     })\n    //     .then(downloadURL => {\n    //       imgDownloadURL = downloadURL;\n    //       let demoPost = { ...this.demoPost };\n    //       demoPost.created = Date.now();\n    //       demoPost.img = imgDownloadURL;\n    //       demoPost.body += `<p><img src=\"${imgDownloadURL}\"></p>`;\n    //       const key = _.find(this.contents, { name: \"Posts\" })[\".key\"];\n    //       return this.$firebaseRefs.contents\n    //         .child(key + \"/data\")\n    //         .push(demoPost);\n    //     })\n    //     .then(() => {\n    //       return this.$firebaseRefs.media.push({\n    //         name: \"demo-post-img.png\",\n    //         path: postImageRef.fullPath,\n    //         src: imgDownloadURL\n    //       });\n    //     })\n    //     .then(() => {\n    //       // this.showNotification('success', 'Demo Content added successfully')\n    //     });\n    // },\n    // addDemoNews() {\n    //   let storageRef = firebase.storage().ref();\n    //   let postImageRef = storageRef.child(\"images/demo-post-img.png\");\n    //   let imgDownloadURL = \"\";\n    //   const key = _.find(this.contents, { name: \"News\" })[\".key\"];\n    //   this.fetchLogoBlob()\n    //     .then(blob => {\n    //       return postImageRef.put(blob);\n    //     })\n    //     .then(snapshot => {\n    //       return snapshot.ref.getDownloadURL();\n    //     })\n    //     .then(downloadURL => {\n    //       imgDownloadURL = downloadURL;\n    //       let demoNews = { ...this.demoNews };\n    //       demoNews.created = Date.now();\n    //       demoNews.img = imgDownloadURL;\n    //       return this.$firebaseRefs.contents\n    //         .child(key + \"/data\")\n    //         .push(demoNews);\n    //     })\n    //     .then(() => {\n    //       return this.$firebaseRefs.media.push({\n    //         name: \"demo-post-img.png\",\n    //         path: postImageRef.fullPath,\n    //         src: imgDownloadURL\n    //       });\n    //     })\n    //     .then(() => {\n    //       this.addDemoRoutesForNews();\n    //       this.showNotification(\"success\", \"Demo Content added successfully\");\n    //     });\n    // },\n    addDemoRoutesForNews: function addDemoRoutesForNews() {\n      var _this2 = this;\n\n      var i = this.demoRoutes.length;\n      this.demoRoutes.forEach(function (route) {\n        _this2.$firebaseRefs.routes.push(route).then(function () {\n          i--;\n\n          if (i === 0) {\n            _this2.showNotification(\"success\", \"Demo Route added successfully\");\n          }\n        });\n      });\n    },\n    addDemoSettings: function addDemoSettings() {\n      var _this3 = this;\n\n      this.$firebaseRefs.settings.update(this.demoSettings).then(function () {\n        _this3.showNotification(\"success\", \"Demo Settings added successfully\");\n      });\n    },\n    addDemoNav: function addDemoNav() {\n      var _this4 = this;\n\n      var i = this.demoNav.length;\n      this.demoNav.forEach(function (link) {\n        _this4.$firebaseRefs.nav.push(link).then(function () {\n          i--;\n\n          if (i === 0) {\n            _this4.showNotification(\"success\", \"Demo Nav added successfully\");\n          }\n        });\n      });\n    },\n    addDemoLogo: function addDemoLogo() {\n      var _this5 = this;\n\n      var storageRef = firebase.storage().ref();\n      var logoRef = storageRef.child(\"images/tamiatlogo.png\");\n      this.fetchLogoBlob().then(function (blob) {\n        logoRef.put(blob).then(function (snapshot) {\n          _this5.addDemoLogoToDB(snapshot);\n        });\n      });\n    },\n    fetchLogoBlob: function fetchLogoBlob() {\n      return this.fetchBlob(this.demoLogoLink);\n    },\n    fetchBlob: function fetchBlob(link) {\n      return fetch(link).then(function (res) {\n        return res.blob();\n      });\n    },\n    addDemoLogoToDB: function addDemoLogoToDB(snapshot) {\n      var _this6 = this;\n\n      snapshot.ref.getDownloadURL().then(function (downloadURL) {\n        return _this6.$firebaseRefs.media.push({\n          name: \"WebsiteLogo\",\n          path: snapshot.ref.fullPath,\n          src: downloadURL\n        });\n      }).then(function () {\n        _this6.showNotification(\"success\", \"Demo Logo added successfully\");\n      });\n    },\n    addDemoFields: function addDemoFields() {\n      var _this7 = this;\n\n      var i = this.demoFields.length;\n      this.demoFields.forEach(function (field) {\n        _this7.$firebaseRefs.fields.push(field).then(function () {\n          i--;\n\n          if (i === 0) {\n            _this7.showNotification(\"success\", \"Demo fields added successfully\");\n          }\n        });\n      });\n    },\n    addDemoContent: function addDemoContent() {\n      var _this8 = this;\n\n      var i = this.demoContent.length;\n      this.demoContent.forEach(function (content) {\n        _this8.$firebaseRefs.contents.push(content).then(function (c) {\n          i--;\n\n          if (i === 0) {\n            _this8.con = c.key; //   this.addDemoPost()\n            //   this.addDemoNews()\n            //   this.addDemoServices()\n            //   this.addDemoReviews()\n\n            _this8.addDemoContentsData();\n          }\n        });\n      });\n    }\n  }\n};",{"version":3,"sources":["Database.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"container\">\n    <!-- notification -->\n    <transition mode=\"out-in\" name=\"fade\">\n      <div v-if=\"notification.message\" :class=\"'notification is-' + notification.type\">\n        <button class=\"delete\" @click=\"hideNotifications\"></button>\n        {{notification.message}}\n      </div>\n    </transition>\n\n    <h2>Database State</h2>\n    <div class=\"box\">\n      <div class=\"columns\">\n        <div class=\"column\">\n          <div>\n            Settings:\n            <span v-if=\"settings.length === 0\" class=\"has-text-danger\">\n              Empty\n              <button class=\"button is-info\" @click=\"addDemoSettings\">Add Demo Settings</button>\n            </span>\n            <span v-else class=\"has-text-success\">Contains data</span>\n          </div>\n\n          <div>\n            Media:\n            <span v-if=\"media.length === 0\" class=\"has-text-danger\">\n              Empty\n              <button class=\"button is-info\" @click=\"addDemoLogo\">Add Demo Logo</button>\n            </span>\n            <span v-else class=\"has-text-success\">Contains data</span>\n          </div>\n\n          <div>\n            Nav:\n            <span v-if=\"nav.length === 0\" class=\"has-text-danger\">\n              Empty\n              <button class=\"button is-info\" @click=\"addDemoNav\">Add Demo Nav</button>\n            </span>\n            <span v-else class=\"has-text-success\">Contains data</span>\n          </div>\n\n          <div>\n            Content:\n            <span v-if=\"contents.length === 0\" class=\"has-text-danger\">\n              Empty\n              <button class=\"button is-info\" @click=\"addDemoContent\">Add Demo Content</button>\n            </span>\n            <span v-else class=\"has-text-success\">Contains data</span>\n          </div>\n\n          <div>\n            Fields:\n            <span v-if=\"fields.length === 0\" class=\"has-text-danger\">\n              Empty\n              <button class=\"button is-info\" @click=\"addDemoFields\">Add Demo Field</button>\n            </span>\n            <span v-else class=\"has-text-success\">Contains data</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport firebase from \"firebase/app\";\nimport \"firebase/storage\";\nimport { demoData } from \"@/../tamiat.config.json\";\nimport notifier from \"@/admin/mixins/notifier\";\nimport {\n  settingsRef,\n  mediaRef,\n  navRef,\n  contentsRef,\n  fieldsRef,\n  routesRef\n} from \"@/admin/firebase_config\";\nimport _ from \"lodash\";\n\nexport default {\n  data() {\n    return { ...demoData, con: \"\" };\n  },\n  firebase: {\n    settings: settingsRef,\n    media: mediaRef,\n    nav: navRef,\n    fields: fieldsRef,\n    contents: contentsRef,\n    routes: routesRef\n  },\n  mixins: [notifier],\n  methods: {\n    addDemoContentsData() {\n      let storageRef = firebase.storage().ref();\n      Object.keys(this.demoContentsData).map(key => {\n        let hashKey = _.find(this.contents, { name: key })[\".key\"];\n\n        this.demoContentsData[key].map(content => {\n          let imageName = content.title ? `tamiat-${content.title}.png` : `tamiat-${content.author}.png`;\n          let ImageRef = storageRef.child(\"images/\" + imageName);\n          let imgDownloadURL = \"\";\n          //if condition prevents the function from uploading an empty file when demo content does not have img property(Post, News...) Othervise it will upload a text/html file instead of an image since the promise returned undefined and the browser will say that the image was blocked by CORB (since it is a text/html file)\n          \n          if(!content.img){\n            content.img = \"https://raw.githubusercontent.com/tamiat/tamiat/master/src/app/assets/img/coast.jpg\"\n            }\n          this.fetchBlob(content.img)\n            .then(blob => {\n              return ImageRef.put(blob);\n            })\n            .then(snapshot => {\n              return snapshot.ref.getDownloadURL();\n            })\n            .then(downloadURL => {\n              imgDownloadURL = downloadURL;\n              content.created = Date.now();\n              content.img = imgDownloadURL;\n              return this.$firebaseRefs.contents\n                .child(hashKey + \"/data\")\n                .push(content);\n            })\n            .then(() => {\n              return this.$firebaseRefs.media.push({\n                name: imageName,\n                path: ImageRef.fullPath,\n                src: imgDownloadURL\n              });\n            });\n        });\n      });\n    },\n\n// this is the old code\n    // addDemoServices() {\n    //   let i = this.demoServices.length;\n    //   this.demoServices.forEach(service => {\n    //     const key = _.find(this.contents, { name: \"Services\" })[\".key\"];\n    //     service.created = Date.now();\n    //     this.$firebaseRefs.contents\n    //       .child(key + \"/data\")\n    //       .push(service)\n    //       .then(() => {\n    //         i--;\n    //         if (i === 0) {\n    //           this.showNotification(\n    //             \"success\",\n    //             \"Demo Services added successfully\"\n    //           );\n    //         }\n    //       });\n    //   });\n    // },\n    // addDemoWorks() {\n    //   let storageRef = firebase.storage().ref();\n    //   const key = _.find(this.contents, { name: \"Works\" })[\".key\"];\n\n    //   this.demoWorks.forEach(work => {\n    //     // let imageName = `work-${work.title}.jpg`\n    //     // let workImageRef = storageRef.child('images/' + imageName)\n    //     // let imgDownloadURL = ''\n\n    //     this.fetchBlob(work.img)\n    //       // .then(blob => {\n    //       //   return workImageRef.put(blob)\n    //       // })\n    //       // .then(snapshot => {\n    //       //   return snapshot.ref.getDownloadURL()\n    //       // })\n    //       .then(downloadURL => {\n    //         // imgDownloadURL = downloadURL\n    //         // work.created = Date.now()\n    //         // work.img = imgDownloadURL\n\n    //         return this.$firebaseRefs.contents.child(key + \"/data\").push(work);\n    //       })\n    //       .then(() => {\n    //         return this.$firebaseRefs.media.push({\n    //           name: imageName,\n    //           path: workImageRef.fullPath,\n    //           src: imgDownloadURL\n    //         });\n    //       });\n    //   });\n    // },\n    // addDemoReviews() {\n    //   let storageRef = firebase.storage().ref();\n    //   const key = _.find(this.contents, { name: \"Reviews\" })[\".key\"];\n\n    //   this.demoReviews.forEach(review => {\n    //     let imageName = `review-author-${review.author}.png`;\n    //     let reviewImageRef = storageRef.child(\"images/\" + imageName);\n    //     let imgDownloadURL = \"\";\n\n    //     this.fetchBlob(review.img)\n    //       .then(blob => {\n    //         return reviewImageRef.put(blob);\n    //       })\n    //       .then(snapshot => {\n    //         return snapshot.ref.getDownloadURL();\n    //       })\n    //       .then(downloadURL => {\n    //         imgDownloadURL = downloadURL;\n    //         review.created = Date.now();\n    //         review.img = imgDownloadURL;\n\n    //         return this.$firebaseRefs.contents\n    //           .child(key + \"/data\")\n    //           .push(review);\n    //       })\n    //       .then(() => {\n    //         return this.$firebaseRefs.media.push({\n    //           name: imageName,\n    //           path: reviewImageRef.fullPath,\n    //           src: imgDownloadURL\n    //         });\n    //       });\n    //   });\n    // },\n    // addDemoPost() {\n    //   let storageRef = firebase.storage().ref();\n    //   let postImageRef = storageRef.child(\"images/demo-post-img.png\");\n    //   let imgDownloadURL = \"\";\n\n    //   this.fetchLogoBlob()\n    //     .then(blob => {\n    //       return postImageRef.put(blob);\n    //     })\n    //     .then(snapshot => {\n    //       return snapshot.ref.getDownloadURL();\n    //     })\n    //     .then(downloadURL => {\n    //       imgDownloadURL = downloadURL;\n    //       let demoPost = { ...this.demoPost };\n    //       demoPost.created = Date.now();\n    //       demoPost.img = imgDownloadURL;\n    //       demoPost.body += `<p><img src=\"${imgDownloadURL}\"></p>`;\n    //       const key = _.find(this.contents, { name: \"Posts\" })[\".key\"];\n    //       return this.$firebaseRefs.contents\n    //         .child(key + \"/data\")\n    //         .push(demoPost);\n    //     })\n    //     .then(() => {\n    //       return this.$firebaseRefs.media.push({\n    //         name: \"demo-post-img.png\",\n    //         path: postImageRef.fullPath,\n    //         src: imgDownloadURL\n    //       });\n    //     })\n    //     .then(() => {\n    //       // this.showNotification('success', 'Demo Content added successfully')\n    //     });\n    // },\n    // addDemoNews() {\n    //   let storageRef = firebase.storage().ref();\n    //   let postImageRef = storageRef.child(\"images/demo-post-img.png\");\n    //   let imgDownloadURL = \"\";\n    //   const key = _.find(this.contents, { name: \"News\" })[\".key\"];\n\n    //   this.fetchLogoBlob()\n    //     .then(blob => {\n    //       return postImageRef.put(blob);\n    //     })\n    //     .then(snapshot => {\n    //       return snapshot.ref.getDownloadURL();\n    //     })\n    //     .then(downloadURL => {\n    //       imgDownloadURL = downloadURL;\n    //       let demoNews = { ...this.demoNews };\n    //       demoNews.created = Date.now();\n    //       demoNews.img = imgDownloadURL;\n    //       return this.$firebaseRefs.contents\n    //         .child(key + \"/data\")\n    //         .push(demoNews);\n    //     })\n    //     .then(() => {\n    //       return this.$firebaseRefs.media.push({\n    //         name: \"demo-post-img.png\",\n    //         path: postImageRef.fullPath,\n    //         src: imgDownloadURL\n    //       });\n    //     })\n    //     .then(() => {\n    //       this.addDemoRoutesForNews();\n    //       this.showNotification(\"success\", \"Demo Content added successfully\");\n    //     });\n    // },\n    addDemoRoutesForNews() {\n      let i = this.demoRoutes.length;\n      this.demoRoutes.forEach(route => {\n        this.$firebaseRefs.routes.push(route).then(() => {\n          i--;\n          if (i === 0) {\n            this.showNotification(\"success\", \"Demo Route added successfully\");\n          }\n        });\n      });\n    },\n    addDemoSettings() {\n      this.$firebaseRefs.settings.update(this.demoSettings).then(() => {\n        this.showNotification(\"success\", \"Demo Settings added successfully\");\n      });\n    },\n    addDemoNav() {\n      let i = this.demoNav.length;\n      this.demoNav.forEach(link => {\n        this.$firebaseRefs.nav.push(link).then(() => {\n          i--;\n          if (i === 0) {\n            this.showNotification(\"success\", \"Demo Nav added successfully\");\n          }\n        });\n      });\n    },\n    addDemoLogo() {\n      let storageRef = firebase.storage().ref();\n      let logoRef = storageRef.child(`images/tamiatlogo.png`);\n\n      this.fetchLogoBlob().then(blob => {\n        logoRef.put(blob).then(snapshot => {\n          this.addDemoLogoToDB(snapshot);\n        });\n      });\n    },\n    fetchLogoBlob() {\n      return this.fetchBlob(this.demoLogoLink);\n    },\n    fetchBlob(link) {\n      return fetch(link).then(res => {\n        return res.blob();\n      });\n    },\n    addDemoLogoToDB(snapshot) {\n      snapshot.ref\n        .getDownloadURL()\n        .then(downloadURL => {\n          return this.$firebaseRefs.media.push({\n            name: \"WebsiteLogo\",\n            path: snapshot.ref.fullPath,\n            src: downloadURL\n          });\n        })\n        .then(() => {\n          this.showNotification(\"success\", \"Demo Logo added successfully\");\n        });\n    },\n    addDemoFields() {\n      let i = this.demoFields.length;\n      this.demoFields.forEach(field => {\n        this.$firebaseRefs.fields.push(field).then(() => {\n          i--;\n          if (i === 0) {\n            this.showNotification(\"success\", \"Demo fields added successfully\");\n          }\n        });\n      });\n    },\n    addDemoContent() {\n      let i = this.demoContent.length;\n\n      this.demoContent.forEach(content => {\n        this.$firebaseRefs.contents.push(content).then(c => {\n          i--;\n          if (i === 0) {\n            this.con = c.key;\n            //   this.addDemoPost()\n            //   this.addDemoNews()\n            //   this.addDemoServices()\n            //   this.addDemoReviews()\n            this.addDemoContentsData();\n          }\n        });\n      });\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.column > div {\n  margin-top: 15px;\n  &:first-child {\n    margin-top: 0px;\n  }\n}\n\nbutton {\n  vertical-align: middle !important;\n  margin-left: 30px;\n}\n</style>\n"],"sourceRoot":"src/admin/pages"}]}