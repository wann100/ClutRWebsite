{"remainingRequest":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/node_modules/babel-loader/lib/index.js!/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/node_modules/eslint-loader/index.js??ref--13-0!/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/src/admin/mixins/contentFetch.js","dependencies":[{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/src/admin/mixins/contentFetch.js","mtime":1565240946485},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/node_modules/babel-loader/lib/index.js","mtime":1558705227210},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/node_modules/eslint-loader/index.js","mtime":1565232944998}],"contextDependencies":[],"result":["import _objectSpread from \"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\nexport default {\n  methods: {\n    selectContentByTypeAndId: function selectContentByTypeAndId(type, id, onlyPublished) {\n      var contentsByType = this.getContentsByType(type, onlyPublished);\n      return contentsByType.filter(function (content) {\n        return (onlyPublished ? content.state === 'published' : true) && (content.slug ? content.slug : content['.key'] === id || {});\n      });\n    },\n    getContentsByType: function getContentsByType(contentType, onlyPublished) {\n      var _this = this;\n\n      var selectedContentsData = [];\n      var selectedContents = this.contents.filter(function (content) {\n        return content.name === contentType;\n      });\n      selectedContents.forEach(function (content) {\n        var contentDataArray = _this.convertContentDataToArray(content.data); // Get Published Only\n\n\n        if (onlyPublished === true) {\n          contentDataArray = contentDataArray.filter(function (content) {\n            return content.state === 'published';\n          });\n        }\n\n        selectedContentsData = selectedContentsData.concat(contentDataArray || []);\n      });\n      return selectedContentsData;\n    },\n    convertContentDataToArray: function convertContentDataToArray(contentData) {\n      var contentDataArray = [];\n\n      for (var key in contentData) {\n        contentDataArray.push(_objectSpread({}, contentData[key], {\n          '.key': key\n        }));\n      }\n\n      return contentDataArray;\n    }\n  }\n};",{"version":3,"sources":["/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/src/admin/mixins/contentFetch.js"],"names":["methods","selectContentByTypeAndId","type","id","onlyPublished","contentsByType","getContentsByType","filter","content","state","slug","contentType","selectedContentsData","selectedContents","contents","name","forEach","contentDataArray","convertContentDataToArray","data","concat","contentData","key","push"],"mappings":";;;AAAA,eAAe;AACbA,EAAAA,OAAO,EAAE;AACPC,IAAAA,wBADO,oCACmBC,IADnB,EACyBC,EADzB,EAC6BC,aAD7B,EAC4C;AACjD,UAAIC,cAAc,GAAG,KAAKC,iBAAL,CAAuBJ,IAAvB,EAA6BE,aAA7B,CAArB;AACA,aAAOC,cAAc,CAACE,MAAf,CACL,UAAAC,OAAO;AAAA,eACL,CAACJ,aAAa,GAAGI,OAAO,CAACC,KAAR,KAAkB,WAArB,GAAmC,IAAjD,MACCD,OAAO,CAACE,IAAR,GAAeF,OAAO,CAACE,IAAvB,GAA8BF,OAAO,CAAC,MAAD,CAAP,KAAoBL,EAApB,IAA0B,EADzD,CADK;AAAA,OADF,CAAP;AAKD,KARM;AASPG,IAAAA,iBATO,6BASYK,WATZ,EASyBP,aATzB,EASwC;AAAA;;AAC7C,UAAIQ,oBAAoB,GAAG,EAA3B;AACA,UAAIC,gBAAgB,GAAG,KAAKC,QAAL,CAAcP,MAAd,CAAqB,UAAAC,OAAO,EAAI;AACrD,eAAOA,OAAO,CAACO,IAAR,KAAiBJ,WAAxB;AACD,OAFsB,CAAvB;AAGAE,MAAAA,gBAAgB,CAACG,OAAjB,CAAyB,UAAAR,OAAO,EAAI;AAClC,YAAIS,gBAAgB,GAAG,KAAI,CAACC,yBAAL,CAA+BV,OAAO,CAACW,IAAvC,CAAvB,CADkC,CAElC;;;AACA,YAAIf,aAAa,KAAK,IAAtB,EAA4B;AAC1Ba,UAAAA,gBAAgB,GAAGA,gBAAgB,CAACV,MAAjB,CACjB,UAAAC,OAAO;AAAA,mBAAIA,OAAO,CAACC,KAAR,KAAkB,WAAtB;AAAA,WADU,CAAnB;AAGD;;AACDG,QAAAA,oBAAoB,GAAGA,oBAAoB,CAACQ,MAArB,CACrBH,gBAAgB,IAAI,EADC,CAAvB;AAGD,OAXD;AAYA,aAAOL,oBAAP;AACD,KA3BM;AA4BPM,IAAAA,yBA5BO,qCA4BoBG,WA5BpB,EA4BiC;AACtC,UAAIJ,gBAAgB,GAAG,EAAvB;;AACA,WAAK,IAAIK,GAAT,IAAgBD,WAAhB,EAA6B;AAC3BJ,QAAAA,gBAAgB,CAACM,IAAjB,mBACKF,WAAW,CAACC,GAAD,CADhB;AAEE,kBAAQA;AAFV;AAID;;AACD,aAAOL,gBAAP;AACD;AArCM;AADI,CAAf","sourcesContent":["export default {\n  methods: {\n    selectContentByTypeAndId (type, id, onlyPublished) {\n      let contentsByType = this.getContentsByType(type, onlyPublished)\n      return contentsByType.filter(\n        content =>\n          (onlyPublished ? content.state === 'published' : true) &&\n          (content.slug ? content.slug : content['.key'] === id || {})\n      )\n    },\n    getContentsByType (contentType, onlyPublished) {\n      let selectedContentsData = []\n      let selectedContents = this.contents.filter(content => {\n        return content.name === contentType\n      })\n      selectedContents.forEach(content => {\n        let contentDataArray = this.convertContentDataToArray(content.data)\n        // Get Published Only\n        if (onlyPublished === true) {\n          contentDataArray = contentDataArray.filter(\n            content => content.state === 'published'\n          )\n        }\n        selectedContentsData = selectedContentsData.concat(\n          contentDataArray || []\n        )\n      })\n      return selectedContentsData\n    },\n    convertContentDataToArray (contentData) {\n      let contentDataArray = []\n      for (let key in contentData) {\n        contentDataArray.push({\n          ...contentData[key],\n          '.key': key\n        })\n      }\n      return contentDataArray\n    }\n  }\n}\n"]}]}