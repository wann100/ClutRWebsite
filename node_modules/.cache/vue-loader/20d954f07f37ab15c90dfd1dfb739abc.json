{"remainingRequest":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kognos/Documents/GitHub/ClutRWebsite/src/admin/pages/Users.vue?vue&type=style&index=0&id=033ba014&lang=scss&scoped=true&","dependencies":[{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/src/admin/pages/Users.vue","mtime":1565359774898},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/css-loader/index.js","mtime":1565232945271},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1565232945777},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/postcss-loader/src/index.js","mtime":1558705227897},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/sass-loader/lib/loader.js","mtime":1558705227962},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/vue-loader/lib/index.js","mtime":1565232945777}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.column > div {\n  margin-top: 15px;\n  &:first-child {\n    margin-top: 0px;\n  }\n}\n\nbutton {\n  vertical-align: middle !important;\n  margin-left: 30px;\n}\n\n.searchbox {\n    width:40%;\n    font-weight: bold;\n    border-radius: 5px\n}\n",{"version":3,"sources":["Users.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0HA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"Users.vue","sourceRoot":"src/admin/pages","sourcesContent":["<template>\n  <div class=\"container\">\n    <!-- notification -->\n    <transition mode=\"out-in\" name=\"fade\">\n      <div v-if=\"notification.message\" :class=\"'notification is-' + notification.type\">\n        <button class=\"delete\" @click=\"hideNotifications\"></button>\n        {{notification.message}}\n      </div>\n    </transition>\n\n    <h2>Users</h2>\n    <div class=\"box\">\n      <div class=\"columns\">\n        <div class=\"column\">\n        <input class=\"searchbox\" type=\"text\" placeholder=\"Search..\">\n\n  {{ this.users }}\n    </div>\n    \n        </div>\n      </div>\n    </div>\n</template>\n\n<script>\nimport firebase from \"firebase/app\";\nimport \"firebase/storage\";\nimport { demoData } from \"@/../tamiat.config.json\";\nimport {updateUserDetails,userDetailsFetch} from \"@/../actions\"\nimport notifier from \"@/admin/mixins/notifier\";\nimport {\n  settingsRef,\n  mediaRef,\n  navRef,\n  contentsRef,\n  fieldsRef,\n  routesRef,\n  usersRef\n} from \"@/admin/firebase_config\";\nimport _ from \"lodash\";\n\nexport default {\n  data() {\n    return { \n        users:null,\n        currentUser: firebase.auth().currentUser,\n\n\n     };\n  },\n  firebase: {\n    settings: settingsRef,\n    media: mediaRef,\n    nav: navRef,\n    fields: fieldsRef,\n    contents: contentsRef,\n    routes: routesRef\n  },\n  mixins: [notifier],\n  methods: {\n\n    getusers(){\n\n        this.users = userDetailsFetch();\n       // console.log(this.users);\n        if(this.users!=null){\n            this.showNotification('success', 'Users Dowloaded')\n        }\n\n\n    },\n    updateUser(){\n\n    },\n    addDemoContentsData() {\n      let storageRef = firebase.storage().ref();\n      Object.keys(this.demoContentsData).map(key => {\n        let hashKey = _.find(this.contents, { name: key })[\".key\"];\n\n        this.demoContentsData[key].map(content => {\n          let imageName = content.title ? `tamiat-${content.title}.png` : `tamiat-${content.author}.png`;\n          let ImageRef = storageRef.child(\"images/\" + imageName);\n          let imgDownloadURL = \"\";\n          //if condition prevents the function from uploading an empty file when demo content does not have img property(Post, News...) Othervise it will upload a text/html file instead of an image since the promise returned undefined and the browser will say that the image was blocked by CORB (since it is a text/html file)\n          \n          if(!content.img){\n            content.img = \"https://raw.githubusercontent.com/tamiat/tamiat/master/src/app/assets/img/coast.jpg\"\n            }\n          this.fetchBlob(content.img)\n            .then(blob => {\n              return ImageRef.put(blob);\n            })\n            .then(snapshot => {\n              return snapshot.ref.getDownloadURL();\n            })\n            .then(downloadURL => {\n              imgDownloadURL = downloadURL;\n              content.created = Date.now();\n              content.img = imgDownloadURL;\n              return this.$firebaseRefs.contents\n                .child(hashKey + \"/data\")\n                .push(content);\n            })\n            .then(() => {\n              return this.$firebaseRefs.media.push({\n                name: imageName,\n                path: ImageRef.fullPath,\n                src: imgDownloadURL\n              });\n            });\n        });\n      });\n    },\n\n  },\n   beforeMount(){\n    this.getusers()\n },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.column > div {\n  margin-top: 15px;\n  &:first-child {\n    margin-top: 0px;\n  }\n}\n\nbutton {\n  vertical-align: middle !important;\n  margin-left: 30px;\n}\n\n.searchbox {\n    width:40%;\n    font-weight: bold;\n    border-radius: 5px\n}\n</style>\n"]}]}