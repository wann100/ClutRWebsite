{"remainingRequest":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/src/admin/components/shared/Modal.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/src/admin/components/shared/Modal.vue","mtime":1565240946484},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/node_modules/babel-loader/lib/index.js","mtime":1558705227210},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/node_modules/vue-loader/lib/index.js","mtime":1565232945777}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'modal',\n  data () {\n    return {\n      fieldName: '',\n      pageName: '',\n      settingName: '',\n      contentFieldName: '',\n      contentFieldType: ''\n    }\n  },\n  methods: {\n    add (event) {\n      if (this.kind === 'addField') { this.$emit('addField', this.fieldName) }\n      if (this.kind === 'addPage') { this.$emit('addPage', this.pageName) }\n      if (this.kind === 'addSetting') { this.$emit('addSetting', this.settingName) }\n      if (this.kind === 'addContentField') { this.$emit('addContentField', [this.contentFieldName, this.contentFieldType]) }\n    },\n    deleteObj () {\n      if (this.kind === 'deleteField') { this.$emit('confirmDeleteField') }\n      if (this.kind === 'deletePage') { this.$emit('confirmDeletePage') }\n      if (this.kind === 'deleteSetting') { this.$emit('confirmDeleteSetting') }\n      if (this.kind === 'deleteContent') { this.$emit('confirmDeleteContent') }\n      if (this.kind === 'bulkDeleteSelected') { this.$emit('selectBulkActions') }\n    }\n  },\n  props: {\n    header: {\n      type: String,\n      required: true,\n      default: '!Error'\n    },\n    subHeader: {\n      type: String,\n      required: false,\n      default: '!Error'\n    },\n    kind: {\n      type: String\n    }\n  }\n}\n",{"version":3,"sources":["Modal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Modal.vue","sourceRoot":"src/admin/components/shared","sourcesContent":["<template>\n  <div class=\"modal is-active\">\n    <div class=\"modal-background\"></div>\n    <div class=\"modal-card\">\n      <header class=\"modal-card-head\">\n        <p class=\"modal-card-title\">{{ header }}</p>\n        <button class=\"delete is-medium\" aria-label=\"close\" @click=\"$emit('close')\"></button>\n      </header>\n      <section class=\"modal-card-body\" v-if=\"kind == 'addField' || kind == 'addPage' || kind == 'addSetting' || kind == 'addContentField'\">\n        <input type=\"text\" class=\"input\" v-if=\"kind == 'addField'\" :placeholder=\"'Property'\" v-model=\"fieldName\">\n        <input type=\"text\" class=\"input\" v-if=\"kind == 'addPage'\" :placeholder=\"'Page'\" v-model=\"pageName\">\n        <input type=\"text\" class=\"input\" v-if=\"kind == 'addSetting'\" :placeholder=\"'Setting'\" v-model=\"settingName\">\n        <div v-if=\"kind == 'addContentField'\">\n          <div class=\"field\">\n            <label class=\"label\">Name of the content field</label>\n            <input type=\"text\" class=\"input\" :placeholder=\"'Name'\" v-model=\"contentFieldName\">\n          </div>\n          <label class=\"label\">Type of the content field</label>\n          <div class=\"select\">\n            <select v-model=\"contentFieldType\">\n              <!-- Modal Slot - made for adding content type fields -->\n              <slot>\n                <option>There are no options</option>\n              </slot>\n            </select>\n          </div>\n        </div>\n      </section>\n      <footer class=\"modal-card-foot\" v-if=\"kind == 'logout'\">\n        <button class=\"button is-success\" @click=\"$emit('confirmLogout')\">Logout</button>\n        <button class=\"button\" @click=\"$emit('close')\">Cancel</button>\n      </footer>\n      <footer class=\"modal-card-foot\" v-else>\n        <template v-if=\"kind == 'deletePage' || kind == 'deleteField' || kind == 'deleteSetting' || kind == 'deleteContent' || kind == 'bulkDeleteSelected'\">\n          <button class=\"button is-success\" @click=\"deleteObj()\">Confirm</button>\n        </template>\n        <template v-else>\n          <button class=\"button is-success\" @click=\"add()\">Add</button>\n        </template>\n        <button class=\"button\" @click=\"$emit('close')\">Cancel</button>\n      </footer>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'modal',\n  data () {\n    return {\n      fieldName: '',\n      pageName: '',\n      settingName: '',\n      contentFieldName: '',\n      contentFieldType: ''\n    }\n  },\n  methods: {\n    add (event) {\n      if (this.kind === 'addField') { this.$emit('addField', this.fieldName) }\n      if (this.kind === 'addPage') { this.$emit('addPage', this.pageName) }\n      if (this.kind === 'addSetting') { this.$emit('addSetting', this.settingName) }\n      if (this.kind === 'addContentField') { this.$emit('addContentField', [this.contentFieldName, this.contentFieldType]) }\n    },\n    deleteObj () {\n      if (this.kind === 'deleteField') { this.$emit('confirmDeleteField') }\n      if (this.kind === 'deletePage') { this.$emit('confirmDeletePage') }\n      if (this.kind === 'deleteSetting') { this.$emit('confirmDeleteSetting') }\n      if (this.kind === 'deleteContent') { this.$emit('confirmDeleteContent') }\n      if (this.kind === 'bulkDeleteSelected') { this.$emit('selectBulkActions') }\n    }\n  },\n  props: {\n    header: {\n      type: String,\n      required: true,\n      default: '!Error'\n    },\n    subHeader: {\n      type: String,\n      required: false,\n      default: '!Error'\n    },\n    kind: {\n      type: String\n    }\n  }\n}\n</script>\n"]}]}