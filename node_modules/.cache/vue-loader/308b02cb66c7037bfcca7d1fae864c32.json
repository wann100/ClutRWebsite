{"remainingRequest":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/src/admin/pages/content/content-type/ContentType.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/src/admin/pages/content/content-type/ContentType.vue","mtime":1565240946486},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/node_modules/babel-loader/lib/index.js","mtime":1558705227210},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/node_modules/vue-loader/lib/index.js","mtime":1565232945777}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport checkbox from '@/admin/components/shared/Checkbox'\nimport dropdown from '@/admin/components/shared/Dropdown'\nimport { contentsRef, fieldsRef } from '@/admin/firebase_config'\nimport notifier from '@/admin/mixins/notifier'\nimport modal from '@/admin/components/shared/Modal'\nimport { switchCase } from '@babel/types'\n\nexport default {\n  name: 'content-type',\n  mixins: [notifier],\n  firebase: {\n    contents: {\n      source: contentsRef,\n      readyCallback: function () {\n        // Load content types in select after content data loaded from firebase\n        this.loadContentTypes()\n      }\n    },\n    fields: fieldsRef\n  },\n  data () {\n    return {\n      name: '',\n      fieldTypes: [\n        {\n          id: 'textarea',\n          label: 'Textarea'\n        },\n        {\n          id: 'textbox',\n          label: 'Textbox'\n        },\n        {\n          id: 'integer',\n          label: 'Integer'\n        },\n        {\n          id: 'boolean',\n          label: 'Boolean'\n        },\n        {\n          id: 'url',\n          label: 'Url'\n        },\n        {\n          id: 'richtextbox',\n          label: 'Richtextbox'\n        },\n        {\n          id: 'tags',\n          label: 'Tags'\n        },\n        {\n          id: 'select',\n          label: 'Select'\n        },\n        {\n          id: 'image',\n          label: 'Image'\n        }\n      ],\n      contentFields: {\n        /* this obj will contain all new fields for Content\n        * every array contains its area objects (with names and etc.) */\n      },\n      slug: '',\n      showDesc: false,\n      createdContentTypes: null,\n      selectedContentType: {\n        id: '',\n        label: 'Select content type'\n      },\n      dropdownActive: false,\n      selectedContent: null,\n      contentsLoaded: false,\n      selectedContntFields: null,\n      showModal: { add: false, del: false }\n    }\n  },\n  created () {\n    this.clearChecked()\n    this.loadContentTypes()\n  },\n  computed: {\n    checkedFields () {\n      let fieldInContntType = false\n      if(!this.selectedContent){\n        return this.fields.filter(field => {\n          return field.checked\n        })\n      } else { \n        this.fields.filter(field => {\n          //going through every checked field and adding them into fields array of the selected content type if not allready present\n          if (field.checked){\n            this.selectedContntFields.forEach(element => {\n              if (field.name.toLowerCase() == element.name.toLowerCase()){\n                fieldInContntType = true\n              }\n            })\n            if(!fieldInContntType){\n              this.selectedContntFields.push(field)\n              fieldInContntType = false\n            }\n            fieldInContntType = false\n          }//going through every unchecked field and removing them from fields array of the selected content type if they are present \n          else if(!field.checked){\n            let removedIndex = undefined\n            this.selectedContntFields.forEach((element, index) => {\n              if (field.name.toLowerCase() == element.name.toLowerCase()){\n                fieldInContntType = true\n                if(removedIndex) {}\n                else {\n                  removedIndex = index\n                }\n              }\n            })\n            if(fieldInContntType){\n              this.selectedContntFields.splice(removedIndex,1)\n              fieldInContntType = false\n            }\n            fieldInContntType = false\n          }\n        })\n        return this.selectedContntFields\n      }\n    }\n  },\n  methods: {\n    callModal (type) {\n      switch (type) {\n        case 'add':\n          this.showModal.add = true\n          break\n        case 'del':\n          this.showModal.del = true\n          break\n        default:\n          break\n      }\n    },\n    addNewContentField (contentFieldArrParams) {\n      // contentFieldArrParams is arr that contains two elements 0 - name of Field 1 - type of Field\n      const fieldName = contentFieldArrParams[0]\n      const fieldType = contentFieldArrParams[1]\n      if (fieldName === '' || fieldType === '') return\n      // create arr for Field\n      this.contentFields[fieldType] = []\n      this.contentFields[fieldType].push({ name: fieldName })\n      this.showModal.add = false\n    },\n    deleteContentField (fieldType, index) {\n      this.contentFields[fieldType].splice(index, 1)\n    },\n    loadContentTypes () {\n      this.contentsLoaded = false\n      this.selectedContentType = {\n        id: '',\n        label: 'Select content type'\n      }\n      this.createdContentTypes = this.contents.map(content => {\n        return {\n          id: content['.key'],\n          label: content.name\n        }\n      })\n      this.createdContentTypes.push({ id: '', label: 'Select content type' })\n      this.contentsLoaded = true\n    },\n    createMenuItem (edit) {\n      let path\n      if (edit) {\n        path = this.selectedContent.name.toLowerCase()\n      } else {\n        path = this.name.toLowerCase()\n      }\n      path = path.replace(/^[, ]+|[, ]+$|[, ]+/g, '').trim()\n\n      let selectedFields = this.checkedFields.map(field => {\n        return Object.assign({\n          name: field.name,\n          type: field.type,\n          multiValue: field.multiValue\n        }, field.listable ? { listable: true } : null)\n      })\n\n      let item = {\n        name: this.name,\n        contentFields: this.contentFields,\n        slug: this.slug,\n        path: `/admin/content/${path}`,\n        icon: 'fa-file-text',\n        fields: selectedFields\n      }\n      if (edit) {\n        this.selectedContent.path = `/admin/content/${path}`\n        this.selectedContent.fields = selectedFields\n        this.selectedContent.slug = this.slug\n        let item = { ...this.selectedContent }\n        delete item['.key']\n        this.$firebaseRefs.contents.child(this.selectedContent['.key']).set(item).then(() => {\n          this.resetForm()\n          this.loadContentTypes()\n          this.showNotification('success', 'Content edited successfully')\n        })\n      } else {\n        this.$firebaseRefs.contents.push(item).then(() => {\n          this.loadContentTypes()\n          this.showNotification('success', 'Content type added successfully')\n          this.resetForm()\n        })\n      }\n    },\n    deleteMenuItem () {\n      this.$firebaseRefs.contents.child(this.selectedContent['.key']).remove()\n        .then(() => {\n          this.loadContentTypes()\n          this.showNotification('success', 'Content type removed successfully')\n        })\n    },\n    resetForm () {\n      this.name = ''\n      this.contentFields = {\n        textArea: []\n      }\n      this.slug = ''\n      this.selectedContent = null\n      for (var fieldKey in this.fields) {\n        this.fields[fieldKey].checked = false\n      }\n      for (var key in this.supports) {\n        this.supports[key] = false\n      }\n    },\n    addField (field) {\n      this.$firebaseRefs.fields.push(field).then(() => {\n        this.showNotification('success', 'Field added successfully')\n      })\n    },\n    editField (field, f) {\n      this.$firebaseRefs.fields.child(field['.key']).set(f).then(() => {\n        this.showNotification('success', 'Field edited successfully')\n      })\n    },\n    removeField (field) {\n      this.$firebaseRefs.fields.child(field['.key']).remove()\n        .then(() => {\n          this.showNotification('success', 'Field removed successfully')\n        })\n      this.showModal.del = false\n    },\n    moveFieldUp (field, previousField) {\n      let itemCopy = Object.assign({}, field)\n      let previousItemCopy = Object.assign({}, previousField)\n      let itemCopyIndex = 0\n      let previousItemCopyIndex = 0\n      let selectedContntKey = this.selectedContent['.key']\n      this.selectedContntFields.forEach((elem,index) => {\n        if(itemCopy.name.toLowerCase() === elem.name.toLowerCase()) {\n          itemCopyIndex = index\n        } \n        else if(previousItemCopy.name.toLowerCase() === elem.name.toLowerCase()) {\n          previousItemCopyIndex = index\n        } \n      })\n      this.selectedContntFields[itemCopyIndex] = previousItemCopy\n      this.selectedContntFields[previousItemCopyIndex] = itemCopy\n      this.$forceUpdate()\n    },\n    moveFieldDown (field, nextField) {\n      let itemCopy = Object.assign({}, field)\n      let nextItemCopy = Object.assign({}, nextField)\n      let itemCopyIndex = 0\n      let nextItemCopyIndex = 0\n      let selectedContntKey = this.selectedContent['.key']\n      this.selectedContntFields.forEach((elem,index) => {\n        if(itemCopy.name.toLowerCase() === elem.name.toLowerCase()) {\n          itemCopyIndex = index\n        } \n        else if(nextItemCopy.name.toLowerCase() === elem.name.toLowerCase()) {\n          nextItemCopyIndex = index\n        } \n      })\n      this.selectedContntFields[itemCopyIndex] = nextItemCopy\n      this.selectedContntFields[nextItemCopyIndex] = itemCopy\n      this.$forceUpdate()\n    },\n    clearChecked () {\n      for (var key in this.fields) {\n        delete this.fields[key]['checked']\n      }\n    },\n    selectContentType (option) {\n      if (option.id === '') return\n\n      this.selectedContentType = option\n      this.selectedContent = this.contents.filter(content => {\n        if (content.name === option.label) {\n          return content\n        }\n      })[0]\n      this.selectedContntFields = this.selectedContent.fields\n      this.slug = this.selectedContent.slug\n      this.clearChecked()\n      if (option.id) {\n        this.mapFields()\n      }\n    },\n    toggleDropdown () {\n      this.dropdownActive = !this.dropdownActive\n    },\n    mapFields () {\n      for (var j = 0; j < this.fields.length; j++) {\n        for (var i = 0; i < this.selectedContent.fields.length; i++) {\n          if (this.selectedContent.fields[i].name === this.fields[j].name) {\n            this.selectedContent.fields[i].checked = true\n            this.$set(this.fields[j], 'checked', true)\n          }\n        }\n      }\n    },\n    setAsSlug (column) {\n      this.slug = this.slug === column ? null : column\n    }\n  },\n  components: {\n    checkbox,\n    dropdown,\n    modal\n  }\n}\n\n",{"version":3,"sources":["ContentType.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"ContentType.vue","sourceRoot":"src/admin/pages/content/content-type","sourcesContent":["<template>\n  <div class=\"contentType\">\n    <div class=\"container is-widescreen\">\n\n      <!-- View for edit/add new field -->\n      <router-view :edit-field=\"editField\" :add-field=\"addField\"></router-view>\n\n      <!-- notification -->\n      <transition mode=\"out-in\" name=\"fade\">\n        <div v-if=\"notification.message\" :class=\"'notification is-' + notification.type\">\n          <button class=\"delete\" @click=\"hideNotifications\"></button>{{notification.message}}\n        </div>\n      </transition>\n      <div class=\"columns\">\n        <div class=\"column is-two-thirds\">\n          <h2>Create content type</h2>\n          <div class=\"box\">\n            <div class=\"columns\">\n              <div class=\"column\">\n                <div class=\"field\">\n                  <label class=\"label\">Content type name</label>\n                  <div class=\"control\">\n                    <input v-if=\"!selectedContent\" class=\"input\" type=\"text\" placeholder=\"e.g. Movies\" v-model=\"name\">\n                    <input v-else class=\"input\" type=\"text\" placeholder=\"e.g. Movies\" v-model=\"selectedContent.name\">\n                  </div>\n                </div>\n                <!-- area to add new field (variables) to the Content -->\n                <div class=\"field\">\n                  <button type=\"submit\" class=\"button is-info\"  @click=\"callModal('add')\">Add new field</button>\n                  <!-- Modal -->\n                  <modal class=\"modal\" @close=\"showModal.add = false\"  @addContentField='addNewContentField($event)' v-if=\"showModal.add\" :kind=\"'addContentField'\" :header=\"'Add content field'\">\n                    <!-- Modal Slot - made for adding content type fields -->\n                    <option v-for=\"field in fieldTypes\" :key=\"field.id\">{{ field.label }}</option>\n                  </modal>\n                </div>\n\n                <!-- Custom Fields -->\n                <label class=\"label\">Fields</label>\n                <label class=\"has-text-danger is-size-7\" v-if=\"fields.length\">Select the fields you want to be shown in content lists</label>\n                <div class=\"field is-grouped is-grouped-multiline\">\n                  <ul class=\"nav-preview\">\n                    <li v-for=\"(field, fieldKey) in checkedFields\" :key=\"fieldKey\" v-if=\"field.checked\">\n                      {{ field.name }}\n                      <span>\n                        <span v-if=\"fieldKey !== 0\" class=\"has-text-success fa fa-arrow-up\" @click=\"moveFieldUp(field, checkedFields[fieldKey - 1])\"></span>\n                        <span v-if=\"fieldKey !== checkedFields.length - 1\" class=\"fa fa-arrow-down\" @click=\"moveFieldDown(field, checkedFields[fieldKey + 1])\"></span>\n                        <!-- <span @mouseover=\"showDesc = !showDesc\">\n                          <checkbox v-if=\"field.type === 'textbox'\" v-model=\"field.sortable\" /> </span>\n                        <span v-if=\"showDesc && field.type === 'textbox'\" class=\"has-text-danger is-size-7\">Check if you want this field to be shown in the table</span> -->\n                        <span><checkbox v-if=\"(field.type  !== 'textarea') && field.listable\" v-model=\"field.listable\" /></span>\n                      </span>\n                    </li>\n                  </ul>\n                </div>\n                <br /><br />\n\n                <div>\n                  <label class=\"label\">Slug - <strong v-text=\"slug\"></strong></label>\n\n                  <div class=\"select\">\n                    <select v-model=\"slug\" placeholder=\"Select Column For Slug\">\n                      <option value=\"\" selected>Select Column For Slug</option>\n                      <option v-for=\"(field, fieldKey) in checkedFields\" :key=\"fieldKey\" v-if=\"field.checked && field.type === 'textbox'\">\n                        {{ field.name }}\n                      </option>\n                    </select>\n                  </div>\n\n                  <br /><br />\n                  <p>This will be used with :key to identify record.</p>\n                </div>\n              </div>\n              <div class=\"column\">\n                <label class=\"label\">Available fields</label>\n                <label class=\"label has-text-danger is-size-7\" v-if=\"fields.length\">Select the fields you want to include in your content type</label>\n                <div class=\"field is-grouped is-grouped-multiline\">\n                  <ul class=\"nav-preview\">\n                    <li class=\"control\" v-for=\"(field, fieldKey) in fields\" :key=\"fieldKey\">\n                      <span class=\"field\">\n                        <checkbox :label=\"field.name\" v-model=\"field.checked\" />\n                        <span class=\"link-actions\">\n                          <span class=\"has-text-danger fa fa-trash\" @click=\"callModal('del')\"></span>\n                          <modal class=\"modal\" @close=\"showModal.del = false\"  @confirmDeleteField='removeField(field)' v-if=\"showModal.del\" :kind=\"'deleteField'\" :header=\"'Are you sure you want do delete this content type?'\">\n                          <!-- Modal Slot - made for adding content type fields -->\n                          </modal>\n                          <router-link :to=\"'/admin/content/fieldEdit/' + field['.key']\"><span class=\"has-text-info fa fa-edit\"></span></router-link>\n                        </span>\n                      </span>\n                    </li>\n                  </ul>\n                </div>\n                <br>\n                <router-link to=\"/admin/content/fieldNew\" class=\"button is-info is-small\">Add new field</router-link>\n              </div>\n            </div>\n            <div class=\"buttons\">\n              <button v-if=\"selectedContent\" type=\"submit\" class=\"button is-success\" :disabled=\"!selectedContent.name || !checkedFields.length\" @click=\"createMenuItem(true)\">Edit</button>\n              <button v-else type=\"submit\" class=\"button is-success\" :disabled=\"!name || !checkedFields.length\" @click=\"createMenuItem(false)\">Create new</button>\n            </div>\n          </div>\n        </div>\n        <div class=\"column\">\n          <h2>Edit content type</h2>\n          <div class=\"box\" v-if=\"contentsLoaded\">\n            <div class=\"dropdown\" :class=\"{'is-active': dropdownActive}\" @click=\"toggleDropdown\">\n              <div class=\"dropdown-trigger\">\n                <button class=\"button\" aria-haspopup=\"true\" aria-controls=\"dropdown-menu\" style=\"min-width: 200px !important;\">\n                  <span>{{selectedContentType.label}}</span>\n                  <span class=\"icon is-small\">\n                    <i class=\"fa fa-angle-down\" aria-hidden=\"true\"></i>\n                  </span>\n                </button>\n              </div>\n              <div class=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n                <div class=\"dropdown-content\">\n                  <a class=\"dropdown-item\" v-if=\"option\" v-for=\"(option, optionKey) in createdContentTypes\" :key=\"optionKey\" @click=\"selectContentType(option)\">\n                    {{option.label ? option.label : null }}\n                  </a>\n                </div>\n              </div>\n            </div>\n            <button v-if=\"selectedContent\" type=\"submit\" class=\"button is-danger\" @click=\"deleteMenuItem()\">Delete</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport checkbox from '@/admin/components/shared/Checkbox'\nimport dropdown from '@/admin/components/shared/Dropdown'\nimport { contentsRef, fieldsRef } from '@/admin/firebase_config'\nimport notifier from '@/admin/mixins/notifier'\nimport modal from '@/admin/components/shared/Modal'\nimport { switchCase } from '@babel/types'\n\nexport default {\n  name: 'content-type',\n  mixins: [notifier],\n  firebase: {\n    contents: {\n      source: contentsRef,\n      readyCallback: function () {\n        // Load content types in select after content data loaded from firebase\n        this.loadContentTypes()\n      }\n    },\n    fields: fieldsRef\n  },\n  data () {\n    return {\n      name: '',\n      fieldTypes: [\n        {\n          id: 'textarea',\n          label: 'Textarea'\n        },\n        {\n          id: 'textbox',\n          label: 'Textbox'\n        },\n        {\n          id: 'integer',\n          label: 'Integer'\n        },\n        {\n          id: 'boolean',\n          label: 'Boolean'\n        },\n        {\n          id: 'url',\n          label: 'Url'\n        },\n        {\n          id: 'richtextbox',\n          label: 'Richtextbox'\n        },\n        {\n          id: 'tags',\n          label: 'Tags'\n        },\n        {\n          id: 'select',\n          label: 'Select'\n        },\n        {\n          id: 'image',\n          label: 'Image'\n        }\n      ],\n      contentFields: {\n        /* this obj will contain all new fields for Content\n        * every array contains its area objects (with names and etc.) */\n      },\n      slug: '',\n      showDesc: false,\n      createdContentTypes: null,\n      selectedContentType: {\n        id: '',\n        label: 'Select content type'\n      },\n      dropdownActive: false,\n      selectedContent: null,\n      contentsLoaded: false,\n      selectedContntFields: null,\n      showModal: { add: false, del: false }\n    }\n  },\n  created () {\n    this.clearChecked()\n    this.loadContentTypes()\n  },\n  computed: {\n    checkedFields () {\n      let fieldInContntType = false\n      if(!this.selectedContent){\n        return this.fields.filter(field => {\n          return field.checked\n        })\n      } else { \n        this.fields.filter(field => {\n          //going through every checked field and adding them into fields array of the selected content type if not allready present\n          if (field.checked){\n            this.selectedContntFields.forEach(element => {\n              if (field.name.toLowerCase() == element.name.toLowerCase()){\n                fieldInContntType = true\n              }\n            })\n            if(!fieldInContntType){\n              this.selectedContntFields.push(field)\n              fieldInContntType = false\n            }\n            fieldInContntType = false\n          }//going through every unchecked field and removing them from fields array of the selected content type if they are present \n          else if(!field.checked){\n            let removedIndex = undefined\n            this.selectedContntFields.forEach((element, index) => {\n              if (field.name.toLowerCase() == element.name.toLowerCase()){\n                fieldInContntType = true\n                if(removedIndex) {}\n                else {\n                  removedIndex = index\n                }\n              }\n            })\n            if(fieldInContntType){\n              this.selectedContntFields.splice(removedIndex,1)\n              fieldInContntType = false\n            }\n            fieldInContntType = false\n          }\n        })\n        return this.selectedContntFields\n      }\n    }\n  },\n  methods: {\n    callModal (type) {\n      switch (type) {\n        case 'add':\n          this.showModal.add = true\n          break\n        case 'del':\n          this.showModal.del = true\n          break\n        default:\n          break\n      }\n    },\n    addNewContentField (contentFieldArrParams) {\n      // contentFieldArrParams is arr that contains two elements 0 - name of Field 1 - type of Field\n      const fieldName = contentFieldArrParams[0]\n      const fieldType = contentFieldArrParams[1]\n      if (fieldName === '' || fieldType === '') return\n      // create arr for Field\n      this.contentFields[fieldType] = []\n      this.contentFields[fieldType].push({ name: fieldName })\n      this.showModal.add = false\n    },\n    deleteContentField (fieldType, index) {\n      this.contentFields[fieldType].splice(index, 1)\n    },\n    loadContentTypes () {\n      this.contentsLoaded = false\n      this.selectedContentType = {\n        id: '',\n        label: 'Select content type'\n      }\n      this.createdContentTypes = this.contents.map(content => {\n        return {\n          id: content['.key'],\n          label: content.name\n        }\n      })\n      this.createdContentTypes.push({ id: '', label: 'Select content type' })\n      this.contentsLoaded = true\n    },\n    createMenuItem (edit) {\n      let path\n      if (edit) {\n        path = this.selectedContent.name.toLowerCase()\n      } else {\n        path = this.name.toLowerCase()\n      }\n      path = path.replace(/^[, ]+|[, ]+$|[, ]+/g, '').trim()\n\n      let selectedFields = this.checkedFields.map(field => {\n        return Object.assign({\n          name: field.name,\n          type: field.type,\n          multiValue: field.multiValue\n        }, field.listable ? { listable: true } : null)\n      })\n\n      let item = {\n        name: this.name,\n        contentFields: this.contentFields,\n        slug: this.slug,\n        path: `/admin/content/${path}`,\n        icon: 'fa-file-text',\n        fields: selectedFields\n      }\n      if (edit) {\n        this.selectedContent.path = `/admin/content/${path}`\n        this.selectedContent.fields = selectedFields\n        this.selectedContent.slug = this.slug\n        let item = { ...this.selectedContent }\n        delete item['.key']\n        this.$firebaseRefs.contents.child(this.selectedContent['.key']).set(item).then(() => {\n          this.resetForm()\n          this.loadContentTypes()\n          this.showNotification('success', 'Content edited successfully')\n        })\n      } else {\n        this.$firebaseRefs.contents.push(item).then(() => {\n          this.loadContentTypes()\n          this.showNotification('success', 'Content type added successfully')\n          this.resetForm()\n        })\n      }\n    },\n    deleteMenuItem () {\n      this.$firebaseRefs.contents.child(this.selectedContent['.key']).remove()\n        .then(() => {\n          this.loadContentTypes()\n          this.showNotification('success', 'Content type removed successfully')\n        })\n    },\n    resetForm () {\n      this.name = ''\n      this.contentFields = {\n        textArea: []\n      }\n      this.slug = ''\n      this.selectedContent = null\n      for (var fieldKey in this.fields) {\n        this.fields[fieldKey].checked = false\n      }\n      for (var key in this.supports) {\n        this.supports[key] = false\n      }\n    },\n    addField (field) {\n      this.$firebaseRefs.fields.push(field).then(() => {\n        this.showNotification('success', 'Field added successfully')\n      })\n    },\n    editField (field, f) {\n      this.$firebaseRefs.fields.child(field['.key']).set(f).then(() => {\n        this.showNotification('success', 'Field edited successfully')\n      })\n    },\n    removeField (field) {\n      this.$firebaseRefs.fields.child(field['.key']).remove()\n        .then(() => {\n          this.showNotification('success', 'Field removed successfully')\n        })\n      this.showModal.del = false\n    },\n    moveFieldUp (field, previousField) {\n      let itemCopy = Object.assign({}, field)\n      let previousItemCopy = Object.assign({}, previousField)\n      let itemCopyIndex = 0\n      let previousItemCopyIndex = 0\n      let selectedContntKey = this.selectedContent['.key']\n      this.selectedContntFields.forEach((elem,index) => {\n        if(itemCopy.name.toLowerCase() === elem.name.toLowerCase()) {\n          itemCopyIndex = index\n        } \n        else if(previousItemCopy.name.toLowerCase() === elem.name.toLowerCase()) {\n          previousItemCopyIndex = index\n        } \n      })\n      this.selectedContntFields[itemCopyIndex] = previousItemCopy\n      this.selectedContntFields[previousItemCopyIndex] = itemCopy\n      this.$forceUpdate()\n    },\n    moveFieldDown (field, nextField) {\n      let itemCopy = Object.assign({}, field)\n      let nextItemCopy = Object.assign({}, nextField)\n      let itemCopyIndex = 0\n      let nextItemCopyIndex = 0\n      let selectedContntKey = this.selectedContent['.key']\n      this.selectedContntFields.forEach((elem,index) => {\n        if(itemCopy.name.toLowerCase() === elem.name.toLowerCase()) {\n          itemCopyIndex = index\n        } \n        else if(nextItemCopy.name.toLowerCase() === elem.name.toLowerCase()) {\n          nextItemCopyIndex = index\n        } \n      })\n      this.selectedContntFields[itemCopyIndex] = nextItemCopy\n      this.selectedContntFields[nextItemCopyIndex] = itemCopy\n      this.$forceUpdate()\n    },\n    clearChecked () {\n      for (var key in this.fields) {\n        delete this.fields[key]['checked']\n      }\n    },\n    selectContentType (option) {\n      if (option.id === '') return\n\n      this.selectedContentType = option\n      this.selectedContent = this.contents.filter(content => {\n        if (content.name === option.label) {\n          return content\n        }\n      })[0]\n      this.selectedContntFields = this.selectedContent.fields\n      this.slug = this.selectedContent.slug\n      this.clearChecked()\n      if (option.id) {\n        this.mapFields()\n      }\n    },\n    toggleDropdown () {\n      this.dropdownActive = !this.dropdownActive\n    },\n    mapFields () {\n      for (var j = 0; j < this.fields.length; j++) {\n        for (var i = 0; i < this.selectedContent.fields.length; i++) {\n          if (this.selectedContent.fields[i].name === this.fields[j].name) {\n            this.selectedContent.fields[i].checked = true\n            this.$set(this.fields[j], 'checked', true)\n          }\n        }\n      }\n    },\n    setAsSlug (column) {\n      this.slug = this.slug === column ? null : column\n    }\n  },\n  components: {\n    checkbox,\n    dropdown,\n    modal\n  }\n}\n\n</script>\n\n<style lang=\"scss\" scoped>\n.contentType {\n  .nav-preview {\n    padding-left: 15px;\n  }\n\n  .link-actions {\n    display: none;\n    span {\n      cursor: pointer;\n    }\n  }\n  .cursor-pointer {\n    cursor: pointer;\n  }\n\n  .nav-preview > li:hover .link-actions {\n    display: inline;\n  }\n\n  .modal {\n    z-index: 1024;\n  }\n}\n</style>\n"]}]}