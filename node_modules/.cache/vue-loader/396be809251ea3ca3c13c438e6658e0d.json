{"remainingRequest":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kognos/Documents/GitHub/ClutRWebsite/src/admin/pages/Routing.vue?vue&type=style&index=0&id=8bab7e94&lang=scss&scoped=true&","dependencies":[{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/src/admin/pages/Routing.vue","mtime":1565240946488},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/css-loader/index.js","mtime":1565232945271},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1565232945777},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/postcss-loader/src/index.js","mtime":1558705227897},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/sass-loader/lib/loader.js","mtime":1558705227962},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/vue-loader/lib/index.js","mtime":1565232945777}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.route-actions {\n  padding-left: 10px;\n  display: none;\n  span {\n    cursor: pointer;\n    padding-right: 5px;\n  }\n}\n\nli:hover .route-actions {\n  display: inline;\n}\n\n.route-details {\n  padding-left: 20px;\n  margin-bottom: 10px;\n}\n",{"version":3,"sources":["Routing.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"Routing.vue","sourceRoot":"src/admin/pages","sourcesContent":["<template>\n  <div class=\"container\">\n\n    <!-- notification -->\n    <transition mode=\"out-in\" name=\"fade\">\n      <div v-if=\"notification.message\" :class=\"'notification is-' + notification.type\">\n        <button class=\"delete\" @click=\"hideNotifications\"></button>{{notification.message}}\n      </div>\n    </transition>\n\n    <!-- routes builder -->\n    <h2>Routes Builder</h2>\n    <div class=\"box\">\n      <div class=\"columns\">\n\n        <!-- link form -->\n        <div class=\"column\">\n\n          <div class=\"field\">\n            <label class=\"label\">Path</label>\n            <div class=\"control\">\n              <input class=\"input\" type=\"text\" v-model=\"form.path\" placeholder=\"Ex: /path\">\n            </div>\n          </div>\n\n          <div class=\"field\">\n            <label class=\"label\">Template</label>\n            <div class=\"select is-fullwidth\">\n              <select v-model=\"form.template\">\n                <option v-for=\"(template, i) in templates\" :key=\"i\" :value=\"template.filename\">\n                  {{template.displayName}}\n                </option>\n              </select>\n            </div>\n          </div>\n\n          <div class=\"field\">\n            <label class=\"label\">Content type</label>\n            <div class=\"select is-fullwidth\">\n              <select v-model=\"form.contentType\">\n                <option v-for=\"(type, i) in contentTypes\" :key=\"i\" :value=\"type\">\n                  {{type}}\n                </option>\n                <option value=\"none\">No Content Type</option>\n              </select>\n            </div>\n          </div>\n\n          <div class=\"field\">\n            <label class=\"label\">Content</label>\n            <div class=\"select is-fullwidth\">\n              <select v-model=\"form.content\">\n                <option v-for=\"(content, i) in selectedContents\" :key=\"i\" :value=\"content['.key']\">\n                  {{ content['.key'] + (content['slugValue'] ? ` (${content['slugValue']})` : '')}}\n                </option>\n                <option value=\"none\">No Content</option>\n              </select>\n            </div>\n          </div>\n\n          <!-- buttons -->\n          <div class=\"field is-grouped\">\n            <div class=\"control\">\n              <button v-if=\"form.action === 'add'\" class=\"button is-info\" @click=\"addRoute\">\n                Add\n              </button>\n              <button v-if=\"form.action === 'update'\" class=\"button is-info\" @click=\"updateRoute\">\n                Update\n              </button>\n            </div>\n            <div class=\"control\">\n              <button class=\"button\" @click=\"clear\">Cancel</button>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"column\">\n          <!-- preserved routes list -->\n          <ul>\n            <h3 class=\"is-marginless\">Preserved routes:</h3>\n            <li v-for=\"(route, i) in defaultRoutes\" :key=\"i\">\n              <router-link :to=\"route\">{{route}}</router-link>\n            </li>\n          </ul>\n          <!-- dynamic routes list -->\n          <ul>\n            <h3>Dynamic routes:</h3>\n            <li v-for=\"(route, i) in routes\" :key=\"i\">\n              <b>Path: </b>\n              <a :href=\"route.path\" target=\"_blank\">{{route.path}}</a>\n\n              <span class=\"route-actions\">\n                <span class=\"has-text-danger fa fa-trash\" @click=\"deleteRoute(route['.key'])\"></span>\n                <span class=\"has-text-info fa fa-edit\" @click=\"editRoute(route)\"></span>\n              </span>\n\n              <div class=\"route-details\">\n                <span><b>Template:</b> {{getTemplateDisplayName(route.template)}} | </span>\n                <span><b>Content:</b> {{selectContentByTypeAndId(route.contentType, route.content)['.key'] || 'No Content'}}</span>\n              </div>\n            </li>\n          </ul>\n        </div>\n\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { contentsRef, routesRef } from '@/admin/firebase_config'\nimport notifier from '@/admin/mixins/notifier'\nimport templates from '@/app/templates/templates.json'\n\nexport default {\n  data () {\n    return {\n      form: {\n        path: '/',\n        template: templates[0].filename,\n        contentType: 'none',\n        content: 'none',\n        action: 'add',\n        key: ''\n      },\n      defaultRoutes: ['/', '/admin', '/login'],\n      templates\n    }\n  },\n  firebase: {\n    contents: contentsRef,\n    routes: routesRef\n  },\n  computed: {\n    contentTypes () {\n      return this.contents.map(content => {\n        return content.name\n      })\n    },\n    selectedContents () {\n      return this.getContentsByType(this.form.contentType)\n    }\n  },\n  mixins: [notifier],\n  methods: {\n    selectContentByTypeAndId (type, id) {\n      let contentsByType = this.getContentsByType(type)\n      return contentsByType.filter(content => content['.key'] === id)[0] || {}\n    },\n    addRoute () {\n      if (this.isPathAvailable(this.form.path)) {\n        this.$firebaseRefs.routes.push({\n          path: this.form.path.trim(),\n          template: this.form.template,\n          contentType: this.form.contentType,\n          content: this.form.content\n        })\n          .then((res) => {\n            let template = this.form.template\n            this.showNotification('success', 'Route added successfully')\n            this.$router.addRoutes([{\n              path: this.form.path,\n              component: () => import(`@/app/templates/${template}.vue`)\n            }])\n            this.clear()\n          })\n          .catch(err => {\n            console.log(err)\n          })\n      } else {\n        this.showNotification('danger', 'A route with the same path already exists')\n      }\n    },\n    editRoute (route) {\n      this.form.content = route.content\n      this.form.template = route.template\n      this.form.contentType = route.contentType\n      this.form.path = route.path\n      this.form.action = 'update'\n      this.form.key = route['.key']\n    },\n    updateRoute () {\n      this.$firebaseRefs.routes.child(this.form.key).set({\n        content: this.form.content,\n        path: this.form.path.trim(),\n        template: this.form.template,\n        contentType: this.form.contentType\n      })\n        .then(() => {\n          let template = this.form.template\n          this.showNotification('success', 'Route Updated successfully')\n          this.$router.addRoutes([{\n            path: this.form.path,\n            component: () => import(`@/app/templates/${template}.vue`)\n          }])\n          this.clear()\n        })\n    },\n    deleteRoute (key) {\n      this.$firebaseRefs.routes.child(key).remove()\n        .then(() => {\n          this.showNotification('success', 'Route deleted successfully')\n        })\n    },\n    clear () {\n      this.form.key = ''\n      this.form.path = '/'\n      this.form.content = ''\n      this.form.template = templates[0].filename\n      this.form.action = 'add'\n    },\n    isPathAvailable (path) {\n      let existingPaths = this.routes.map(route => {\n        return route.path\n      })\n      existingPaths = existingPaths.concat(this.defaultRoutes)\n      return !existingPaths.includes(this.form.path.trim())\n    },\n    getTemplateDisplayName (filename) {\n      let displayName = ''\n      templates.forEach(template => {\n        displayName = template.filename === filename ? template.displayName : displayName\n      })\n      return displayName\n    },\n    getContentsByType (contentType) {\n      let selectedContentsData = []\n      let selectedContents = this.contents.filter(content => {\n        return content.name === contentType\n      })\n      selectedContents.forEach(content => {\n        let contentDataArray = this.convertContentDataToArray(content.data, content.slug)\n        selectedContentsData = selectedContentsData.concat(contentDataArray || [])\n      })\n      return selectedContentsData\n    },\n    convertContentDataToArray (contentData, slug) {\n      let contentDataArray = []\n      for (let key in contentData) {\n        contentDataArray.push({\n          ...contentData[key],\n          slugValue: slug ? contentData[key][slug] : '',\n          '.key': key\n        })\n      }\n      return contentDataArray\n    }\n  },\n  watch: {\n    form: {\n      deep: true,\n      handler () {\n        if (this.form.contentType === 'none') {\n          this.form.content = 'none'\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.route-actions {\n  padding-left: 10px;\n  display: none;\n  span {\n    cursor: pointer;\n    padding-right: 5px;\n  }\n}\n\nli:hover .route-actions {\n  display: inline;\n}\n\n.route-details {\n  padding-left: 20px;\n  margin-bottom: 10px;\n}\n</style>\n"]}]}