{"remainingRequest":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kognos/Documents/GitHub/ClutRWebsite/src/admin/pages/content/fields/FieldEdit.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/src/admin/pages/content/fields/FieldEdit.vue","mtime":1565240946488},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/babel-loader/lib/index.js","mtime":1558705227210},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/vue-loader/lib/index.js","mtime":1565232945777}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport checkbox from '@/admin/components/shared/Checkbox'\nimport dropdown from '@/admin/components/shared/Dropdown'\nimport { contentsRef, fieldsRef } from '@/admin/firebase_config'\nimport notifier from '@/admin/mixins/notifier'\nexport default {\n  name: 'fieldEdit',\n  mixins: [notifier],\n  firebase: {\n    contents: contentsRef,\n    fields: fieldsRef\n  },\n  data () {\n    return {\n      field: null,\n      multiValue: false,\n      listable: false,\n      fieldType: {\n        id: '',\n        label: 'Field type'\n      },\n      fieldTypes: [\n        {\n          id: 'textarea',\n          label: 'Textarea'\n        },\n        {\n          id: 'textbox',\n          label: 'Textbox'\n        },\n        {\n          id: 'integer',\n          label: 'Integer'\n        },\n        {\n          id: 'boolean',\n          label: 'Boolean'\n        },\n        {\n          id: 'url',\n          label: 'Url'\n        },\n        {\n          id: 'richtextbox',\n          label: 'Richtextbox'\n        },\n        {\n          id: 'tags',\n          label: 'Tags'\n        },\n        {\n          id: 'select',\n          label: 'Select'\n        },\n        {\n          id: 'image',\n          label: 'Image'\n        }\n      ]\n    }\n  },\n  props: ['edit-field'],\n  created () {\n    this.field = Object.assign(\n      {},\n      (this.fields.filter((field) => {\n        return (field['.key'] === this.$route.params.key)\n      }))[0]\n    )\n    this.fieldType.id = this.field.type\n    this.fieldType.label = this.field.type.charAt(0).toUpperCase() + this.field.type.slice(1)\n  },\n  methods: {\n    edit () {\n      let f = {\n        name: this.field.name,\n        type: this.fieldType.id,\n        multiValue: this.field.multiValue,\n        listable: this.field.listable\n      }\n      if(f.listable && f.type ===  'textarea') {\n        this.$notify({\n          title: 'Important message',\n          text: 'Field type must be other than \\'textarea\\' to apply sorting',\n          type: 'error'\n        })\n        return\n      }\n      this.editField(this.field, f)\n      this.$router.push({ path: '/admin/content' })\n    }\n  },\n  components: {\n    checkbox,\n    dropdown\n  }\n}\n\n",{"version":3,"sources":["FieldEdit.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"FieldEdit.vue","sourceRoot":"src/admin/pages/content/fields","sourcesContent":["<template>\n  <div class=\"container is-widescreen\">\n\n    <h3 class=\"is-size-3 has-text-centered\">Edit content field</h3><br>\n    <div class=\"box\">\n      <div class=\"columns\">\n        <div class=\"column is-one-third\">\n          <div class=\"field\">\n            <label class=\"label\">Field name</label>\n            <div class=\"control\">\n              <input class=\"input\" type=\"text\" placeholder=\"Field name\" v-model=\"field.name\">\n            </div>\n          </div>\n          <div class=\"field\">\n            <label class=\"label\">Field type</label>\n            <div class=\"control\">\n              <dropdown :options=\"fieldTypes\" :selectedElement=\"fieldType\" />\n            </div>\n          </div>\n          <div class=\"field\">\n            <label class=\"label\">Multi value allowed</label>\n            <div class=\"control\">\n              <checkbox v-model=\"field.multiValue\" />\n            </div>\n            <label class=\"label\">Listable</label>\n            <div class=\"control\">\n              <checkbox v-model=\"field.listable\" />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"buttons\">\n        <button type=\"submit\" class=\"button is-success\" :disabled=\"field.name === '' || field.type === ''\" @click=\"edit()\">Edit field</button>\n        <router-link to=\"/admin/content\" class=\"button is-danger\">Cancel</router-link>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport checkbox from '@/admin/components/shared/Checkbox'\nimport dropdown from '@/admin/components/shared/Dropdown'\nimport { contentsRef, fieldsRef } from '@/admin/firebase_config'\nimport notifier from '@/admin/mixins/notifier'\nexport default {\n  name: 'fieldEdit',\n  mixins: [notifier],\n  firebase: {\n    contents: contentsRef,\n    fields: fieldsRef\n  },\n  data () {\n    return {\n      field: null,\n      multiValue: false,\n      listable: false,\n      fieldType: {\n        id: '',\n        label: 'Field type'\n      },\n      fieldTypes: [\n        {\n          id: 'textarea',\n          label: 'Textarea'\n        },\n        {\n          id: 'textbox',\n          label: 'Textbox'\n        },\n        {\n          id: 'integer',\n          label: 'Integer'\n        },\n        {\n          id: 'boolean',\n          label: 'Boolean'\n        },\n        {\n          id: 'url',\n          label: 'Url'\n        },\n        {\n          id: 'richtextbox',\n          label: 'Richtextbox'\n        },\n        {\n          id: 'tags',\n          label: 'Tags'\n        },\n        {\n          id: 'select',\n          label: 'Select'\n        },\n        {\n          id: 'image',\n          label: 'Image'\n        }\n      ]\n    }\n  },\n  props: ['edit-field'],\n  created () {\n    this.field = Object.assign(\n      {},\n      (this.fields.filter((field) => {\n        return (field['.key'] === this.$route.params.key)\n      }))[0]\n    )\n    this.fieldType.id = this.field.type\n    this.fieldType.label = this.field.type.charAt(0).toUpperCase() + this.field.type.slice(1)\n  },\n  methods: {\n    edit () {\n      let f = {\n        name: this.field.name,\n        type: this.fieldType.id,\n        multiValue: this.field.multiValue,\n        listable: this.field.listable\n      }\n      if(f.listable && f.type ===  'textarea') {\n        this.$notify({\n          title: 'Important message',\n          text: 'Field type must be other than \\'textarea\\' to apply sorting',\n          type: 'error'\n        })\n        return\n      }\n      this.editField(this.field, f)\n      this.$router.push({ path: '/admin/content' })\n    }\n  },\n  components: {\n    checkbox,\n    dropdown\n  }\n}\n\n</script>\n\n<style>\n</style>\n"]}]}