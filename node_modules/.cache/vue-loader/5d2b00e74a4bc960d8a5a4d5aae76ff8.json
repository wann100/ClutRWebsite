{"remainingRequest":"/Users/kognos/Documents/GitHub/tamiat/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kognos/Documents/GitHub/tamiat/src/admin/pages/content/contents/ContentsEdit.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/kognos/Documents/GitHub/tamiat/src/admin/pages/content/contents/ContentsEdit.vue","mtime":1565240946487},{"path":"/Users/kognos/Documents/GitHub/tamiat/node_modules/css-loader/index.js","mtime":1565232945271},{"path":"/Users/kognos/Documents/GitHub/tamiat/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1565232945777},{"path":"/Users/kognos/Documents/GitHub/tamiat/node_modules/postcss-loader/src/index.js","mtime":1558705227897},{"path":"/Users/kognos/Documents/GitHub/tamiat/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/tamiat/node_modules/vue-loader/lib/index.js","mtime":1565232945777}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.tagscontainer {\n  border: 2px solid #f2f2f2;\n  border-radius: 5px;\n  padding: 5px;\n}\n.pointer {\n  cursor: pointer;\n}\n",{"version":3,"sources":["ContentsEdit.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ContentsEdit.vue","sourceRoot":"src/admin/pages/content/contents","sourcesContent":["<template>\n  <div class=\"box\">\n    <div class=\"columns\">\n\n      <div class=\"column is-two-thirds\">\n\n        <!-- Textbox fields -->\n        <div class=\"field\" v-for=\"(field, index) in fields\" :key=\"index\" v-if=\"field.type === 'textbox'\">\n          <label class=\"label\">{{ field.name }}</label>\n          <div class=\"control\">\n            <input type=\"text\" class=\"input\" maxlength=\"25\" required :placeholder=\"field.name\" v-model=\"content[field.name]\">\n          </div>\n        </div>\n\n        <!-- Textarea fields -->\n        <div class=\"field\" v-for=\"(field, index) in fields\" :key=\"index\" v-if=\"field.type === 'textarea'\">\n          <label class=\"label\">{{ field.name }}</label>\n          <div class=\"control\">\n            <textarea class=\"input\" v-model=\"content[field.name]\" :placeholder=\"field.name\" v-text=\"content[field.name]\"></textarea>\n          </div>\n        </div>\n\n        <!-- Rich text fields - vue-quill-editor plugin -->\n        <div v-for=\"(field, index) in fields\" :key=\"index\" v-if=\"field.type === 'richtextbox'\">\n          <quill-editor v-model=\"content[field.name]\" :options=\"editorOptions\">\n          </quill-editor>\n          <input type=\"file\" id=\"getImage\" style=\"display: none;\" @change=\"uploadImage\">\n        </div>\n\n        <!-- Category (select) fields -->\n        <br>\n        <div class=\"field\" v-for=\"(field, index) in fields\" :key=\"index\" v-if=\"field.type === 'select'\">\n          <label class=\"label\">{{ field.name }}</label>\n          <div class=\"columns\">\n            <div class=\"column\">\n              <div class=\"select margin-select\">\n                <select v-model=\"content[field.name].selected\">\n                  <option v-for=\"(selectOption, selectIndex) in content[field.name].options\" :key=\"selectIndex\">{{ selectOption }}</option>\n                </select>\n              </div>\n            </div>\n            <div class=\"column\">\n              <!--area to delete options-->\n              <div v-for=\"(option, optionKey) in content[field.name].options\" :key=\"optionKey\" >\n                <span @click=\"removeTag(optionKey, field.name, true)\" class=\"tag is-info pointer\">{{option}}\n                <button class=\"delete is-small\"></button>\n              </span>\n              </div>\n            </div>\n          </div>\n          <!--area to enter options-->\n          <div class=\"control\">\n            <input type=\"text\" class=\"input\" :placeholder=\"field.name\" @blur=\"styleOptions(field.name)\" @keyup.enter=\"styleOptions(field.name)\" v-model=\"selectOptionsRow\" maxlength=\"25\">\n          </div>\n          <p>Separate options with commas</p>\n        </div>\n\n        <!-- Integer fields -->\n        <br>\n        <div class=\"field\" v-for=\"(field, index) in fields\" :key=\"index\" v-if=\"field.type === 'integer'\">\n          <label class=\"label\">{{ field.name }}</label>\n          <div class=\"columns\">\n            <div class=\"column is-one-third\">\n              <input type=\"number\" :placeholder=\"field.name\" class=\"input\" v-model=\"content[field.name]\">\n            </div>\n          </div>\n        </div>\n\n        <!-- Boolean fields -->\n        <br>\n        <div class=\"field\" v-for=\"(field, index) in fields\" :key=\"index\" v-if=\"field.type === 'boolean'\">\n          <label class=\"label\">{{ field.name }}</label>\n          <div class=\"columns\">\n            <div class=\"column is-one-third\">\n              <span>Name</span>\n              <input :placeholder=\"field.name + ' name'\" class=\"input\" v-model=\"content.bool\">\n            </div>\n          </div>\n          <div class=\"columns\">\n            <div class=\"column\">\n              <label class=\"checkbox\">\n                <input type=\"checkbox\">\n                {{ content.bool }}\n              </label>\n            </div>\n          </div>\n        </div>\n\n        <!-- Url fields -->\n        <br>\n        <div class=\"field\" v-for=\"(field, index) in fields\" :key=\"index\" v-if=\"field.type === 'url'\">\n          <label class=\"label\">{{ field.name }}</label>\n          <div class=\"columns\">\n            <div class=\"column is-two-fifths\">\n              <span>Name</span>\n              <input :placeholder=\"field.name + ' name'\" class=\"input\" v-model=\"content[field.name].name\">\n            </div>\n            <div class=\"column is-two-fifths\">\n              <span>Link</span>\n              <input :placeholder=\"field.name + ' link'\" class=\"input\" v-model=\"content[field.name].link\">\n            </div>\n          </div>\n          <div class=\"columns\">\n            <div class=\"column\">\n              <span>Preview: </span>\n              <a :href=\"content[field.name].link\">{{ content[field.name].name }}</a>\n            </div>\n          </div>\n        </div>\n        <!---->\n      </div>\n\n      <!-- Right sidebar -->\n      <div class=\"column is-one-third\">\n\n        <!-- Tag fields -->\n        <div class=\"field\" v-for=\"(field, index) in fields\" :key=\"index\" v-if=\"field.type === 'tags'\">\n          <label class=\"label\">{{ field.name }}</label>\n          <div class=\"control\">\n            <div class=\"tags tagscontainer\">\n              <span @click=\"removeTag(tagKey, field.name)\" v-for=\"(tag, tagKey) in content[field.name]\" :key=\"tagKey\" class=\"tag is-info pointer\">{{tag}}\n                <button class=\"delete is-small\"></button>\n              </span>\n              <input :placeholder=\"field.name\" @blur=\"styleTags(field.name)\" @keyup.enter=\"styleTags(field.name)\" type=\"text\" class=\"input\" maxlength=\"25\" v-model=\"inputData\">\n            </div>\n            <p>Separate tags with commas</p>\n          </div>\n        </div>\n\n        <!-- Image fields -->\n        <div class=\"field\" v-for=\"(field, index) in fields\" :key=\"index\" v-if=\"field.type === 'image'\">\n          <label class=\"label\">{{ field.name }}</label>\n          <div class=\"control\">\n            <img :src=\"content[field.name]\">\n            <div class=\"file\">\n              <label class=\"file-label\">\n                <input @change=\"uploadFeaturedImage($event, field.name)\" class=\"file-input\" type=\"file\" name=\"resume\">\n                <span class=\"file-cta\">\n                  <span class=\"file-icon\">\n                    <i class=\"fa fa-upload\"></i>\n                  </span>\n                  <span class=\"file-label\">\n                    Choose a fileâ€¦\n                  </span>\n                </span>\n              </label>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- notification -->\n    <div v-if=\"notification.message\" :class=\"'notification is-' + notification.type\">\n      <button class=\"delete\" @click=\"hideNotifications\"></button>{{notification.message}}\n    </div>\n\n    <!-- the form buttons -->\n    <button v-if=\"content.state === 'saved'\" type=\"submit\" class=\"button is-success\" @click=\"update(true)\">Update and publish</button>\n    <button type=\"submit\" class=\"button is-info\" @click=\"update(false)\">Update</button>\n    <router-link :to=\"'/admin/content/' + $route.params.key\" class=\"button is-danger\">Cancel</router-link>\n  </div>\n</template>\n\n<script>\nimport firebase from 'firebase/app'\nimport 'firebase/storage'\n\nimport { mediaRef } from '@/admin/firebase_config'\nimport editorOptions from '@/admin/utils/editor-options'\nimport imageLoader from '@/admin/mixins/image-loader'\nimport notifier from '@/admin/mixins/notifier'\n\nexport default {\n  name: 'content-edit',\n  data () {\n    return {\n      /* Here we are filtering out the post containing the provided key in the router params\n       * we are using Object.assign to copy the post by value not by reference\n       * to prevent updating the post when typing */\n      inputData: '',\n      select: {\n        selected:'',\n        options:[]\n      },\n      selectOptionsRow: '',\n      content: Object.assign(\n        {},\n        (this.contents.filter((c) => {\n          return (c['.key'] === this.$route.params.contentKey)\n        }))[0]\n      ),\n      editorOptions\n    }\n  },\n  firebase: {\n    media: mediaRef\n  },\n  props: ['contents', 'update-content', 'fields'],\n  mixins: [imageLoader, notifier],\n  methods: {\n    update (publish) {\n      if (publish) {\n        this.content.state = 'published'\n      }\n      this.updateContent(this.content)\n    },\n    uploadFeaturedImage (e) {\n      let file = e.target.files[0]\n      let storageRef = firebase.storage().ref('images/' + file.name)\n\n      storageRef.put(file).then((snapshot) => {\n        snapshot.ref.getDownloadURL().then(downloadURL => {\n          this.content.img = downloadURL\n          if (Object.values(this.media).find(e => e.path === snapshot.ref.fullPath)) return // this prevents duplicate entries in the media object\n          this.$firebaseRefs.media.push({\n            src: downloadURL,\n            path: snapshot.ref.fullPath,\n            name: snapshot.metadata.name\n          })\n        })\n      })\n    },\n    styleTags (fieldName) {\n      if (this.inputData !== '') {\n        if (!this.content[fieldName]) {\n          this.content[fieldName] = []\n        }\n        this.inputData.split(',').forEach(tag => {\n          this.content[fieldName].push(`${tag.trim()}`)\n        })\n        this.inputData = ''\n      }\n    },\n    removeTag (index, fieldName, isSelect) {\n       // function to remove tags and options\n      // cloning object (to make Vue reactive)\n      let currentContent = Object.assign({}, this.content)\n      if(isSelect) {\n        // delete element from select options\n        currentContent[fieldName].options.splice(index, 1)\n      } else {\n        // delete element from arr\n        currentContent[fieldName].splice(index, 1)\n      }\n      // return cloned object Back\n      this.content = Object.assign({}, currentContent)\n    },\n    updateBoolContent (fieldName) {\n      if (this.booleanName !== '') {\n        if (!this.content[fieldName]) {\n          this.content[fieldName] = ''\n        }\n        this.content[fieldName] = this.booleanName\n      }\n    },\n    // function to create Select Options from input area\n    styleOptions (fieldName) {\n      if (this.selectOptionsRow !== '') {\n        if (!this.content[fieldName]) {\n          this.content[fieldName] = this.select\n        }\n        this.selectOptionsRow.split(',').forEach(tag => {\n          this.select.options.push(`${tag.trim()}`)\n        })\n        this.content[fieldName].options ? [...this.content[fieldName].options, ...this.select.options] : [...this.select.options]\n\n        this.selectOptionsRow = ''\n      }\n    }\n    \n  }\n}\n\n</script>\n<style>\n.tagscontainer {\n  border: 2px solid #f2f2f2;\n  border-radius: 5px;\n  padding: 5px;\n}\n.pointer {\n  cursor: pointer;\n}\n</style>\n"]}]}