{"remainingRequest":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kognos/Documents/GitHub/ClutRWebsite/src/admin/pages/settings/NavBuilder.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/src/admin/pages/settings/NavBuilder.vue","mtime":1565240946489},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/babel-loader/lib/index.js","mtime":1558705227210},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/node_modules/vue-loader/lib/index.js","mtime":1565232945777}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { settingsRef, navRef } from '@/admin/firebase_config'\nexport default {\n  data () {\n    return {\n      key: '',\n      link: '', // {'.key', name, path}\n      name: '',\n      path: '',\n      action: 'new'\n    }\n  },\n  computed: {\n    isAbsolute () {\n      return this.path.startsWith('http')\n    }\n  },\n  firebase: {\n    settings: {\n      source: settingsRef,\n      asObject: true\n    },\n    menu: {\n      source: navRef\n    }\n  },\n  methods: {\n    addLink () {\n      if (this.name && this.path) {\n        this.$firebaseRefs.menu.push({\n          name: this.name,\n          path: this.path,\n          isAbsolute: this.isAbsolute\n        })\n      }\n      this.clear()\n    },\n    editLink (link) {\n      this.name = link.name\n      this.path = link.path\n      this.action = 'edit'\n      this.key = link['.key']\n      this.link = Object.assign({}, link)\n    },\n    updateLink () {\n      delete this.link['.key']\n      this.link.name = this.name\n      this.link.path = this.path\n      this.link.isAbsolute = this.isAbsolute\n\n      this.$firebaseRefs.menu.child(this.key).set(this.link)\n      this.clear()\n    },\n    removeLink (item) {\n      this.$firebaseRefs.menu.child(item['.key']).remove()\n    },\n    clear () {\n      this.name = ''\n      this.path = ''\n      this.action = 'new'\n    },\n    moveLinkUp (item, previousItem) {\n      let itemCopy = Object.assign({}, item)\n      let previousItemCopy = Object.assign({}, previousItem)\n\n      delete itemCopy['.key']\n      delete previousItemCopy['.key']\n\n      this.$firebaseRefs.menu.child(item['.key']).set(previousItemCopy)\n      this.$firebaseRefs.menu.child(previousItem['.key']).set(itemCopy)\n    },\n    moveLinkDown (item, nextItem) {\n      let itemCopy = Object.assign({}, item)\n      let nextItemCopy = Object.assign({}, nextItem)\n\n      delete itemCopy['.key']\n      delete nextItemCopy['.key']\n\n      this.$firebaseRefs.menu.child(item['.key']).set(nextItemCopy)\n      this.$firebaseRefs.menu.child(nextItem['.key']).set(itemCopy)\n    },\n    addSubLink (link) {\n      this.action = 'new-sub'\n      this.key = link['.key']\n    },\n    appendSubLink () {\n      this.$firebaseRefs.menu.child(this.key).child('children').push({\n        name: this.name,\n        path: this.path,\n        isAbsolute: this.isAbsolute\n      })\n      this.clear()\n    },\n    moveSubLinkUp (currentKey, parent) {\n      let childrenObject = {}\n      let childrenArray = this.convertFirebaseObjToArray(parent.children)\n      let previousKey = ''\n\n      for (let i = 0; i < childrenArray.length; i++) {\n        if (childrenArray[i]['.key'] === currentKey) {\n          previousKey = childrenArray[i - 1]['.key']\n\n          childrenObject[previousKey] = { ...childrenArray[i] }\n          childrenObject[currentKey] = { ...childrenArray[i - 1] }\n\n          delete childrenObject[previousKey]['.key']\n          delete childrenObject[currentKey]['.key']\n        } else {\n          childrenObject[childrenArray[i]['.key']] = { ...childrenArray[i] }\n          delete childrenObject[childrenArray[i]['.key']]['.key']\n        }\n      }\n\n      this.$firebaseRefs.menu.child(parent['.key']).child('children').set(childrenObject)\n    },\n    moveSubLinkDown (currentKey, parent) {\n      let childrenObject = {}\n      let childrenArray = this.convertFirebaseObjToArray(parent.children)\n      let nextKey = ''\n\n      for (let i = childrenArray.length - 1; i >= 0; i--) {\n        if (childrenArray[i]['.key'] === currentKey) {\n          nextKey = childrenArray[i + 1]['.key']\n\n          childrenObject[nextKey] = { ...childrenArray[i] }\n          childrenObject[currentKey] = { ...childrenArray[i + 1] }\n\n          delete childrenObject[nextKey]['.key']\n          delete childrenObject[currentKey]['.key']\n        } else {\n          childrenObject[childrenArray[i]['.key']] = { ...childrenArray[i] }\n          delete childrenObject[childrenArray[i]['.key']]['.key']\n        }\n      }\n\n      this.$firebaseRefs.menu.child(parent['.key']).child('children').set(childrenObject)\n    },\n    convertFirebaseObjToArray (obj) {\n      let array = []\n      for (let key in obj) {\n        array.push({ '.key': key, ...obj[key] })\n      }\n      return array\n    },\n    removeSubLink (key, parent) {\n      this.$firebaseRefs.menu.child(parent['.key']).child('children').child(key).remove()\n    },\n    editSubLink (key, parent) {\n      this.name = parent.children[key].name\n      this.path = parent.children[key].path\n      this.action = 'edit-sub'\n      this.key = key\n      this.link = Object.assign({}, parent)\n    },\n    updateSubLink () {\n      this.$firebaseRefs.menu.child(this.link['.key']).child('children').child(this.key).update({\n        name: this.name,\n        path: this.path,\n        isAbsolute: this.isAbsolute\n      })\n    }\n  }\n}\n",{"version":3,"sources":["NavBuilder.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"NavBuilder.vue","sourceRoot":"src/admin/pages/settings","sourcesContent":["<template>\n  <div class=\"nav-builder\">\n    <!-- navigation menu builder -->\n    <h3 class=\"is-size-3\">Navigation Menu Builder</h3>\n    <div class=\"box\">\n      <div class=\"columns\">\n\n        <!-- link form -->\n        <div class=\"column\">\n          <div class=\"field\">\n            <label class=\"label\">Name</label>\n            <div class=\"control\">\n              <input class=\"input\" type=\"text\" placeholder=\"Name (ex: Posts)\" v-model=\"name\">\n            </div>\n          </div>\n          <div class=\"field\">\n            <label class=\"label\">Path</label>\n            <div class=\"control\">\n              <input class=\"input\" type=\"text\" placeholder=\"Path (ex: /admin/posts)\" v-model=\"path\">\n            </div>\n          </div>\n          <div class=\"field is-grouped\">\n            <div class=\"control\">\n              <button v-if=\"action === 'new'\" class=\"button is-info\" @click=\"addLink\">Add</button>\n              <button v-if=\"action === 'edit'\" class=\"button is-info\" @click=\"updateLink\">\n                Update\n              </button>\n              <button v-if=\"action === 'new-sub'\" class=\"button is-info\" @click=\"appendSubLink\">\n                Add sub-link\n              </button>\n              <button v-if=\"action === 'edit-sub'\" class=\"button is-info\" @click=\"updateSubLink\">\n                Edit sub-link\n              </button>\n            </div>\n            <div class=\"control\">\n              <button class=\"button\" @click=\"clear\">Cancel</button>\n            </div>\n          </div>\n        </div>\n\n        <!-- menu visualization -->\n        <div class=\"column\">\n          <p class=\"is-size-4\">menu</p>\n          <ul v-for=\"(item, index) in menu\" :key=\"index\" class=\"nav-preview\">\n            <li>\n              {{item.name}}: {{item.path}}\n\n              <span class=\"link-actions\">\n                <span class=\"has-text-danger fa fa-trash\" @click=\"removeLink(item)\"></span>\n                <span v-if=\"index !== 0\" class=\"has-text-success fa fa-arrow-up\" @click=\"moveLinkUp(item, menu[index - 1])\"></span>\n                <span v-if=\"index !== menu.length - 1\" class=\"fa fa-arrow-down\" @click=\"moveLinkDown(item, menu[index + 1])\"></span>\n                <span class=\"has-text-info fa fa-edit\" @click=\"editLink(item)\"></span>\n                <span class=\"has-text-primary fa fa-plus\" @click=\"addSubLink(item)\"></span>\n              </span>\n\n              <!-- render children links -->\n              <ul v-if=\"item.children\" class=\"sub-nav-preview\">\n                <li v-for=\"(child, key) in item.children\" :key=\"key\">\n                  {{child.name}}: {{child.path}}\n\n                  <span class=\"sub-link-actions\">\n                    <span class=\"has-text-danger fa fa-trash\" @click=\"removeSubLink(key, item)\"></span>\n                    <span class=\"has-text-success fa fa-arrow-up\" @click=\"moveSubLinkUp(key, item)\"></span>\n                    <span class=\"fa fa-arrow-down\" @click=\"moveSubLinkDown(key, item)\"></span>\n                    <span class=\"has-text-info fa fa-edit\" @click=\"editSubLink(key, item)\"></span>\n                  </span>\n                </li>\n              </ul>\n            </li>\n          </ul>\n        </div>\n\n      </div>\n\n    </div>\n  </div>\n</template>\n\n<script>\nimport { settingsRef, navRef } from '@/admin/firebase_config'\nexport default {\n  data () {\n    return {\n      key: '',\n      link: '', // {'.key', name, path}\n      name: '',\n      path: '',\n      action: 'new'\n    }\n  },\n  computed: {\n    isAbsolute () {\n      return this.path.startsWith('http')\n    }\n  },\n  firebase: {\n    settings: {\n      source: settingsRef,\n      asObject: true\n    },\n    menu: {\n      source: navRef\n    }\n  },\n  methods: {\n    addLink () {\n      if (this.name && this.path) {\n        this.$firebaseRefs.menu.push({\n          name: this.name,\n          path: this.path,\n          isAbsolute: this.isAbsolute\n        })\n      }\n      this.clear()\n    },\n    editLink (link) {\n      this.name = link.name\n      this.path = link.path\n      this.action = 'edit'\n      this.key = link['.key']\n      this.link = Object.assign({}, link)\n    },\n    updateLink () {\n      delete this.link['.key']\n      this.link.name = this.name\n      this.link.path = this.path\n      this.link.isAbsolute = this.isAbsolute\n\n      this.$firebaseRefs.menu.child(this.key).set(this.link)\n      this.clear()\n    },\n    removeLink (item) {\n      this.$firebaseRefs.menu.child(item['.key']).remove()\n    },\n    clear () {\n      this.name = ''\n      this.path = ''\n      this.action = 'new'\n    },\n    moveLinkUp (item, previousItem) {\n      let itemCopy = Object.assign({}, item)\n      let previousItemCopy = Object.assign({}, previousItem)\n\n      delete itemCopy['.key']\n      delete previousItemCopy['.key']\n\n      this.$firebaseRefs.menu.child(item['.key']).set(previousItemCopy)\n      this.$firebaseRefs.menu.child(previousItem['.key']).set(itemCopy)\n    },\n    moveLinkDown (item, nextItem) {\n      let itemCopy = Object.assign({}, item)\n      let nextItemCopy = Object.assign({}, nextItem)\n\n      delete itemCopy['.key']\n      delete nextItemCopy['.key']\n\n      this.$firebaseRefs.menu.child(item['.key']).set(nextItemCopy)\n      this.$firebaseRefs.menu.child(nextItem['.key']).set(itemCopy)\n    },\n    addSubLink (link) {\n      this.action = 'new-sub'\n      this.key = link['.key']\n    },\n    appendSubLink () {\n      this.$firebaseRefs.menu.child(this.key).child('children').push({\n        name: this.name,\n        path: this.path,\n        isAbsolute: this.isAbsolute\n      })\n      this.clear()\n    },\n    moveSubLinkUp (currentKey, parent) {\n      let childrenObject = {}\n      let childrenArray = this.convertFirebaseObjToArray(parent.children)\n      let previousKey = ''\n\n      for (let i = 0; i < childrenArray.length; i++) {\n        if (childrenArray[i]['.key'] === currentKey) {\n          previousKey = childrenArray[i - 1]['.key']\n\n          childrenObject[previousKey] = { ...childrenArray[i] }\n          childrenObject[currentKey] = { ...childrenArray[i - 1] }\n\n          delete childrenObject[previousKey]['.key']\n          delete childrenObject[currentKey]['.key']\n        } else {\n          childrenObject[childrenArray[i]['.key']] = { ...childrenArray[i] }\n          delete childrenObject[childrenArray[i]['.key']]['.key']\n        }\n      }\n\n      this.$firebaseRefs.menu.child(parent['.key']).child('children').set(childrenObject)\n    },\n    moveSubLinkDown (currentKey, parent) {\n      let childrenObject = {}\n      let childrenArray = this.convertFirebaseObjToArray(parent.children)\n      let nextKey = ''\n\n      for (let i = childrenArray.length - 1; i >= 0; i--) {\n        if (childrenArray[i]['.key'] === currentKey) {\n          nextKey = childrenArray[i + 1]['.key']\n\n          childrenObject[nextKey] = { ...childrenArray[i] }\n          childrenObject[currentKey] = { ...childrenArray[i + 1] }\n\n          delete childrenObject[nextKey]['.key']\n          delete childrenObject[currentKey]['.key']\n        } else {\n          childrenObject[childrenArray[i]['.key']] = { ...childrenArray[i] }\n          delete childrenObject[childrenArray[i]['.key']]['.key']\n        }\n      }\n\n      this.$firebaseRefs.menu.child(parent['.key']).child('children').set(childrenObject)\n    },\n    convertFirebaseObjToArray (obj) {\n      let array = []\n      for (let key in obj) {\n        array.push({ '.key': key, ...obj[key] })\n      }\n      return array\n    },\n    removeSubLink (key, parent) {\n      this.$firebaseRefs.menu.child(parent['.key']).child('children').child(key).remove()\n    },\n    editSubLink (key, parent) {\n      this.name = parent.children[key].name\n      this.path = parent.children[key].path\n      this.action = 'edit-sub'\n      this.key = key\n      this.link = Object.assign({}, parent)\n    },\n    updateSubLink () {\n      this.$firebaseRefs.menu.child(this.link['.key']).child('children').child(this.key).update({\n        name: this.name,\n        path: this.path,\n        isAbsolute: this.isAbsolute\n      })\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.nav-builder {\n  .nav-preview {\n    padding-left: 15px;\n  }\n\n  .sub-nav-preview {\n    padding-left: 30px;\n  }\n\n  .link-actions,\n  .sub-link-actions {\n    display: none;\n    span {\n      cursor: pointer;\n    }\n  }\n\n  .nav-preview > li:hover .link-actions {\n    display: inline;\n  }\n\n  .sub-nav-preview > li:hover .sub-link-actions {\n    display: inline;\n  }\n\n  .sub-nav-preview > li:first-child {\n    .fa-arrow-up {\n      display: none;\n    }\n  }\n\n  .sub-nav-preview > li:last-child {\n    .fa-arrow-down {\n      display: none;\n    }\n  }\n}\n</style>\n"]}]}