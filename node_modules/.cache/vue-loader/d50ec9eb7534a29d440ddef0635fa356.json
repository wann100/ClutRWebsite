{"remainingRequest":"/Users/kognos/Documents/GitHub/tamiat/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kognos/Documents/GitHub/tamiat/src/admin/components/shared/Dropdown.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/kognos/Documents/GitHub/tamiat/src/admin/components/shared/Dropdown.vue","mtime":1565240946484},{"path":"/Users/kognos/Documents/GitHub/tamiat/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/tamiat/node_modules/babel-loader/lib/index.js","mtime":1558705227210},{"path":"/Users/kognos/Documents/GitHub/tamiat/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/tamiat/node_modules/vue-loader/lib/index.js","mtime":1565232945777}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'dropdown',\n  data () {\n    return {\n      dropdownActive: false\n    }\n  },\n  methods: {\n    toggleDropdown () {\n      this.dropdownActive = !this.dropdownActive\n    },\n    selectOption (option) {\n      this.selectedElement.id = option.id\n      this.selectedElement.label = option.label\n      if (option.id === 'newPage') {\n        this.$emit('addNewPage')\n      } else if (option.id === 'delete') {\n        this.$emit('bulkDelete')\n      } else {\n        this.$emit('selectBulkActions')\n      }\n    }\n  },\n  props: {\n    options: {\n      type: Array,\n      required: true\n    },\n    selectedElement: {\n      type: Object,\n      required: true\n    }\n  }\n}\n",{"version":3,"sources":["Dropdown.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Dropdown.vue","sourceRoot":"src/admin/components/shared","sourcesContent":["<template>\n  <div class=\"dropdown\" :class=\"{'is-active': dropdownActive}\" @click=\"toggleDropdown\">\n    <div class=\"dropdown-trigger\">\n      <button class=\"button\" aria-haspopup=\"true\" aria-controls=\"dropdown-menu\" style=\"min-width: 200px !important;\">\n        <span>{{selectedElement.label}}</span>\n        <span class=\"icon is-small\">\n          <i class=\"fa fa-angle-down\" aria-hidden=\"true\"></i>\n        </span>\n      </button>\n    </div>\n    <div class=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n      <div class=\"dropdown-content\">\n        <a class=\"dropdown-item\" v-if=\"option\" v-for=\"(option, optionKey) in options\" :key=\"optionKey\" @click=\"selectOption(option)\">\n          {{option.label ? option.label : null }}\n        </a>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'dropdown',\n  data () {\n    return {\n      dropdownActive: false\n    }\n  },\n  methods: {\n    toggleDropdown () {\n      this.dropdownActive = !this.dropdownActive\n    },\n    selectOption (option) {\n      this.selectedElement.id = option.id\n      this.selectedElement.label = option.label\n      if (option.id === 'newPage') {\n        this.$emit('addNewPage')\n      } else if (option.id === 'delete') {\n        this.$emit('bulkDelete')\n      } else {\n        this.$emit('selectBulkActions')\n      }\n    }\n  },\n  props: {\n    options: {\n      type: Array,\n      required: true\n    },\n    selectedElement: {\n      type: Object,\n      required: true\n    }\n  }\n}\n</script>\n"]}]}