{"remainingRequest":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/src/admin/pages/content/fields/FieldNew.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/src/admin/pages/content/fields/FieldNew.vue","mtime":1565240946488},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/node_modules/babel-loader/lib/index.js","mtime":1558705227210},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/node_modules/vue-loader/lib/index.js","mtime":1565232945777}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport checkbox from '@/admin/components/shared/Checkbox'\nimport dropdown from '@/admin/components/shared/Dropdown'\nimport { contentsRef, fieldsRef } from '@/admin/firebase_config'\nimport notifier from '@/admin/mixins/notifier'\nexport default {\n  name: 'fieldNew',\n  mixins: [notifier],\n  firebase: {\n    contents: contentsRef,\n    fields: fieldsRef\n  },\n  data () {\n    return {\n      fieldName: '',\n      fieldType: {\n        id: '',\n        label: 'Field type'\n      },\n      multiValue: false,\n      listable: false,\n      fieldTypes: [\n        {\n          id: 'textarea',\n          label: 'Textarea'\n        },\n        {\n          id: 'textbox',\n          label: 'Textbox'\n        },\n        {\n          id: 'integer',\n          label: 'Integer'\n        },\n        {\n          id: 'boolean',\n          label: 'Boolean'\n        },\n        {\n          id: 'url',\n          label: 'Url'\n        },\n        {\n          id: 'richtextbox',\n          label: 'Richtextbox'\n        },\n        {\n          id: 'tags',\n          label: 'Tags'\n        },\n        {\n          id: 'select',\n          label: 'Select'\n        },\n        {\n          id: 'image',\n          label: 'Image'\n        }\n      ]\n    }\n  },\n  props: ['add-field'],\n  methods: {\n    add () {\n      let f = {\n        name: this.fieldName,\n        type: this.fieldType.id,\n        multiValue: this.multiValue,\n        listable: this.listable\n      }\n      if (f.listable && f.type === 'textarea') {\n        this.$notify({\n          title: 'Important message',\n          text: 'Field type must be other than \\'textarea\\' to apply sorting',\n          type: 'error'\n        })\n        return\n      }\n      this.addField(f)\n      this.fieldName = ''\n      this.fieldType = {\n        id: '',\n        label: 'Field type'\n      }\n      this.multiValue = false\n      this.listable = false\n      this.$router.push({ path: '/admin/content' })\n    },\n    resetForm () {\n      this.name = ''\n\n      for (var key in this.supports) {\n        this.supports[key] = false\n      }\n    }\n  },\n  components: {\n    checkbox,\n    dropdown\n  }\n}\n\n",{"version":3,"sources":["FieldNew.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"FieldNew.vue","sourceRoot":"src/admin/pages/content/fields","sourcesContent":["<template>\n  <div class=\"container is-widescreen\">\n\n    <h3 class=\"is-size-3 has-text-centered\">Create content field</h3><br>\n    <div class=\"box\">\n      <div class=\"columns\">\n        <div class=\"column is-one-third\">\n          <div class=\"field\">\n            <label class=\"label\">Field name</label>\n            <div class=\"control\">\n              <input class=\"input\" type=\"text\" placeholder=\"Field name\" v-model=\"fieldName\">\n            </div>\n          </div>\n          <div class=\"field\">\n            <label class=\"label\">Field type</label>\n            <div class=\"control\">\n              <dropdown :options=\"fieldTypes\" :selectedElement=\"fieldType\" />\n            </div>\n          </div>\n          <div class=\"field\">\n            <label class=\"label\">Multi value allowed</label>\n            <div class=\"control\">\n              <checkbox v-model=\"multiValue\" />\n            </div>\n            <label class=\"label\">Listable</label>\n            <div class=\"control\">\n              <checkbox v-model=\"listable\" />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"buttons\">\n        <button type=\"submit\" class=\"button is-success\" :disabled=\"fieldName === '' || fieldType.id === ''\" @click=\"add()\">Add field</button>\n        <router-link to=\"/admin/content\" class=\"button is-danger\">Cancel</router-link>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport checkbox from '@/admin/components/shared/Checkbox'\nimport dropdown from '@/admin/components/shared/Dropdown'\nimport { contentsRef, fieldsRef } from '@/admin/firebase_config'\nimport notifier from '@/admin/mixins/notifier'\nexport default {\n  name: 'fieldNew',\n  mixins: [notifier],\n  firebase: {\n    contents: contentsRef,\n    fields: fieldsRef\n  },\n  data () {\n    return {\n      fieldName: '',\n      fieldType: {\n        id: '',\n        label: 'Field type'\n      },\n      multiValue: false,\n      listable: false,\n      fieldTypes: [\n        {\n          id: 'textarea',\n          label: 'Textarea'\n        },\n        {\n          id: 'textbox',\n          label: 'Textbox'\n        },\n        {\n          id: 'integer',\n          label: 'Integer'\n        },\n        {\n          id: 'boolean',\n          label: 'Boolean'\n        },\n        {\n          id: 'url',\n          label: 'Url'\n        },\n        {\n          id: 'richtextbox',\n          label: 'Richtextbox'\n        },\n        {\n          id: 'tags',\n          label: 'Tags'\n        },\n        {\n          id: 'select',\n          label: 'Select'\n        },\n        {\n          id: 'image',\n          label: 'Image'\n        }\n      ]\n    }\n  },\n  props: ['add-field'],\n  methods: {\n    add () {\n      let f = {\n        name: this.fieldName,\n        type: this.fieldType.id,\n        multiValue: this.multiValue,\n        listable: this.listable\n      }\n      if (f.listable && f.type === 'textarea') {\n        this.$notify({\n          title: 'Important message',\n          text: 'Field type must be other than \\'textarea\\' to apply sorting',\n          type: 'error'\n        })\n        return\n      }\n      this.addField(f)\n      this.fieldName = ''\n      this.fieldType = {\n        id: '',\n        label: 'Field type'\n      }\n      this.multiValue = false\n      this.listable = false\n      this.$router.push({ path: '/admin/content' })\n    },\n    resetForm () {\n      this.name = ''\n\n      for (var key in this.supports) {\n        this.supports[key] = false\n      }\n    }\n  },\n  components: {\n    checkbox,\n    dropdown\n  }\n}\n\n</script>\n\n<style>\n</style>\n"]}]}