{"remainingRequest":"/Users/kognos/Documents/GitHub/tamiat/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kognos/Documents/GitHub/tamiat/src/admin/pages/Database.vue?vue&type=style&index=0&id=525dc69f&lang=scss&scoped=true&","dependencies":[{"path":"/Users/kognos/Documents/GitHub/tamiat/src/admin/pages/Database.vue","mtime":1565240946488},{"path":"/Users/kognos/Documents/GitHub/tamiat/node_modules/css-loader/index.js","mtime":1565232945271},{"path":"/Users/kognos/Documents/GitHub/tamiat/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1565232945777},{"path":"/Users/kognos/Documents/GitHub/tamiat/node_modules/postcss-loader/src/index.js","mtime":1558705227897},{"path":"/Users/kognos/Documents/GitHub/tamiat/node_modules/sass-loader/lib/loader.js","mtime":1558705227962},{"path":"/Users/kognos/Documents/GitHub/tamiat/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/tamiat/node_modules/vue-loader/lib/index.js","mtime":1565232945777}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.column > div {\n  margin-top: 15px;\n  &:first-child {\n    margin-top: 0px;\n  }\n}\n\nbutton {\n  vertical-align: middle !important;\n  margin-left: 30px;\n}\n",{"version":3,"sources":["Database.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2XA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"Database.vue","sourceRoot":"src/admin/pages","sourcesContent":["<template>\n  <div class=\"container\">\n    <!-- notification -->\n    <transition mode=\"out-in\" name=\"fade\">\n      <div v-if=\"notification.message\" :class=\"'notification is-' + notification.type\">\n        <button class=\"delete\" @click=\"hideNotifications\"></button>\n        {{notification.message}}\n      </div>\n    </transition>\n\n    <h2>Database State</h2>\n    <div class=\"box\">\n      <div class=\"columns\">\n        <div class=\"column\">\n          <div>\n            Settings:\n            <span v-if=\"settings.length === 0\" class=\"has-text-danger\">\n              Empty\n              <button class=\"button is-info\" @click=\"addDemoSettings\">Add Demo Settings</button>\n            </span>\n            <span v-else class=\"has-text-success\">Contains data</span>\n          </div>\n\n          <div>\n            Media:\n            <span v-if=\"media.length === 0\" class=\"has-text-danger\">\n              Empty\n              <button class=\"button is-info\" @click=\"addDemoLogo\">Add Demo Logo</button>\n            </span>\n            <span v-else class=\"has-text-success\">Contains data</span>\n          </div>\n\n          <div>\n            Nav:\n            <span v-if=\"nav.length === 0\" class=\"has-text-danger\">\n              Empty\n              <button class=\"button is-info\" @click=\"addDemoNav\">Add Demo Nav</button>\n            </span>\n            <span v-else class=\"has-text-success\">Contains data</span>\n          </div>\n\n          <div>\n            Content:\n            <span v-if=\"contents.length === 0\" class=\"has-text-danger\">\n              Empty\n              <button class=\"button is-info\" @click=\"addDemoContent\">Add Demo Content</button>\n            </span>\n            <span v-else class=\"has-text-success\">Contains data</span>\n          </div>\n\n          <div>\n            Fields:\n            <span v-if=\"fields.length === 0\" class=\"has-text-danger\">\n              Empty\n              <button class=\"button is-info\" @click=\"addDemoFields\">Add Demo Field</button>\n            </span>\n            <span v-else class=\"has-text-success\">Contains data</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport firebase from \"firebase/app\";\nimport \"firebase/storage\";\nimport { demoData } from \"@/../tamiat.config.json\";\nimport notifier from \"@/admin/mixins/notifier\";\nimport {\n  settingsRef,\n  mediaRef,\n  navRef,\n  contentsRef,\n  fieldsRef,\n  routesRef\n} from \"@/admin/firebase_config\";\nimport _ from \"lodash\";\n\nexport default {\n  data() {\n    return { ...demoData, con: \"\" };\n  },\n  firebase: {\n    settings: settingsRef,\n    media: mediaRef,\n    nav: navRef,\n    fields: fieldsRef,\n    contents: contentsRef,\n    routes: routesRef\n  },\n  mixins: [notifier],\n  methods: {\n    addDemoContentsData() {\n      let storageRef = firebase.storage().ref();\n      Object.keys(this.demoContentsData).map(key => {\n        let hashKey = _.find(this.contents, { name: key })[\".key\"];\n\n        this.demoContentsData[key].map(content => {\n          let imageName = content.title ? `tamiat-${content.title}.png` : `tamiat-${content.author}.png`;\n          let ImageRef = storageRef.child(\"images/\" + imageName);\n          let imgDownloadURL = \"\";\n          //if condition prevents the function from uploading an empty file when demo content does not have img property(Post, News...) Othervise it will upload a text/html file instead of an image since the promise returned undefined and the browser will say that the image was blocked by CORB (since it is a text/html file)\n          \n          if(!content.img){\n            content.img = \"https://raw.githubusercontent.com/tamiat/tamiat/master/src/app/assets/img/coast.jpg\"\n            }\n          this.fetchBlob(content.img)\n            .then(blob => {\n              return ImageRef.put(blob);\n            })\n            .then(snapshot => {\n              return snapshot.ref.getDownloadURL();\n            })\n            .then(downloadURL => {\n              imgDownloadURL = downloadURL;\n              content.created = Date.now();\n              content.img = imgDownloadURL;\n              return this.$firebaseRefs.contents\n                .child(hashKey + \"/data\")\n                .push(content);\n            })\n            .then(() => {\n              return this.$firebaseRefs.media.push({\n                name: imageName,\n                path: ImageRef.fullPath,\n                src: imgDownloadURL\n              });\n            });\n        });\n      });\n    },\n\n// this is the old code\n    // addDemoServices() {\n    //   let i = this.demoServices.length;\n    //   this.demoServices.forEach(service => {\n    //     const key = _.find(this.contents, { name: \"Services\" })[\".key\"];\n    //     service.created = Date.now();\n    //     this.$firebaseRefs.contents\n    //       .child(key + \"/data\")\n    //       .push(service)\n    //       .then(() => {\n    //         i--;\n    //         if (i === 0) {\n    //           this.showNotification(\n    //             \"success\",\n    //             \"Demo Services added successfully\"\n    //           );\n    //         }\n    //       });\n    //   });\n    // },\n    // addDemoWorks() {\n    //   let storageRef = firebase.storage().ref();\n    //   const key = _.find(this.contents, { name: \"Works\" })[\".key\"];\n\n    //   this.demoWorks.forEach(work => {\n    //     // let imageName = `work-${work.title}.jpg`\n    //     // let workImageRef = storageRef.child('images/' + imageName)\n    //     // let imgDownloadURL = ''\n\n    //     this.fetchBlob(work.img)\n    //       // .then(blob => {\n    //       //   return workImageRef.put(blob)\n    //       // })\n    //       // .then(snapshot => {\n    //       //   return snapshot.ref.getDownloadURL()\n    //       // })\n    //       .then(downloadURL => {\n    //         // imgDownloadURL = downloadURL\n    //         // work.created = Date.now()\n    //         // work.img = imgDownloadURL\n\n    //         return this.$firebaseRefs.contents.child(key + \"/data\").push(work);\n    //       })\n    //       .then(() => {\n    //         return this.$firebaseRefs.media.push({\n    //           name: imageName,\n    //           path: workImageRef.fullPath,\n    //           src: imgDownloadURL\n    //         });\n    //       });\n    //   });\n    // },\n    // addDemoReviews() {\n    //   let storageRef = firebase.storage().ref();\n    //   const key = _.find(this.contents, { name: \"Reviews\" })[\".key\"];\n\n    //   this.demoReviews.forEach(review => {\n    //     let imageName = `review-author-${review.author}.png`;\n    //     let reviewImageRef = storageRef.child(\"images/\" + imageName);\n    //     let imgDownloadURL = \"\";\n\n    //     this.fetchBlob(review.img)\n    //       .then(blob => {\n    //         return reviewImageRef.put(blob);\n    //       })\n    //       .then(snapshot => {\n    //         return snapshot.ref.getDownloadURL();\n    //       })\n    //       .then(downloadURL => {\n    //         imgDownloadURL = downloadURL;\n    //         review.created = Date.now();\n    //         review.img = imgDownloadURL;\n\n    //         return this.$firebaseRefs.contents\n    //           .child(key + \"/data\")\n    //           .push(review);\n    //       })\n    //       .then(() => {\n    //         return this.$firebaseRefs.media.push({\n    //           name: imageName,\n    //           path: reviewImageRef.fullPath,\n    //           src: imgDownloadURL\n    //         });\n    //       });\n    //   });\n    // },\n    // addDemoPost() {\n    //   let storageRef = firebase.storage().ref();\n    //   let postImageRef = storageRef.child(\"images/demo-post-img.png\");\n    //   let imgDownloadURL = \"\";\n\n    //   this.fetchLogoBlob()\n    //     .then(blob => {\n    //       return postImageRef.put(blob);\n    //     })\n    //     .then(snapshot => {\n    //       return snapshot.ref.getDownloadURL();\n    //     })\n    //     .then(downloadURL => {\n    //       imgDownloadURL = downloadURL;\n    //       let demoPost = { ...this.demoPost };\n    //       demoPost.created = Date.now();\n    //       demoPost.img = imgDownloadURL;\n    //       demoPost.body += `<p><img src=\"${imgDownloadURL}\"></p>`;\n    //       const key = _.find(this.contents, { name: \"Posts\" })[\".key\"];\n    //       return this.$firebaseRefs.contents\n    //         .child(key + \"/data\")\n    //         .push(demoPost);\n    //     })\n    //     .then(() => {\n    //       return this.$firebaseRefs.media.push({\n    //         name: \"demo-post-img.png\",\n    //         path: postImageRef.fullPath,\n    //         src: imgDownloadURL\n    //       });\n    //     })\n    //     .then(() => {\n    //       // this.showNotification('success', 'Demo Content added successfully')\n    //     });\n    // },\n    // addDemoNews() {\n    //   let storageRef = firebase.storage().ref();\n    //   let postImageRef = storageRef.child(\"images/demo-post-img.png\");\n    //   let imgDownloadURL = \"\";\n    //   const key = _.find(this.contents, { name: \"News\" })[\".key\"];\n\n    //   this.fetchLogoBlob()\n    //     .then(blob => {\n    //       return postImageRef.put(blob);\n    //     })\n    //     .then(snapshot => {\n    //       return snapshot.ref.getDownloadURL();\n    //     })\n    //     .then(downloadURL => {\n    //       imgDownloadURL = downloadURL;\n    //       let demoNews = { ...this.demoNews };\n    //       demoNews.created = Date.now();\n    //       demoNews.img = imgDownloadURL;\n    //       return this.$firebaseRefs.contents\n    //         .child(key + \"/data\")\n    //         .push(demoNews);\n    //     })\n    //     .then(() => {\n    //       return this.$firebaseRefs.media.push({\n    //         name: \"demo-post-img.png\",\n    //         path: postImageRef.fullPath,\n    //         src: imgDownloadURL\n    //       });\n    //     })\n    //     .then(() => {\n    //       this.addDemoRoutesForNews();\n    //       this.showNotification(\"success\", \"Demo Content added successfully\");\n    //     });\n    // },\n    addDemoRoutesForNews() {\n      let i = this.demoRoutes.length;\n      this.demoRoutes.forEach(route => {\n        this.$firebaseRefs.routes.push(route).then(() => {\n          i--;\n          if (i === 0) {\n            this.showNotification(\"success\", \"Demo Route added successfully\");\n          }\n        });\n      });\n    },\n    addDemoSettings() {\n      this.$firebaseRefs.settings.update(this.demoSettings).then(() => {\n        this.showNotification(\"success\", \"Demo Settings added successfully\");\n      });\n    },\n    addDemoNav() {\n      let i = this.demoNav.length;\n      this.demoNav.forEach(link => {\n        this.$firebaseRefs.nav.push(link).then(() => {\n          i--;\n          if (i === 0) {\n            this.showNotification(\"success\", \"Demo Nav added successfully\");\n          }\n        });\n      });\n    },\n    addDemoLogo() {\n      let storageRef = firebase.storage().ref();\n      let logoRef = storageRef.child(`images/tamiatlogo.png`);\n\n      this.fetchLogoBlob().then(blob => {\n        logoRef.put(blob).then(snapshot => {\n          this.addDemoLogoToDB(snapshot);\n        });\n      });\n    },\n    fetchLogoBlob() {\n      return this.fetchBlob(this.demoLogoLink);\n    },\n    fetchBlob(link) {\n      return fetch(link).then(res => {\n        return res.blob();\n      });\n    },\n    addDemoLogoToDB(snapshot) {\n      snapshot.ref\n        .getDownloadURL()\n        .then(downloadURL => {\n          return this.$firebaseRefs.media.push({\n            name: \"WebsiteLogo\",\n            path: snapshot.ref.fullPath,\n            src: downloadURL\n          });\n        })\n        .then(() => {\n          this.showNotification(\"success\", \"Demo Logo added successfully\");\n        });\n    },\n    addDemoFields() {\n      let i = this.demoFields.length;\n      this.demoFields.forEach(field => {\n        this.$firebaseRefs.fields.push(field).then(() => {\n          i--;\n          if (i === 0) {\n            this.showNotification(\"success\", \"Demo fields added successfully\");\n          }\n        });\n      });\n    },\n    addDemoContent() {\n      let i = this.demoContent.length;\n\n      this.demoContent.forEach(content => {\n        this.$firebaseRefs.contents.push(content).then(c => {\n          i--;\n          if (i === 0) {\n            this.con = c.key;\n            //   this.addDemoPost()\n            //   this.addDemoNews()\n            //   this.addDemoServices()\n            //   this.addDemoReviews()\n            this.addDemoContentsData();\n          }\n        });\n      });\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.column > div {\n  margin-top: 15px;\n  &:first-child {\n    margin-top: 0px;\n  }\n}\n\nbutton {\n  vertical-align: middle !important;\n  margin-left: 30px;\n}\n</style>\n"]}]}