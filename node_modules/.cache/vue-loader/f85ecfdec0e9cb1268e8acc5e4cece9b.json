{"remainingRequest":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/src/admin/pages/settings/Settings.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/src/admin/pages/settings/Settings.vue","mtime":1565240946489},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/node_modules/babel-loader/lib/index.js","mtime":1558705227210},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/node_modules/cache-loader/dist/cjs.js","mtime":1565232945238},{"path":"/Users/kognos/Documents/GitHub/ClutRWebsite/tamiat/node_modules/vue-loader/lib/index.js","mtime":1565232945777}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport firebase from 'firebase/app'\nimport 'firebase/storage'\nimport { mediaRef, settingsRef } from '@/admin/firebase_config'\nimport notifier from '@/admin/mixins/notifier'\nimport modal from '@/admin/components/shared/Modal'\nimport NavBuilder from './NavBuilder'\nimport imageLoader from '@/admin/mixins/image-loader'\nexport default {\n  name: 'settings',\n  data () {\n    return {\n      updatesCounter: 0,\n      // this array contains settings form fields\n      fields: [\n        {\n          label: 'Site Title',\n          name: 'title',\n          value: ''\n        },\n        {\n          label: 'Site Description',\n          name: 'description',\n          value: ''\n        }\n      ],\n      showModal: false,\n      header: '',\n      kind: '',\n      deleteKey: '',\n      websiteLogo: ''\n    }\n  },\n  firebase: {\n    // load settings as an object instead of array (default)\n    settings: {\n      source: settingsRef,\n      asObject: true\n    },\n    media: mediaRef\n  },\n  mixins: [notifier, imageLoader],\n  methods: {\n    saveSettings () {\n      delete this.settings['.key'] // This is a bit weird but no problem\n      this.$firebaseRefs.settings.update(this.settings).then(() => {\n        this.showNotification('success', 'Settings Successfully saved')\n      })\n    },\n    // display the loaded settings\n    displaySettings () {\n      for (let key in this.settings) {\n        this.fields.map((field) => {\n          if (field.name === key) {\n            field.value = this.settings[key]\n            return this.settings[key]\n          }\n        })\n      }\n    },\n    addSettingField () {\n      this.header = 'Name for a new setting: '\n      this.kind = 'addSetting'\n      this.showModal = true\n    },\n    confirmAddSetting (value) {\n      if (value === '') {\n        this.showNotification('danger', 'Please input the name of the setting first')\n        return\n      }\n      if (this.settings.hasOwnProperty(value)) {\n        this.showNotification('danger', 'This setting already exist')\n        return\n      }\n\n      this.$firebaseRefs.settings.update({\n        [value]: ''\n      }).then(() => {\n        this.showNotification('success', 'Setting Successfully added')\n        this.showModal = false\n      }).catch(() => {\n        this.showNotification('error', 'Setting not added')\n      })\n    },\n    deleteSettingsField (key) {\n      this.header = 'Are you sure you want to delete this setting?'\n      this.kind = 'deleteSetting'\n      this.showModal = true\n      this.deleteKey = key\n    },\n    confirmDeleteSetting () {\n      this.$firebaseRefs.settings\n        .child(this.deleteKey)\n        .remove()\n        .then(() => {\n          this.showNotification('success', 'Setting successfully removed')\n          this.showModal = false\n          this.deleteKey = ''\n          this.kind = ''\n        })\n        .catch((e) => {\n          this.showNotification('error', 'Setting not removed')\n        })\n    },\n    uploadWebsiteLogo (e) {\n      let file = e.target.files[0]\n      let storageRef = firebase.storage().ref('images/' + file.name)\n\n      var i = this.media.length\n      var currentLogo = null\n      while (i--) {\n        if (this.media[i].name === 'WebsiteLogo') {\n          currentLogo = this.media[i]\n          break\n        }\n      }\n      storageRef.put(file).then((snapshot) => {\n        snapshot.ref.getDownloadURL().then(downloadURL => {\n          this.websiteLogo = downloadURL\n\n          var logo = {\n            src: downloadURL,\n            path: snapshot.ref.fullPath,\n            name: 'WebsiteLogo'\n          }\n          // let tempLogo = {...currentLogo}\n          // making sure that the image is uploaded into the media object and is registered in tamiat regerdless if it remains a logo or not so it can be used nonetheless\n          if (Object.values(this.media).find(e => e.path === snapshot.ref.fullPath)) {\n          } else {\n            this.$firebaseRefs.media.push({\n              src: downloadURL,\n              path: snapshot.ref.fullPath,\n              name: snapshot.metadata.name\n            })\n          }\n          // the uploaded image either overrides the current logo or is set in a new media object as such\n          if (currentLogo) {\n          // delete tempLogo[key]\n            this.$firebaseRefs.media.child(currentLogo['.key']).set(logo)\n              .then(() => {\n                this.showNotification('success', 'Logo uploaded successfully')\n              })\n          } else {\n            this.$firebaseRefs.media.push({\n              src: downloadURL,\n              path: snapshot.ref.fullPath,\n              name: 'WebsiteLogo'\n            }).then(() => {\n              this.showNotification('success', 'Logo uploaded successfully')\n            })\n          }\n        })\n      })\n    }\n  },\n  updated () {\n    // run the loaded settings once\n    if (this.updatesCounter === 0) {\n      this.displaySettings()\n    }\n    this.updatesCounter++\n  },\n  components: {\n    modal,\n    NavBuilder\n  }\n}\n\n",{"version":3,"sources":["Settings.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsfile":"Settings.vue","sourceRoot":"src/admin/pages/settings","sourcesContent":["<template>\n  <div class=\"container settings\" id=\"settings\">\n\n    <!-- notification -->\n    <transition mode=\"out-in\" name=\"fade\">\n      <div v-if=\"notification.message\" :class=\"'notification is-' + notification.type\">\n        <button class=\"delete\" @click=\"hideNotifications\"></button>{{notification.message}}\n      </div>\n    </transition>\n    <!-- modal for add setting -->\n    <transition mode=\"out-in\" name=\"fade\">\n      <modal @close=\"showModal = false\" :kind=\"kind\" @addSetting='confirmAddSetting' @confirmDeleteSetting=\"confirmDeleteSetting()\" v-if=\"showModal\" :header=\"header\" />\n    </transition>\n\n    <h2>General settings</h2>\n    <div class=\"box\">\n      <div class=\"columns\">\n\n        <div class=\"column is-one-third\">\n          <div class=\"field columns\">\n            <div class=\"control column is-two-thirds\">\n              <div class=\"field\">\n                <label class=\"label\">Website logo</label>\n                <div class=\"control\">\n                  <img :src=\"websiteLogo\">\n                  <div class=\"file\">\n                    <label class=\"file-label\">\n                      <input @change=\"uploadWebsiteLogo\" class=\"file-input\" type=\"file\" name=\"resume\">\n                      <span class=\"file-cta\">\n                        <span class=\"file-icon\">\n                          <i class=\"fa fa-upload\"></i>\n                        </span>\n                        <span class=\"file-label\">\n                          Choose a fileâ€¦\n                        </span>\n                      </span>\n                    </label>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"column is-multiline\">\n          <div v-for=\"(field, key) in settings\" class=\"field columns\" :key=\"key\" v-if=\"key !== '.key'\">\n            <div class=\"column is-one-third\">\n              <span class=\"tag\">\n                {{key}}\n                <button class=\"delete is-small\" @click=\"deleteSettingsField(key)\"></button>\n              </span>\n            </div>\n\n            <div class=\"control column is-two-thirds\">\n              <input type=\"text\" class=\"input\" :name=\"field\" :placeholder=\"field\" v-model=\"settings[key]\">\n            </div>\n          </div>\n          <!-- Main container -->\n          <nav class=\"level\">\n            <!-- Left side -->\n            <div class=\"level-left\">\n              <!--<div class=\"level-item\"></div>-->\n            </div>\n            <!-- Right side -->\n            <div class=\"level-right\">\n              <div class=\"level-item\">\n                <button type=\"button\" class=\"button is-pulled-right\" @click=\"addSettingField\">\n                  Add Settings field\n                </button>\n              </div>\n              <div class=\"level-item\">\n                <button type=\"button\" class=\"button is-info is-pulled-right\" @click=\"saveSettings\">\n                  Save Settings\n                </button>\n              </div>\n            </div>\n          </nav>\n        </div>\n      </div>\n    </div>\n\n    <!-- nav builder -->\n    <nav-builder></nav-builder>\n  </div>\n</template>\n\n<script>\nimport firebase from 'firebase/app'\nimport 'firebase/storage'\nimport { mediaRef, settingsRef } from '@/admin/firebase_config'\nimport notifier from '@/admin/mixins/notifier'\nimport modal from '@/admin/components/shared/Modal'\nimport NavBuilder from './NavBuilder'\nimport imageLoader from '@/admin/mixins/image-loader'\nexport default {\n  name: 'settings',\n  data () {\n    return {\n      updatesCounter: 0,\n      // this array contains settings form fields\n      fields: [\n        {\n          label: 'Site Title',\n          name: 'title',\n          value: ''\n        },\n        {\n          label: 'Site Description',\n          name: 'description',\n          value: ''\n        }\n      ],\n      showModal: false,\n      header: '',\n      kind: '',\n      deleteKey: '',\n      websiteLogo: ''\n    }\n  },\n  firebase: {\n    // load settings as an object instead of array (default)\n    settings: {\n      source: settingsRef,\n      asObject: true\n    },\n    media: mediaRef\n  },\n  mixins: [notifier, imageLoader],\n  methods: {\n    saveSettings () {\n      delete this.settings['.key'] // This is a bit weird but no problem\n      this.$firebaseRefs.settings.update(this.settings).then(() => {\n        this.showNotification('success', 'Settings Successfully saved')\n      })\n    },\n    // display the loaded settings\n    displaySettings () {\n      for (let key in this.settings) {\n        this.fields.map((field) => {\n          if (field.name === key) {\n            field.value = this.settings[key]\n            return this.settings[key]\n          }\n        })\n      }\n    },\n    addSettingField () {\n      this.header = 'Name for a new setting: '\n      this.kind = 'addSetting'\n      this.showModal = true\n    },\n    confirmAddSetting (value) {\n      if (value === '') {\n        this.showNotification('danger', 'Please input the name of the setting first')\n        return\n      }\n      if (this.settings.hasOwnProperty(value)) {\n        this.showNotification('danger', 'This setting already exist')\n        return\n      }\n\n      this.$firebaseRefs.settings.update({\n        [value]: ''\n      }).then(() => {\n        this.showNotification('success', 'Setting Successfully added')\n        this.showModal = false\n      }).catch(() => {\n        this.showNotification('error', 'Setting not added')\n      })\n    },\n    deleteSettingsField (key) {\n      this.header = 'Are you sure you want to delete this setting?'\n      this.kind = 'deleteSetting'\n      this.showModal = true\n      this.deleteKey = key\n    },\n    confirmDeleteSetting () {\n      this.$firebaseRefs.settings\n        .child(this.deleteKey)\n        .remove()\n        .then(() => {\n          this.showNotification('success', 'Setting successfully removed')\n          this.showModal = false\n          this.deleteKey = ''\n          this.kind = ''\n        })\n        .catch((e) => {\n          this.showNotification('error', 'Setting not removed')\n        })\n    },\n    uploadWebsiteLogo (e) {\n      let file = e.target.files[0]\n      let storageRef = firebase.storage().ref('images/' + file.name)\n\n      var i = this.media.length\n      var currentLogo = null\n      while (i--) {\n        if (this.media[i].name === 'WebsiteLogo') {\n          currentLogo = this.media[i]\n          break\n        }\n      }\n      storageRef.put(file).then((snapshot) => {\n        snapshot.ref.getDownloadURL().then(downloadURL => {\n          this.websiteLogo = downloadURL\n\n          var logo = {\n            src: downloadURL,\n            path: snapshot.ref.fullPath,\n            name: 'WebsiteLogo'\n          }\n          // let tempLogo = {...currentLogo}\n          // making sure that the image is uploaded into the media object and is registered in tamiat regerdless if it remains a logo or not so it can be used nonetheless\n          if (Object.values(this.media).find(e => e.path === snapshot.ref.fullPath)) {\n          } else {\n            this.$firebaseRefs.media.push({\n              src: downloadURL,\n              path: snapshot.ref.fullPath,\n              name: snapshot.metadata.name\n            })\n          }\n          // the uploaded image either overrides the current logo or is set in a new media object as such\n          if (currentLogo) {\n          // delete tempLogo[key]\n            this.$firebaseRefs.media.child(currentLogo['.key']).set(logo)\n              .then(() => {\n                this.showNotification('success', 'Logo uploaded successfully')\n              })\n          } else {\n            this.$firebaseRefs.media.push({\n              src: downloadURL,\n              path: snapshot.ref.fullPath,\n              name: 'WebsiteLogo'\n            }).then(() => {\n              this.showNotification('success', 'Logo uploaded successfully')\n            })\n          }\n        })\n      })\n    }\n  },\n  updated () {\n    // run the loaded settings once\n    if (this.updatesCounter === 0) {\n      this.displaySettings()\n    }\n    this.updatesCounter++\n  },\n  components: {\n    modal,\n    NavBuilder\n  }\n}\n\n</script>\n"]}]}